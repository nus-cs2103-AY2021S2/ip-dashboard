[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"    "},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    mainClassName \u003d \"seedu.duke.Duke\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"GJ0407790":14,"-":46}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":59}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"    private Duke duke \u003d new Duke(\"../tasks.txt\");"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().addWelcomeDialog();"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":32}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"    public void addWelcomeDialog() {"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"        String welcomeMessage \u003d \"Hello! I\u0027m Duke\" + System.lineSeparator()"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"                + \"What can I do for you?\";"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"                DialogBox.getDukeDialog(welcomeMessage, dukeImage)"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"        );"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"    @FXML"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"    private void handleUserInput() {"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":61,"author":{"gitId":"GJ0407790"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":62,"author":{"gitId":"GJ0407790"},"content":"            Stage currStage \u003d (Stage) dialogContainer.getScene().getWindow();"},{"lineNumber":63,"author":{"gitId":"GJ0407790"},"content":"            currStage.close();"},{"lineNumber":64,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":66}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.command.Statement;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"    private Ui ui;"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"    private TaskList tasks;"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"     * Returns a Duke object representing the chatbox."},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"     * @param filePath The filepath storing the data."},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    public Duke(String filePath) {"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"        ui \u003d new Ui();"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"            ui.showLoadingError();"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     * Initialize the program by start taking in inputs."},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"    public String getResponse(String input) {"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"            Statement statement \u003d new Statement(input);"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"            Command c \u003d statement.parse();"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"            return c.execute(tasks, ui, storage);"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"        } catch (DukeException e) {"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"            return ui.showError(e.getMessage());"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"}"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":""}],"authorContributionMap":{"GJ0407790":44}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" * Ui is a class representing the user interface. The main function of the class is"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":" * to output result on the console."},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"    private Scanner sc;"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    Ui() {"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"        sc \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     * Reads the next line of input from the user."},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"     * @return input by the user in string."},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"    String readCommand() {"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"        return sc.nextLine();"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     * Greets the user when the program is being initialized."},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"     * @return A welcome message from Duke."},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"    String showWelcome() {"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"        return \"Hello! I\u0027m Duke\" + System.lineSeparator()"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"                + \"What can I do for you?\";"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"     * Returns the error message."},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"     * @param msg The message that caused the error."},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"     * @return The error message."},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"    String showError(String msg) {"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"        return msg;"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"     * Returns a goodbye message before the end of program."},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"     * @return A goodbye message to the user."},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"    public String showExit() {"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"     * Returns a loading error when the file containing data cannot be loaded"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"     * from the hard disk."},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"GJ0407790"},"content":"     * @return The loading error message."},{"lineNumber":61,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"GJ0407790"},"content":"    void showLoadingError() {"},{"lineNumber":63,"author":{"gitId":"GJ0407790"},"content":"        System.out.println(\"Unable to load the file. Empty list created.\");"},{"lineNumber":64,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":66,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"GJ0407790"},"content":"     * Returns a message and the added task."},{"lineNumber":68,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"GJ0407790"},"content":"     * @param task The added task."},{"lineNumber":70,"author":{"gitId":"GJ0407790"},"content":"     * @param size Current size of the list."},{"lineNumber":71,"author":{"gitId":"GJ0407790"},"content":"     * @return A string of message and added task."},{"lineNumber":72,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"GJ0407790"},"content":"    public String showAdd(String task, int size) {"},{"lineNumber":74,"author":{"gitId":"GJ0407790"},"content":"        return \"Got it. I\u0027ve added this task:\" + System.lineSeparator()"},{"lineNumber":75,"author":{"gitId":"GJ0407790"},"content":"                + showTaskAndSize(task, size);"},{"lineNumber":76,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":78,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"GJ0407790"},"content":"     * Returns when deleting a task from the list is successful."},{"lineNumber":80,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"GJ0407790"},"content":"     * @param task The deleted task."},{"lineNumber":82,"author":{"gitId":"GJ0407790"},"content":"     * @param size Current size of the list."},{"lineNumber":83,"author":{"gitId":"GJ0407790"},"content":"     * @return A string of message and deleted task."},{"lineNumber":84,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"GJ0407790"},"content":"    public String showDelete(String task, int size) {"},{"lineNumber":86,"author":{"gitId":"GJ0407790"},"content":"        return \"Noted, I\u0027ve removed this task: \" + System.lineSeparator()"},{"lineNumber":87,"author":{"gitId":"GJ0407790"},"content":"                + showTaskAndSize(task, size);"},{"lineNumber":88,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":90,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"GJ0407790"},"content":"     * Outputs when marking a task as done is successful."},{"lineNumber":92,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"GJ0407790"},"content":"     * @param task The task that is marked as done."},{"lineNumber":94,"author":{"gitId":"GJ0407790"},"content":"     * @param size Current size of the list."},{"lineNumber":95,"author":{"gitId":"GJ0407790"},"content":"     * @return A string of message and the task marked as done."},{"lineNumber":96,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"GJ0407790"},"content":"    public String showDone(String task, int size) {"},{"lineNumber":98,"author":{"gitId":"GJ0407790"},"content":"        return \"Nice! I\u0027ve mark this task as done\" + System.lineSeparator()"},{"lineNumber":99,"author":{"gitId":"GJ0407790"},"content":"                + showTaskAndSize(task, size);"},{"lineNumber":100,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":102,"author":{"gitId":"GJ0407790"},"content":"    private String showTaskAndSize(String task, int size) {"},{"lineNumber":103,"author":{"gitId":"GJ0407790"},"content":"        return task + System.lineSeparator()"},{"lineNumber":104,"author":{"gitId":"GJ0407790"},"content":"                + String.format(\"Now you have %d tasks in the list.\", size);"},{"lineNumber":105,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":107,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":108,"author":{"gitId":"GJ0407790"},"content":"     * Lists out the current task(s) in the list. If the current list"},{"lineNumber":109,"author":{"gitId":"GJ0407790"},"content":"     * is empty, outputs \"There is currently no task in the list\"."},{"lineNumber":110,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":111,"author":{"gitId":"GJ0407790"},"content":"     * @param list The list storing the tasks."},{"lineNumber":112,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"GJ0407790"},"content":"    public String showCurrentList(List\u003cTask\u003e list) {"},{"lineNumber":114,"author":{"gitId":"GJ0407790"},"content":"        if (list.isEmpty()) {"},{"lineNumber":115,"author":{"gitId":"GJ0407790"},"content":"            return \"There is currently no task in the list.\";"},{"lineNumber":116,"author":{"gitId":"GJ0407790"},"content":"        } else {"},{"lineNumber":117,"author":{"gitId":"GJ0407790"},"content":"            return \"Here are the tasks in your list:\" + System.lineSeparator()"},{"lineNumber":118,"author":{"gitId":"GJ0407790"},"content":"                    + showListItem(list);"},{"lineNumber":119,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":122,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"GJ0407790"},"content":"     * Outputs the task(s) that matches the keyword."},{"lineNumber":124,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":125,"author":{"gitId":"GJ0407790"},"content":"     * @param list The list storing the matching tasks."},{"lineNumber":126,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"GJ0407790"},"content":"    public String showFindKeywordList(List\u003cTask\u003e list) {"},{"lineNumber":128,"author":{"gitId":"GJ0407790"},"content":"        if (list.isEmpty()) {"},{"lineNumber":129,"author":{"gitId":"GJ0407790"},"content":"            return \"There is no task containing the keyword.\";"},{"lineNumber":130,"author":{"gitId":"GJ0407790"},"content":"        } else {"},{"lineNumber":131,"author":{"gitId":"GJ0407790"},"content":"            return \"Here are the matching tasks in your list:\""},{"lineNumber":132,"author":{"gitId":"GJ0407790"},"content":"                    + System.lineSeparator() + showListItem(list);"},{"lineNumber":133,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":135,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":136,"author":{"gitId":"GJ0407790"},"content":"    private String showListItem(List\u003cTask\u003e list) {"},{"lineNumber":137,"author":{"gitId":"GJ0407790"},"content":"        String res \u003d \"\";"},{"lineNumber":138,"author":{"gitId":"GJ0407790"},"content":"        int index \u003d 1;"},{"lineNumber":139,"author":{"gitId":"GJ0407790"},"content":"        for (Task t: list) {"},{"lineNumber":140,"author":{"gitId":"GJ0407790"},"content":"            res +\u003d String.format(\"%d. %s\", index, t.toString())"},{"lineNumber":141,"author":{"gitId":"GJ0407790"},"content":"                    + System.lineSeparator();"},{"lineNumber":142,"author":{"gitId":"GJ0407790"},"content":"            index++;"},{"lineNumber":143,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":144,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":145,"author":{"gitId":"GJ0407790"},"content":"        return res;"},{"lineNumber":146,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":147}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Event;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Todo;"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"import java.time.LocalDate;"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":" * AddCommand represent a command to add a task into the list."},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"public class AddCommand extends Command {"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     * Returns an AddCommand object that will add a Task into the list."},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"     * @param command The type of the task (eg Todo, Event, Deadline)."},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"     * @param description Description of the task."},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"     * @param preposition Preposition used by the user (if applicable)."},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     * @param date Date of the task (if applicable)."},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    public AddCommand(String command, String description, String preposition, LocalDate date) {"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        super(command, description, preposition, date, false);"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     * Add the correct type of task to the list. Then, outputs a message"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"     * when the task is successfully added. Save the latest list to the"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"     * file storing the data."},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"     * @param tasks TaskList storing the current tasks."},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"     * @param ui The user interface of the program."},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"     * @param storage The storage of the program."},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If the current list cannot be saved into the file."},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"        Task t \u003d getCorrectTask();"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"        tasks.add(t);"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"        storage.save(tasks.listOutTaskInString());"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"        return ui.showAdd(t.toString(), tasks.getSize());"},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"    private Task getCorrectTask() {"},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"        switch(command) {"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"        case \"todo\":"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"            return new Todo(description);"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":"        case \"event\":"},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":"            return new Event(description, preposition, date);"},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":"        case \"deadline\":"},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"            return new Deadline(description, preposition, date);"},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"        default:"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"            return null;"},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":61}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.Ui;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":" * Command is used to represent a command from a user. All command has"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":" * a execute method to execute the user\u0027s input."},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"public abstract class Command {"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"    protected String command;"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"    protected String description;"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    protected String preposition;"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    protected LocalDate date;"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    protected boolean isExit;"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    Command(String command, String description, String preposition, LocalDate date, boolean isExit) {"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"        this.command \u003d command;"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"        this.preposition \u003d preposition;"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"        this.date \u003d date;"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"        this.isExit \u003d isExit;"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"    public boolean isExit() {"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"        return this.isExit;"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"            return true;"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"        } else if (obj instanceof Command) {"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"            Command other \u003d (Command) obj;"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"            boolean b1 \u003d checkEquality(this.command, other.command);"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"            boolean b2 \u003d checkEquality(this.description, other.description);"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"            boolean b3 \u003d checkEquality(this.preposition, other.preposition);"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"            boolean b4 \u003d checkEqualityDate(this.date, other.date);"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"            boolean b5 \u003d this.isExit \u003d\u003d other.isExit;"},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"            return b1 \u0026\u0026 b2 \u0026\u0026 b3 \u0026\u0026 b4 \u0026\u0026 b5;"},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"        } else {"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"            return false;"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"    private boolean checkEquality(String s1, String s2) {"},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"        if (s1 \u003d\u003d null) {"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"            return s2 \u003d\u003d null;"},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"        } else {"},{"lineNumber":60,"author":{"gitId":"GJ0407790"},"content":"            if (s2 \u003d\u003d null) {"},{"lineNumber":61,"author":{"gitId":"GJ0407790"},"content":"                return false;"},{"lineNumber":62,"author":{"gitId":"GJ0407790"},"content":"            } else {"},{"lineNumber":63,"author":{"gitId":"GJ0407790"},"content":"                return s1.equals(s2);"},{"lineNumber":64,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":68,"author":{"gitId":"GJ0407790"},"content":"    private boolean checkEqualityDate(LocalDate d1, LocalDate d2) {"},{"lineNumber":69,"author":{"gitId":"GJ0407790"},"content":"        if (d1 \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitId":"GJ0407790"},"content":"            return d2 \u003d\u003d null;"},{"lineNumber":71,"author":{"gitId":"GJ0407790"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"GJ0407790"},"content":"            if (d2 \u003d\u003d null) {"},{"lineNumber":73,"author":{"gitId":"GJ0407790"},"content":"                return false;"},{"lineNumber":74,"author":{"gitId":"GJ0407790"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"GJ0407790"},"content":"                String s1 \u003d d1.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":76,"author":{"gitId":"GJ0407790"},"content":"                String s2 \u003d d2.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":77,"author":{"gitId":"GJ0407790"},"content":"                return s1.equals(s2);"},{"lineNumber":78,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":81}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":" * DeleteCommand represent a command to delete a task from the list."},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     * Returns a DeleteCommand that will delete a specific task."},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     * @param index The index of the task to be deleted."},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    public DeleteCommand(String index) {"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"        super(null, index, null, null, false);"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     * Delete the task with the given index from the list. Then, outputs a message"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"     * when the task is successfully deleted. Save the latest list to the data file."},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"     * @param tasks TaskList storing the current tasks."},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"     * @param ui The user interface of the program."},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"     * @param storage The storage of the program."},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If an I/O error occurs or the index if out of bounds of the list."},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"        Task t \u003d tasks.delete(description);"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"        storage.save(tasks.listOutTaskInString());"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"        return ui.showDelete(t.toString(), tasks.getSize());"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":40}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":" * DoneCommand represent a command to mark a task as done."},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"class DoneCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"     * Returns a DoneCommand object to mark the given task as done."},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"     * @param index The index of the task to be mark as done."},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    DoneCommand(String index) {"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"        super(null, index, null, null, false);"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     * Marks the task with the index as done. Then, outputs a message when the"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     * previous action is successfully done. Save the current list to the data file."},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     * @param tasks TaskList storing the current tasks."},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"     * @param ui The user interface of the program."},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"     * @param storage The storage of the program."},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If an I/O error occurs or the index if out of bounds of the list."},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"        Task t \u003d tasks.markTaskAsDone(description);"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"        storage.save(tasks.listOutTaskInString());"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"        return ui.showDone(t.toString(), tasks.getSize());"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":39}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" * ExitCommand represent a command to exit from the program."},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"     * Returns a ExitCommand object to exit from the program."},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"    ExitCommand() {"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"        super(null, null, null, null, true);"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"     * Outputs a goodbye message."},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"     * @param tasks TaskList storing the current tasks."},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"     * @param ui The user interface of the program."},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     * @param storage The storage of the program."},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"        return ui.showExit();"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":31}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":" * FindCommand represent a command to find task(s) that matches the keyword."},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"     * Returns a FindCommand object that will find all the tasks"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"     * matching the keyword."},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"     * @param keyword The keyword to be matched."},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"        super(null, keyword, null, null, false);"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"     * Outputs all the tasks that matches the keyword to the user interface."},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     * @param tasks TaskList storing the current tasks."},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     * @param ui The user interface of the program."},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"     * @param storage The storage of the program."},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"        return ui.showFindKeywordList(tasks.findTasksWithKeyword(description));"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":34}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.Ui;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":" * ListCommand represent a command to list out all the current tasks in the list."},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"     * Returns a ListCommand to list out tasks in the list."},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    ListCommand() {"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"        super(null, null, null, null, false);"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     * Outputs the current tasks to the user interface."},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"     * @param tasks TaskList storing the current tasks."},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"     * @param ui The user interface of the program."},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"     * @param storage The storage of the program."},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        return ui.showCurrentList(tasks.getList());"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":30}},{"path":"src/main/java/duke/command/Statement.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"import java.util.Hashtable;"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":" * Statement class deals with the user\u0027s input and make sense of it."},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":" * Deals with most of the input errors. Has a table that store number of arguments needed"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":" * for each command."},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"public class Statement {"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    private final String statement;"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    private final Hashtable\u003cString, Integer\u003e argsTable;"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"     * Returns a Statement object that represent the user\u0027s input."},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     * @param statement The user\u0027s current input."},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    public Statement(String statement) {"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        this.statement \u003d statement;"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"        argsTable \u003d new Hashtable\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"list\", 0);"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"bye\", 0);"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"done\", 1);"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"todo\", 1);"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"find\", 1);"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"delete\", 1);"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"deadline\", 2);"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"        argsTable.put(\"event\", 2);"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"    //return a list of String with the first element as the command"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"    //the second element is description and third element is time (if applicable)"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"    private List\u003cString\u003e parseStatement() throws DukeException {"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"        Scanner sc \u003d new Scanner(statement);"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"        String command \u003d sc.next();"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"        List\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"        result.add(command);"},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"        if (!argsTable.containsKey(command)) {"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"            //unknown command"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"            throw new DukeException(\"Sorry, but I don\u0027t know what \" + command + \" means. :(\");"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":"        int numOfArgs \u003d argsTable.get(command);"},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"        //there are no more arguments"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"        if (numOfArgs \u003d\u003d 0) {"},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"            return result;"},{"lineNumber":60,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":62,"author":{"gitId":"GJ0407790"},"content":"        if (!sc.hasNext()) {"},{"lineNumber":63,"author":{"gitId":"GJ0407790"},"content":"            switch(command) {"},{"lineNumber":64,"author":{"gitId":"GJ0407790"},"content":"            case \"done\": case \"delete\":"},{"lineNumber":65,"author":{"gitId":"GJ0407790"},"content":"                throw new DukeException(\"OOPS! \" + command + \" requires the index of the task.\");"},{"lineNumber":66,"author":{"gitId":"GJ0407790"},"content":"            case \"todo\":"},{"lineNumber":67,"author":{"gitId":"GJ0407790"},"content":"                throw new DukeException(\"OOPS! \" + command + \" requires a description.\");"},{"lineNumber":68,"author":{"gitId":"GJ0407790"},"content":"            case \"find\":"},{"lineNumber":69,"author":{"gitId":"GJ0407790"},"content":"                throw new DukeException(\"Please provide a keyword.\");"},{"lineNumber":70,"author":{"gitId":"GJ0407790"},"content":"            default:"},{"lineNumber":71,"author":{"gitId":"GJ0407790"},"content":"                throw new DukeException(\"OOPS! \" + command + \" requires a description and a time.\");"},{"lineNumber":72,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":75,"author":{"gitId":"GJ0407790"},"content":"        String rest \u003d sc.nextLine();"},{"lineNumber":76,"author":{"gitId":"GJ0407790"},"content":"        String[] args \u003d rest.split(\"[/]\");"},{"lineNumber":77,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":78,"author":{"gitId":"GJ0407790"},"content":"        //missing arguments"},{"lineNumber":79,"author":{"gitId":"GJ0407790"},"content":"        if (args.length !\u003d numOfArgs) {"},{"lineNumber":80,"author":{"gitId":"GJ0407790"},"content":"            throw new DukeException(\"OOPS! \" + command + \" requires a description and a time\");"},{"lineNumber":81,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":83,"author":{"gitId":"GJ0407790"},"content":"        for (int i \u003d 0; i \u003c numOfArgs; i++) {"},{"lineNumber":84,"author":{"gitId":"GJ0407790"},"content":"            result.add(args[i]);"},{"lineNumber":85,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":87,"author":{"gitId":"GJ0407790"},"content":"        return result;"},{"lineNumber":88,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":90,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"GJ0407790"},"content":"     * Returns a Command object after making sense of the user\u0027s input."},{"lineNumber":92,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"GJ0407790"},"content":"     * @return A Command object representing a command from the user."},{"lineNumber":94,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If the format of date provided for event/deadline"},{"lineNumber":95,"author":{"gitId":"GJ0407790"},"content":"     * is incorrect or there is no \u0027/\u0027 to separate description and date of an"},{"lineNumber":96,"author":{"gitId":"GJ0407790"},"content":"     * event/deadline."},{"lineNumber":97,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"GJ0407790"},"content":"    public Command parse() throws DukeException {"},{"lineNumber":99,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":100,"author":{"gitId":"GJ0407790"},"content":"            List\u003cString\u003e parsedArgs \u003d parseStatement();"},{"lineNumber":101,"author":{"gitId":"GJ0407790"},"content":"            String command \u003d parsedArgs.get(0);"},{"lineNumber":102,"author":{"gitId":"GJ0407790"},"content":"            String first \u003d null;"},{"lineNumber":103,"author":{"gitId":"GJ0407790"},"content":"            String second \u003d null;"},{"lineNumber":104,"author":{"gitId":"GJ0407790"},"content":"            String preposition \u003d null;"},{"lineNumber":105,"author":{"gitId":"GJ0407790"},"content":"            LocalDate date \u003d null;"},{"lineNumber":106,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":107,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":108,"author":{"gitId":"GJ0407790"},"content":"            if (parsedArgs.size() \u003e\u003d 2) {"},{"lineNumber":109,"author":{"gitId":"GJ0407790"},"content":"                first \u003d parsedArgs.get(1).trim();"},{"lineNumber":110,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":112,"author":{"gitId":"GJ0407790"},"content":"            if (parsedArgs.size() \u003d\u003d 3) {"},{"lineNumber":113,"author":{"gitId":"GJ0407790"},"content":"                second \u003d parsedArgs.get(2).trim();"},{"lineNumber":114,"author":{"gitId":"GJ0407790"},"content":"                String[] prepositionAndDate \u003d second.split(\"[\\\\s]\");"},{"lineNumber":115,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":116,"author":{"gitId":"GJ0407790"},"content":"                if (prepositionAndDate.length !\u003d 2) {"},{"lineNumber":117,"author":{"gitId":"GJ0407790"},"content":"                    throw new DukeException(\"Please provide a preposition and a date after \u0027/\u0027.\");"},{"lineNumber":118,"author":{"gitId":"GJ0407790"},"content":"                }"},{"lineNumber":119,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":120,"author":{"gitId":"GJ0407790"},"content":"                preposition \u003d prepositionAndDate[0];"},{"lineNumber":121,"author":{"gitId":"GJ0407790"},"content":"                date \u003d LocalDate.parse(prepositionAndDate[1]);"},{"lineNumber":122,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":123,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":124,"author":{"gitId":"GJ0407790"},"content":"            switch (command) {"},{"lineNumber":125,"author":{"gitId":"GJ0407790"},"content":"            case \"list\":"},{"lineNumber":126,"author":{"gitId":"GJ0407790"},"content":"                return new ListCommand();"},{"lineNumber":127,"author":{"gitId":"GJ0407790"},"content":"            case \"bye\":"},{"lineNumber":128,"author":{"gitId":"GJ0407790"},"content":"                return new ExitCommand();"},{"lineNumber":129,"author":{"gitId":"GJ0407790"},"content":"            case \"done\":"},{"lineNumber":130,"author":{"gitId":"GJ0407790"},"content":"                return new DoneCommand(first);"},{"lineNumber":131,"author":{"gitId":"GJ0407790"},"content":"            case \"delete\":"},{"lineNumber":132,"author":{"gitId":"GJ0407790"},"content":"                return new DeleteCommand(first);"},{"lineNumber":133,"author":{"gitId":"GJ0407790"},"content":"            case \"find\":"},{"lineNumber":134,"author":{"gitId":"GJ0407790"},"content":"                return new FindCommand(first);"},{"lineNumber":135,"author":{"gitId":"GJ0407790"},"content":"            case \"todo\": case \"deadline\": case \"event\":"},{"lineNumber":136,"author":{"gitId":"GJ0407790"},"content":"                return new AddCommand(command, first, preposition, date);"},{"lineNumber":137,"author":{"gitId":"GJ0407790"},"content":"            default:"},{"lineNumber":138,"author":{"gitId":"GJ0407790"},"content":"                return null;"},{"lineNumber":139,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":140,"author":{"gitId":"GJ0407790"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":141,"author":{"gitId":"GJ0407790"},"content":"            throw new DukeException(\"Date must be in the format yyyy-mm-dd.\");"},{"lineNumber":142,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":144,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":145}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":" * DukeException extends from Exception class and handles all exception"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":" * that occurs in this program."},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"     * Returns a DukeException by passing in the cause of the exception."},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"     * @param message A message describing the cause of this exception."},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"    public DukeException(String message) {"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":17}},{"path":"src/main/java/duke/storage/DukeFileWriter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" * DukeFileWriter deals with writing into the a file."},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"class DukeFileWriter {"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"     * Writes input to the file that is located by the filepath."},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"     * @param filePath The relative address of the file."},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     * @param input Text to be written into the file."},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If an I/O error occurs."},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    void writeFile(String filePath, String input) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"            fw.write(input);"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"            fw.close();"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":32}},{"path":"src/main/java/duke/storage/FileReader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Todo;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"import java.util.Scanner;"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"import java.util.List;"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"import java.util.ArrayList;"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":" * FileReader deals with reading data from the file."},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"class FileReader {"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     * Returns a list of tasks after reading the data inside the file."},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     * If the file is not created yet, will create a new file and write"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"     * as if the list is empty."},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"     * @param path The relative address of the data file."},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"     * @return A list of tasks."},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If an I/O error occurs."},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"    List\u003cTask\u003e readFile(String path) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"            File f \u003d new File(path);"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"            if (!f.exists()) {"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"                //create a new file and write as if the list is empty"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"                f.createNewFile();"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"                FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"                fw.write(\"Done tasks: \" + System.lineSeparator() + \"Pending tasks: \""},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"                        + System.lineSeparator());"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"                fw.close();"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"                f \u003d new File(path);"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"            List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"            boolean isDone \u003d true;"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"            while (sc.hasNext()) {"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":"                String currStr \u003d sc.nextLine();"},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":"                if (currStr.equals(\"Done tasks: \") || currStr.equals(\"Pending tasks: \")) {"},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"                    if (currStr.equals(\"Pending tasks: \")) {"},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"                        isDone \u003d false;"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"                    }"},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":60,"author":{"gitId":"GJ0407790"},"content":"                    continue;"},{"lineNumber":61,"author":{"gitId":"GJ0407790"},"content":"                }"},{"lineNumber":62,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":63,"author":{"gitId":"GJ0407790"},"content":"                Task t \u003d toTask(currStr);"},{"lineNumber":64,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":65,"author":{"gitId":"GJ0407790"},"content":"                if (isDone) {"},{"lineNumber":66,"author":{"gitId":"GJ0407790"},"content":"                    t.markAsDone();"},{"lineNumber":67,"author":{"gitId":"GJ0407790"},"content":"                }"},{"lineNumber":68,"author":{"gitId":"GJ0407790"},"content":"                tasks.add(t);"},{"lineNumber":69,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":71,"author":{"gitId":"GJ0407790"},"content":"            return tasks;"},{"lineNumber":72,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":73,"author":{"gitId":"GJ0407790"},"content":"        } catch (IOException e) {"},{"lineNumber":74,"author":{"gitId":"GJ0407790"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":75,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":78,"author":{"gitId":"GJ0407790"},"content":"    private Task toTask(String input) {"},{"lineNumber":79,"author":{"gitId":"GJ0407790"},"content":"            Scanner sc \u003d new Scanner(input);"},{"lineNumber":80,"author":{"gitId":"GJ0407790"},"content":"            String command \u003d sc.next();"},{"lineNumber":81,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":82,"author":{"gitId":"GJ0407790"},"content":"            String[] args \u003d sc.nextLine().split(\"[|]\");"},{"lineNumber":83,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":84,"author":{"gitId":"GJ0407790"},"content":"            String first \u003d args[0].trim();"},{"lineNumber":85,"author":{"gitId":"GJ0407790"},"content":"            String second \u003d null;"},{"lineNumber":86,"author":{"gitId":"GJ0407790"},"content":"            String preposition \u003d null;"},{"lineNumber":87,"author":{"gitId":"GJ0407790"},"content":"            LocalDate date \u003d null;"},{"lineNumber":88,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":89,"author":{"gitId":"GJ0407790"},"content":"            if (args.length \u003d\u003d 2) {"},{"lineNumber":90,"author":{"gitId":"GJ0407790"},"content":"                second \u003d args[1].trim();"},{"lineNumber":91,"author":{"gitId":"GJ0407790"},"content":"                String[] prepositionAndDate \u003d second.split(\"[\\\\s]\");"},{"lineNumber":92,"author":{"gitId":"GJ0407790"},"content":"                preposition \u003d prepositionAndDate[0];"},{"lineNumber":93,"author":{"gitId":"GJ0407790"},"content":"                date \u003d LocalDate.parse(prepositionAndDate[1]);"},{"lineNumber":94,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":96,"author":{"gitId":"GJ0407790"},"content":"            switch (command) {"},{"lineNumber":97,"author":{"gitId":"GJ0407790"},"content":"            case \"todo\":"},{"lineNumber":98,"author":{"gitId":"GJ0407790"},"content":"                return new Todo(first);"},{"lineNumber":99,"author":{"gitId":"GJ0407790"},"content":"            case \"event\":"},{"lineNumber":100,"author":{"gitId":"GJ0407790"},"content":"                return new Event(first, preposition, date);"},{"lineNumber":101,"author":{"gitId":"GJ0407790"},"content":"            case \"deadline\":"},{"lineNumber":102,"author":{"gitId":"GJ0407790"},"content":"                return new Deadline(first, preposition, date);"},{"lineNumber":103,"author":{"gitId":"GJ0407790"},"content":"            default:"},{"lineNumber":104,"author":{"gitId":"GJ0407790"},"content":"                return null;"},{"lineNumber":105,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":108,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":108}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":" * Storage keep tracks of the file that is storing the data."},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":" * The function of storage is to load data from hard disk and"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":" * save data to hard disk."},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    private String filePath;"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"     * Returns a Storage object that knows where the data file is located."},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     * @param filePath The relative path of data file."},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    public Storage(String filePath) {"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"     * Returns a list of task after reading data in the filepath."},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     * Normally, this wil be called at the very start of the program."},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"     * @return A list of current task in the data file."},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If an I/O error occurs."},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"    public List\u003cTask\u003e load() throws DukeException {"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"        FileReader fr \u003d new FileReader();"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"        return fr.readFile(filePath);"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"     * Writes the given string to the data file. Overwrites everything currently"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"     * inside the file."},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"     * @param modifiedResult String to be write into the data file."},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If an I/O error occurs."},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"    public void save(String modifiedResult) throws DukeException {"},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"        DukeFileWriter fw \u003d new DukeFileWriter();"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"        fw.writeFile(filePath, modifiedResult);"},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":51}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":" * Deadline extends from class Task and representing a task"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":" * that must be completed before a particular time/date."},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"    private final String preposition;"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"    private final LocalDate date;"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"     * Returns a Deadline object representing the task."},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     * @param description Description of the deadline."},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"     * @param preposition Preposition used by the user (eg at, by)."},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     * @param date Latest date to finish the task."},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    public Deadline(String description, String preposition, LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"        this.preposition \u003d preposition;"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     * Returns a string representation of the deadline to be stored in the"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"     * hard disk."},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"     * @return A String representing the task (in the form of \"deadline + description + |"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     * + preposition + date\"."},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"    String toFileString() {"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"        return String.format(\"deadline %s | %s %s\", description,"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"                preposition, date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"        String dateStr \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"        return String.format(\"[D][%s] %s (%s %s)\", getStatusIcon(), description, preposition, dateStr);"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":46}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":" * Event extends from class Task and represent a task"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":" * that is happening in a particular time/date."},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"    private final String preposition;"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"    private final LocalDate date;"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"     * Returns an Event object that represent the task."},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     * @param description Description of the event."},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"     * @param preposition Preposition used by the user (eg at, by)."},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     * @param date Date of the event happening."},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    public Event(String description, String preposition, LocalDate date) {"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"        this.preposition \u003d preposition;"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"        this.date \u003d date;"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"     * Returns a string representation of the event to be stored in the"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"     * hard disk."},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"     * @return A String representing the task (in the form of \"event + description + |"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"     * + preposition + date\"."},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"    String toFileString() {"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"        return String.format(\"event %s | %s %s\", description,"},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"                preposition, date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"        String dateStr \u003d date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"        return String.format(\"[E][%s] %s (%s %s)\", getStatusIcon(), description, preposition, dateStr);"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":46}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":" * Task is a parent class of three subclasses: Todo, Event and Deadline."},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":" * Task has a description of the task and a boolean"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":" * isDone representing whether the task is done or not."},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"public class Task {"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"    Task(String description) {"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"    public boolean getIsDone() {"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"        return isDone;"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    String getStatusIcon() {"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     * Changes the field isDone to true."},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"    public void markAsDone() {"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"        isDone \u003d true;"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"     * Returns a string representation of the task to be stored in the"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":"     * hard disk."},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"     * @return A String representing the task."},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"    String toFileString() {"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"        return \"\";"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"     * Returns a boolean indicating whether the keyword is inside the"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"     * description or not."},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"     * @param keyword The keyword to check whether it is inside the description."},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"     * @return A boolean value indicating whether description contains the keyword"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"     * or not."},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"    boolean isKeywordInside(String keyword) {"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"        return description.contains(keyword);"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":59}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":" * TaskList contains the list that is storing the current tasks."},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":" * Mainly deal with the addition, deletion and manipulation of tasks in the list."},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"    private final List\u003cTask\u003e list;"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"     * Returns a TaskList object with an empty list if no parameter was passed in."},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    public TaskList() {"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"     * Returns a TaskList object with a list that is being passed as the parameter."},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"     * @param list List storing the tasks."},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    public TaskList(List\u003cTask\u003e list) {"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        this.list \u003d list;"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"        return list;"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":"     * Returns the number of tasks in the list, basically the size of the list."},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"     * @return The number of tasks in the list."},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"    public int getSize() {"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"        return list.size();"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"     * Add the given task into the list."},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"     * @param task The task to be added."},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"    public void add(Task task) {"},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":"        list.add(task);"},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":53,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"GJ0407790"},"content":"     * Delete the given task from the list."},{"lineNumber":55,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"GJ0407790"},"content":"     * @param num The index of the task."},{"lineNumber":57,"author":{"gitId":"GJ0407790"},"content":"     * @return The deleted task."},{"lineNumber":58,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If num is smaller or equal 0 or num is bigger than the"},{"lineNumber":59,"author":{"gitId":"GJ0407790"},"content":"     * size of the list."},{"lineNumber":60,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"GJ0407790"},"content":"    public Task delete(String num) throws DukeException {"},{"lineNumber":62,"author":{"gitId":"GJ0407790"},"content":"        int index \u003d Integer.valueOf(num) - 1;"},{"lineNumber":63,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":64,"author":{"gitId":"GJ0407790"},"content":"        if (index \u003c 0 || index \u003e\u003d list.size()) {"},{"lineNumber":65,"author":{"gitId":"GJ0407790"},"content":"            throw new DukeException(\"Please enter an appropriate index.\");"},{"lineNumber":66,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":68,"author":{"gitId":"GJ0407790"},"content":"        return list.remove(index);"},{"lineNumber":69,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":71,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"GJ0407790"},"content":"     * Marks the given task as done inside the list."},{"lineNumber":73,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"GJ0407790"},"content":"     * @param num The index of the task."},{"lineNumber":75,"author":{"gitId":"GJ0407790"},"content":"     * @return The task that is mark as done."},{"lineNumber":76,"author":{"gitId":"GJ0407790"},"content":"     * @throws DukeException If num is smaller or equal 0 or num is bigger than the"},{"lineNumber":77,"author":{"gitId":"GJ0407790"},"content":"     * size of the list."},{"lineNumber":78,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"GJ0407790"},"content":"    public Task markTaskAsDone(String num) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"GJ0407790"},"content":"        int index \u003d Integer.valueOf(num) - 1;"},{"lineNumber":81,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":82,"author":{"gitId":"GJ0407790"},"content":"        if (index \u003c 0 || index \u003e\u003d list.size()) {"},{"lineNumber":83,"author":{"gitId":"GJ0407790"},"content":"            throw new DukeException(\"Please enter an appropriate index.\");"},{"lineNumber":84,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":86,"author":{"gitId":"GJ0407790"},"content":"        Task t \u003d list.get(index);"},{"lineNumber":87,"author":{"gitId":"GJ0407790"},"content":"        t.markAsDone();"},{"lineNumber":88,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":89,"author":{"gitId":"GJ0407790"},"content":"        return t;"},{"lineNumber":90,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":92,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"GJ0407790"},"content":"     * Returns a string representing of all the tasks inside the list. The string"},{"lineNumber":94,"author":{"gitId":"GJ0407790"},"content":"     * is then written to the hard disk. String representation of all done tasks"},{"lineNumber":95,"author":{"gitId":"GJ0407790"},"content":"     * are followed by string representation of all pending tasks."},{"lineNumber":96,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"GJ0407790"},"content":"     * @return A string representation of all tasks inside the list."},{"lineNumber":98,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"GJ0407790"},"content":"    public String listOutTaskInString() {"},{"lineNumber":100,"author":{"gitId":"GJ0407790"},"content":"        String res \u003d \"\";"},{"lineNumber":101,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":102,"author":{"gitId":"GJ0407790"},"content":"        res +\u003d \"Done tasks: \" + System.lineSeparator();"},{"lineNumber":103,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":104,"author":{"gitId":"GJ0407790"},"content":"        for (Task t: list) {"},{"lineNumber":105,"author":{"gitId":"GJ0407790"},"content":"            if (t.getIsDone()) {"},{"lineNumber":106,"author":{"gitId":"GJ0407790"},"content":"                res +\u003d t.toFileString() + System.lineSeparator();"},{"lineNumber":107,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":110,"author":{"gitId":"GJ0407790"},"content":"        res +\u003d \"Pending tasks: \" + System.lineSeparator();"},{"lineNumber":111,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":112,"author":{"gitId":"GJ0407790"},"content":"        for (Task t: list) {"},{"lineNumber":113,"author":{"gitId":"GJ0407790"},"content":"            if (!t.getIsDone()) {"},{"lineNumber":114,"author":{"gitId":"GJ0407790"},"content":"                res +\u003d t.toFileString() + System.lineSeparator();"},{"lineNumber":115,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":118,"author":{"gitId":"GJ0407790"},"content":"        return res;"},{"lineNumber":119,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":121,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":122,"author":{"gitId":"GJ0407790"},"content":"     * Returns a list of tasks that contains the keyword."},{"lineNumber":123,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"GJ0407790"},"content":"     * @param keyword The keyword to filter out the irrelevant tasks."},{"lineNumber":125,"author":{"gitId":"GJ0407790"},"content":"     * @return A list of tasks containing the keyword."},{"lineNumber":126,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"GJ0407790"},"content":"    public List\u003cTask\u003e findTasksWithKeyword(String keyword) {"},{"lineNumber":128,"author":{"gitId":"GJ0407790"},"content":"        List\u003cTask\u003e resTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":129,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":130,"author":{"gitId":"GJ0407790"},"content":"        for (Task t: list) {"},{"lineNumber":131,"author":{"gitId":"GJ0407790"},"content":"            if (t.isKeywordInside(keyword)) {"},{"lineNumber":132,"author":{"gitId":"GJ0407790"},"content":"                resTasks.add(t);"},{"lineNumber":133,"author":{"gitId":"GJ0407790"},"content":"            }"},{"lineNumber":134,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":136,"author":{"gitId":"GJ0407790"},"content":"        return resTasks;"},{"lineNumber":137,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":138}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":" * Todo extends from class Task and represent task that"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":" * the user is planning to do without a certain deadline."},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":" */"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"     * Returns a Todo object that represent the task."},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"     * @param description Description of the task."},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"    public Todo(String description) {"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"     * Returns a string representation of the todo to be stored in the"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"     * hard disk."},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"     * @return A String representing the task (in the form of \"todo + description\")."},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"    String toFileString() {"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"        return String.format(\"todo %s\", description);"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":33}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"GJ0407790":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"GJ0407790":19}},{"path":"src/test/java/duke/command/StatementTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":"public class StatementTest {"},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"    public void parse_correctCommand_success() throws Exception{"},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"        assertEquals(new ListCommand(), new Statement(\"list\").parse());"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"        assertEquals(new ExitCommand(), new Statement(\"bye\").parse());"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"        assertEquals(new DoneCommand(\"1\"), new Statement(\"done 1\").parse());"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":"        assertEquals(new DeleteCommand(\"1\"), new Statement(\"delete 1\").parse());"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"        assertEquals(new AddCommand(\"todo\", \"buy books\", null, null ),"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":"                new Statement(\"todo buy books\").parse());"},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"    public void parse_unrecognisedCommand_throwException() {"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"            assertEquals(\"\", new Statement(\"blah\").parse());"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"            fail();"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":"        } catch (Exception e) {"},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"            assertEquals(\"Sorry, but I don\u0027t know what blah means. :(\", e.getMessage());"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":32}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":6,"author":{"gitId":"GJ0407790"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"GJ0407790"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":8,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":9,"author":{"gitId":"GJ0407790"},"content":"public class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":11,"author":{"gitId":"GJ0407790"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"GJ0407790"},"content":"    public void markTaskAsDone_correctIndex_success() throws Exception {"},{"lineNumber":13,"author":{"gitId":"GJ0407790"},"content":"        Task testTask \u003d new Task(\"testing\");"},{"lineNumber":14,"author":{"gitId":"GJ0407790"},"content":"        TaskList testTaskList \u003d new TaskList();"},{"lineNumber":15,"author":{"gitId":"GJ0407790"},"content":"        testTaskList.add(testTask);"},{"lineNumber":16,"author":{"gitId":"GJ0407790"},"content":"        testTaskList.markTaskAsDone(\"1\");"},{"lineNumber":17,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"        assertEquals(testTask.getIsDone(), true);"},{"lineNumber":19,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":21,"author":{"gitId":"GJ0407790"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"GJ0407790"},"content":"    public void markTaskAsDone_negativeIndex_throwException() throws Exception {"},{"lineNumber":23,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"GJ0407790"},"content":"            Task testTask \u003d new Task(\"testing\");"},{"lineNumber":25,"author":{"gitId":"GJ0407790"},"content":"            TaskList testTaskList \u003d new TaskList();"},{"lineNumber":26,"author":{"gitId":"GJ0407790"},"content":"            testTaskList.add(testTask);"},{"lineNumber":27,"author":{"gitId":"GJ0407790"},"content":"            testTaskList.markTaskAsDone(\"-1\");"},{"lineNumber":28,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":29,"author":{"gitId":"GJ0407790"},"content":"            assertEquals(testTask.getIsDone(), true);"},{"lineNumber":30,"author":{"gitId":"GJ0407790"},"content":"            fail();"},{"lineNumber":31,"author":{"gitId":"GJ0407790"},"content":"        } catch (Exception e) {"},{"lineNumber":32,"author":{"gitId":"GJ0407790"},"content":"            assertEquals(\"Please enter an appropriate index.\", e.getMessage());"},{"lineNumber":33,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":35,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":37,"author":{"gitId":"GJ0407790"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"GJ0407790"},"content":"    public void markTaskAsDone_outOfBoundsIndex_throwException() throws Exception {"},{"lineNumber":39,"author":{"gitId":"GJ0407790"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"GJ0407790"},"content":"            Task testTask \u003d new Task(\"testing\");"},{"lineNumber":41,"author":{"gitId":"GJ0407790"},"content":"            TaskList testTaskList \u003d new TaskList();"},{"lineNumber":42,"author":{"gitId":"GJ0407790"},"content":"            testTaskList.add(testTask);"},{"lineNumber":43,"author":{"gitId":"GJ0407790"},"content":"            testTaskList.markTaskAsDone(\"3\");"},{"lineNumber":44,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":45,"author":{"gitId":"GJ0407790"},"content":"            assertEquals(testTask.getIsDone(), true);"},{"lineNumber":46,"author":{"gitId":"GJ0407790"},"content":"            fail();"},{"lineNumber":47,"author":{"gitId":"GJ0407790"},"content":"        } catch (Exception e) {"},{"lineNumber":48,"author":{"gitId":"GJ0407790"},"content":"            assertEquals(\"Please enter an appropriate index.\", e.getMessage());"},{"lineNumber":49,"author":{"gitId":"GJ0407790"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"GJ0407790"},"content":""},{"lineNumber":51,"author":{"gitId":"GJ0407790"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"GJ0407790"},"content":"}"}],"authorContributionMap":{"GJ0407790":52}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"GJ0407790"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"GJ0407790"},"content":"list"},{"lineNumber":3,"author":{"gitId":"GJ0407790"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"GJ0407790"},"content":"list"}],"authorContributionMap":{"GJ0407790":5}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"GJ0407790"},"content":"if not exist C:\\Users\\admin\\OneDrive\\Desktop\\CS2103T\\IndividualProject\\bin mkdir C:\\Users\\admin\\OneDrive\\Desktop\\CS2103T\\IndividualProject\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"GJ0407790"},"content":"javac  -cp C:\\Users\\admin\\OneDrive\\Desktop\\CS2103T\\IndividualProject\\src\\main\\java -Xlint:none -d C:\\Users\\admin\\OneDrive\\Desktop\\CS2103T\\IndividualProject\\bin C:\\Users\\admin\\OneDrive\\Desktop\\CS2103T\\IndividualProject\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"GJ0407790"},"content":"java -classpath C:\\Users\\admin\\OneDrive\\Desktop\\CS2103T\\IndividualProject\\bin Main \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"GJ0407790":3,"-":18}}]
