[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zhengruoxin":16,"-":45}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Main;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class Launcher {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":11}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"/** Reads in user inputs and perform actions accordingly. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"public class Duke {"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    /** Template for replying user. */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    /** Storage to store and update tasks entered in hard drive. */"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /** Helper to make sense of user inputs. */"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    private Parser parser;"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises Duke with ui, storage and parser. */"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    public Duke() {"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        this.parser \u003d new Parser(this.storage);"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    public Ui getUi() {"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"        return this.ui;"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"     * Replace this stub with your completed method."},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"    public String getResponse(String input) {"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"            String reply;"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"            reply \u003d this.parser.process(input);"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"            assert reply.length() !\u003d 0 : \"Bot should always reply to every user input\";"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"            return reply;"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        } catch (DukeException err) {"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            return err.getMessage();"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zhengruoxin":41,"-":1}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Stores information of a task that is to be added. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public abstract class AddCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    /** Asserts that all commands for adding tasks must contain description. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    public AddCommand(String description) {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"        super(\"Got it. I\u0027ve added this task:\\n\");"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"        this.description \u003d description;"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":12}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"/** Encapsulates information of a possible command from user. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    protected String message;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises each command with a standard message. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    public Command(String msg) {"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"        this.message \u003d msg;"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     * Execute each command to achieve respective effect."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    public abstract String execute(TaskManager manager, Ui ui, Storage storage);"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":23}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":" * Deadline command is used for user to add a deadline task."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"public class DeadlineCommand extends AddCommand {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a new deadline command with the task information. */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public DeadlineCommand(String description) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        super(description.replaceAll(\"deadline \", \"\")); // remove keyword used for identifying task type"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"     * Executes deadline command to add deadline task and respond to user."},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            Task t \u003d new Deadline(this.description.split(\" by \")[0],"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"                    this.description.split(\" by \")[1]); // split remaining line into description and datetime"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"            manager.addTask(t);"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"            this.message +\u003d t.toString() + \"\\n\" + String.format(\"Now you have %s tasks in the list.\","},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"                    manager.taskVolume()); // concatenate reply string"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"            storage.writeToDisk(manager.getStore()); // store task to harddrive"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"            return this.message;"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"        } catch (DateTimeParseException err) {"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"            return \"datetime should be in yyyy-mm-dd format\";"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        } catch (Exception err) {"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            return \":( sorry i don\u0027t recognise this format. type help for more info!\";"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":42}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":" * Delete command is used when user wants to remove a specific task."},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    protected int index;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a new delete command with target task number. */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    public DeleteCommand(String description) {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"        super(\"\");"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"        this.index \u003d Integer.valueOf(description.split(\" \")[1]);"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * Executes delete command to remove corresponding task from list."},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"            manager.deleteTask(this.index);"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"            storage.writeToDisk(manager.getStore());"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            return \"Task deleted\";"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"        } catch (Exception err) {"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"            return \":( sorry i don\u0027t recognise this format. type help for more info!\";"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":35}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"/** Done command is used when user wants to mark a task as done. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"public class DoneCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    protected int index;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new done command with index of target task."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    public DoneCommand(String description) {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"        super(\"Wahoo you completed one task!\");"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"        this.index \u003d Integer.valueOf(description.split(\" \")[1]);"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * Executes done command to mark target task as done."},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"            manager.markTaskDone(this.index);"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"            storage.writeToDisk(manager.getStore());"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            return this.message;"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"        } catch (Exception err) {"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"            return \":( sorry i don\u0027t recognise this format. type help for more info!\";"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":35}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Event;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Task;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":" * Event command is used when user wants to add an event task."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"public class EventCommand extends AddCommand {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises event command with its description. */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public EventCommand(String description) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        super(description.replaceAll(\"event \", \"\")); // remove keyword used for identifying task type"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"     * Executes event command to add event to tasklist."},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            Task t \u003d new Event(this.description.split(\" at \")[0],"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"                    this.description.split(\" at \")[1]); // split remaining line into description and datetime"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"            manager.addTask(t);"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"            this.message +\u003d t.toString() + \"\\n\" + String.format(\"Now you have %s tasks in the list.\","},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"                    manager.taskVolume()); // concatenate reply string"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"            storage.writeToDisk(manager.getStore()); // store task to harddrive"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"            return this.message;"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"        } catch (DateTimeParseException err) {"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"            return \"datetime should be in yyyy-mm-dd format\";"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        } catch (Exception err) {"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            return \":( sorry i don\u0027t recognise this format. type help for more info!\";"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":42}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"/** Exit command is used when user bids chatbot goodbye. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"public class ExitCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises exit command. */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    public ExitCommand() {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        super(\"\");"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * Executes exit command to bid user goodbye and exit chat."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        return ui.sayBye();"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":24}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"/** Find command is used when user wants to find all tasks that contain a certain keyword. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"public class FindCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    private String keyword;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises find command with keyword. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    public FindCommand(String description) {"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"        super(\"These seem to match what you\u0027re looking for: \");"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"        this.keyword \u003d description.replaceAll(\"find \", \"\");"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    /** Executes find command to present all tasks containing keyword."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        String found \u003d manager.find(this.keyword);"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        if (found.equals(\"\")) {"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"            return String.format(\"You have no tasks that matches \\\"%s\\\"\", this.keyword);"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"        return this.message + \"\\n\" + manager.find(this.keyword);"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":29}},{"path":"src/main/java/duke/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"/** Help command is used when user wants to find all tasks that contain a certain keyword. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"public class HelpCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises find command with keyword. */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    public HelpCommand() {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        super(\"here are some commands you can try!\\n\""},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"                + \"todo DESCRIPTION / deadline DESCRIPTION by DUEDATE / event DESCRIPTION at DATETIME\""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"                + \"/ delete INDEX / done INDEX / list / find KEYWORD / bye \" + \"(datetime format: yyyy-mm-dd)\");"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    /** Executes find command to present all tasks containing keyword."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        return this.message;"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":25}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"/** List command is used when user wants to view all tasks he/she has. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"public class ListCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises list command. */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    public ListCommand() {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        super(\"Here are all your tasks: \");"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    /** Executes list command to display all user\u0027s tasks."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        return this.message + \"\\n\" + manager.displayTasks();"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":24}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Todo;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"/** Todo command is used when user wants to add a new task without date information. */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"public class TodoCommand extends AddCommand {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a todo command with its description. */"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    public TodoCommand(String description) {"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    /** Executes todo command to add task to list."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    public String execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        Task t \u003d new Todo(this.description.split(\"todo \")[1]);"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        manager.addTask(t);"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"        this.message +\u003d t.toString() + \"\\n\""},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"            + String.format(\"Now you have %s tasks in the list.\", manager.taskVolume());"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"        storage.writeToDisk(manager.getStore());"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        return this.message;"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":30}},{"path":"src/main/java/duke/exception/CommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of an EmptyException."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * Arises when user enters words that do not correspond to any command."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class CommandException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Fixed message to remind user to include keyword. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    static final String MESSAGE \u003d \":( oops sorry I don\u0027t know what that means. type help for tips!\";"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises new missing keyword exception."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    public CommandException() {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"        super(MESSAGE);"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":17}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information of potential exceptions in Duke."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new exception specific to Duke chatbot."},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":14}},{"path":"src/main/java/duke/exception/EmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of an EmptyException."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * Arises when user enters task type without description."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class EmptyException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Fixed message to remind user to include task description. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    static final String MESSAGE \u003d \":( hmm I\u0027m not sure what you want to do. type help for tips!\";"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises new empty description exception."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    public EmptyException() {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"        super(MESSAGE);"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":17}},{"path":"src/main/java/duke/exception/KeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of an EmptyException."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * Arises when user enters words that do not correspond to any command."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class KeywordException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Fixed message to remind user to include keyword. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    static final String MESSAGE \u003d \"type \\\"by\\\" (for deadline) or \\\"at\\\" (for event) before datetime\";"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises new missing keyword exception."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    public KeywordException() {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"        super(MESSAGE);"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":17}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.DoneCommand;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.EventCommand;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.ExitCommand;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.HelpCommand;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.ListCommand;"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import duke.command.TodoCommand;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"import duke.exception.CommandException;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"import duke.exception.DukeException;"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"import duke.exception.EmptyException;"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"import duke.exception.KeywordException;"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.TaskManager;"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"import duke.ui.Ui;"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"/** The Parser makes sense of user inputs and executes follow up actions accordingly. */"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"public class Parser {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    /** Storage to store and update tasks entered in hard drive. */"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    private Storage storage;"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    /** Template for replying user. */"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    private Ui ui;"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    /** Manager to organise and retrieve tasks from list. */"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    private TaskManager manager;"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a parser in chatbot to make sense of user inputs. */"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    public Parser(Storage storage) {"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"        this.storage \u003d storage;"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"        this.manager \u003d new TaskManager(this.storage.loadContent());"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"     * Process the user input and execute the appropriate commands."},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"     * @param input Text representation of task type and task info."},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"     * @throws DukeException if input has no keyword or if task has no description."},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    public String process(String input) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"        if (input.contains(\"todo\") || input.contains(\"deadline\")"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"                || input.contains(\"event\") || input.contains(\"find\")) {"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"            if (input.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"                throw new EmptyException();"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"        if (input.equals(\"list\")) {"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"            ListCommand listcommand \u003d new ListCommand();"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"            return listcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.equals(\"help\")) {"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"            HelpCommand helpcommand \u003d new HelpCommand();"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"            return helpcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"todo\")) {"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"            TodoCommand todocommand \u003d new TodoCommand(input);"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"            return todocommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"deadline\")) {"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"            if (!input.contains(\"by\")) {"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"                throw new KeywordException();"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"            DeadlineCommand deadlinecommand \u003d new DeadlineCommand(input);"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"            return deadlinecommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"event\")) {"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"            if (!input.contains(\"at\")) {"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"                throw new KeywordException();"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"            EventCommand eventcommand \u003d new EventCommand(input);"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"            return eventcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"find\")) {"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"            FindCommand findcommand \u003d new FindCommand(input);"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"            return findcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"done\")) {"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"            DoneCommand donecommand \u003d new DoneCommand(input);"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"            return donecommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"delete\")) {"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"            DeleteCommand deletecommand \u003d new DeleteCommand(input);"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"            return deletecommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.equals(\"bye\")) {"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"            ExitCommand exitcommand \u003d new ExitCommand();"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"            return exitcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"        } else {"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"            throw new CommandException();"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":85}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Deadline;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Event;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Task;"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Todo;"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":" * The Storage is used to interact with content stored on hard drive."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    private Path filepath;"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a storage and creates an empty file in specified directory. */"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    public Storage() {"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"            File dir \u003d new File(\"tasklist\");"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"            dir.mkdirs();"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"            File f \u003d new File(dir, \"mytasks.txt\");"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"            f.createNewFile();"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            this.filepath \u003d f.toPath();"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException err) {"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"            err.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"    /** Writes all the tasks to the txt file stored on hard drive. */"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    public void writeToDisk(List\u003cTask\u003e store) {"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"            FileWriter fw \u003d new FileWriter(\"tasklist/mytasks.txt\");"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            for (Task t: store) {"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"                fw.write(t.toString() + \"\\n\");"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"            fw.close();"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException err) {"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"            err.printStackTrace();"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"    /** Read-in content from previously stored file on hard drive. */"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"    public List\u003cTask\u003e loadContent() {"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"        List\u003cTask\u003e store \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"            Scanner sc \u003d new Scanner(this.filepath);"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"            while (sc.hasNext()) {"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"                boolean done \u003d false;"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"                Task t;"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"                if (!line.split(\"\\\\]\")[1].split(\"\\\\[\")[1].equals(\" \")) {"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"                    done \u003d true;"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"                }"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"                if (line.contains(\"T\")) {"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"                    t \u003d new Todo(line.split(\"\\\\] \")[1]);"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"                } else if (line.contains(\"D\")) {"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"                    String description \u003d line.split(\"\\\\] \")[1].split(\" \\\\(\")[0];"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"                    String by \u003d line.split(\"\\\\(by: \")[1].split(\"\\\\)\")[0];"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"                    t \u003d new Deadline(description, by);"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"                } else {"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"                    String description \u003d line.split(\"\\\\] \")[1].split(\" \\\\(\")[0];"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"                    String by \u003d line.split(\"\\\\(at: \")[1].split(\"\\\\)\")[0];"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"                    t \u003d new Event(description, by);"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"                }"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"                if (done) {"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"                    t.markAsDone();"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"                }"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"                store.add(t);"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException err) {"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"            err.printStackTrace();"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"        return store;"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":81}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Deadline."},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":" * For tasks that must be ccompletely dueDate a certain time."},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Deadline of task. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    protected LocalDate dueDate;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new Deadline with text description and date."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public Deadline(String description, String dueDate) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        if (dueDate.contains(\"-\")) {"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"            this.dueDate \u003d LocalDate.parse(dueDate);"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"            this.dueDate \u003d LocalDate.parse(dueDate, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", this.getStatusIcon(),"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"                super.toString(), this.dueDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":31}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Event."},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":" * For tasks that lasts for a certain period at certain location."},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Location of event. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    protected LocalDate eventDateTime;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new Event with text description and date."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public Event(String description, String eventDateTime) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        if (eventDateTime.contains(\"-\")) {"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"            this.eventDateTime \u003d LocalDate.parse(eventDateTime);"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"            this.eventDateTime \u003d LocalDate.parse(eventDateTime,"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"                DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", this.getStatusIcon(), super.toString(),"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"            this.eventDateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":32}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Task."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * Supports modifying status of a task."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Text description of the task. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    /** State of the task. */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * Initialise a new undone Task with text description."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * @param description Text representation of what task is about."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public Task(String description) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * Marks task as done."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    public boolean markAsDone() {"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        this.isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"        return this.isDone;"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"     * Give a text representation of task\u0027s state."},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"     @return an empty space for undone tasks and tick for done tasks."},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        return this.description;"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":42}},{"path":"src/main/java/duke/task/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information of all tasks entered by user."},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":" * Supports operations to modify and display stored tasks."},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"public class TaskManager {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** List of all tasks entered by user. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    private List\u003cTask\u003e store;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a task manager with no tasks. */"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    public TaskManager() {"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"        this.store \u003d new ArrayList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a task manager with pre-loaded list of tasks. */"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    public TaskManager(List\u003cTask\u003e store) {"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        this.store \u003d store;"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    /** Retrieves the whole list of tasks."},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"     * @return List of tasks."},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public List\u003cTask\u003e getStore() {"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        return this.store;"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"     * Adds new task to list of all tasks."},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"    public void addTask(Task t) {"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"        this.store.add(t);"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"     * Removes task from list of all tasks."},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    public void deleteTask(int n) {"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"        this.store.remove(n - 1);"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"     * Prints the list of all tasks and their statuses."},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"    public String displayTasks() {"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"        if (this.store.size() \u003d\u003d 0) {"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"            return \"Congratulations, you have nothing to do!\";"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"        } else {"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"            return this.toString();"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"     * Accesses task at target index and mark it as done."},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"    public void markTaskDone(int n) {"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"        this.store.get(n - 1).markAsDone();"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"     * Find out the total number of tasks."},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"     * @return total number of tasks"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"    public int taskVolume() {"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"        return this.store.size();"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"     * Prints the line(s) that contain the element user is finding."},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"    public String find(String item) {"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"        int counter \u003d 1;"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"        String tasksfound \u003d \"\";"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"        for (Task t: this.store) {"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"            if (t.toString().toLowerCase().contains(item.toLowerCase())) {"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"                tasksfound +\u003d String.format(\"%s. %s\\n\", counter, t.toString());"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"            counter +\u003d 1;"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"        return tasksfound;"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":87,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":88,"author":{"gitId":"zhengruoxin"},"content":"        int counter \u003d 1;"},{"lineNumber":89,"author":{"gitId":"zhengruoxin"},"content":"        String taskrep \u003d \"\";"},{"lineNumber":90,"author":{"gitId":"zhengruoxin"},"content":"        for (Task elem: this.store) {"},{"lineNumber":91,"author":{"gitId":"zhengruoxin"},"content":"            taskrep +\u003d String.format(\"%s. %s\\n\", counter, elem.toString());"},{"lineNumber":92,"author":{"gitId":"zhengruoxin"},"content":"            counter +\u003d 1;"},{"lineNumber":93,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"zhengruoxin"},"content":"        return taskrep;"},{"lineNumber":95,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":96}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Todo."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * For tasks with no location and timing."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new Todo with text description."},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    public Todo(String description) {"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        return String.format(\"[T][%s] %s\", this.getStatusIcon(), super.toString());"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/main/java/duke/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":61}},{"path":"src/main/java/duke/ui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":" * A GUI for Duke using FXML."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"public class Main extends Application {"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showGreetings();"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":34}},{"path":"src/main/java/duke/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import javafx.application.Platform;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/jerry.png\"));"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/tom.png\"));"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"        duke \u003d d;"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"    public void showGreetings() {"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(duke.getUi().greet(), dukeImage));"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"            Platform.setImplicitExit(true);"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"            Platform.exit();"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"        );"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"        userInput.clear();"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":61}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates the visuals used in chatting with user."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"     * Prints a big Duke and greets the user. Prompts user to start input."},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    public String greet() {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        return \"Hello hello ;\u003e How can I help you?\";"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * Prints a line to separate each reply."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    public String separateLine() {"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        return \"----------------------------------------------------------\";"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * Prints a bye statement before exit."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    public String sayBye() {"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        return \"Byebye~ See you again soon!\";"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":28}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxWidth\u003d\"275.0\" style\u003d\"-fx-text-fill: black; -fx-label-padding: 4 4 4 4;\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"\u003c/fx:root\u003e"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":""}],"authorContributionMap":{"zhengruoxin":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.layout.Pane?\u003e"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.ui.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"        \u003cTextField fx:id\u003d\"userInput\" blendMode\u003d\"SRC_ATOP\" depthTest\u003d\"DISABLE\" layoutX\u003d\"-3.0\" layoutY\u003d\"559.0\" onAction\u003d\"#handleUserInput\" opacity\u003d\"0.65\" prefHeight\u003d\"41.0\" prefWidth\u003d\"405.0\" promptText\u003d\"type...\" style\u003d\"-fx-background-color: #f0e0e4;\" AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"         \u003cfont\u003e"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"323.0\" layoutY\u003d\"563.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" opacity\u003d\"0.80\" prefHeight\u003d\"30.0\" prefWidth\u003d\"71.0\" text\u003d\"Send\"\u003e"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"         \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"13.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"            \u003cPane opacity\u003d\"0.35\" style\u003d\"-fx-background-image: url(\u0027/images/nibblesbg.png\u0027); -fx-background-size: cover;\" AnchorPane.bottomAnchor\u003d\"41.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: transparent; -fx-background: transparent;\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"            \u003ccontent\u003e"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"            \u003c/content\u003e"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    \u003c/children\u003e"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"zhengruoxin":28}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Deadline;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    public void testStringConversion() {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"        assertEquals(\"[D][ ] lab report (by: Jan 21 2021)\","},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"                new Deadline(\"lab report\", \"2021-01-21\").toString());"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":14}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    public void testStringConversion() {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"        assertEquals(\"[E][ ] fieldtrip (at: Feb 17 2021)\","},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"                new Event(\"fieldtrip\", \"2021-02-17\").toString());"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    public void testMarkDone() {"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"        assertEquals(true,"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"                new Event(\"sampling\", \"2021-03-10\").markAsDone());"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import duke.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import duke.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    public void parser_unrecognisedCommand_dukeExceptionThrown() {"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"        assertThrows(DukeException.class, () -\u003e new Parser(new Storage()).process(\"hellooo!\"));"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public void parser_missingDescription_dukeExceptionThrown() {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        assertThrows(DukeException.class, () -\u003e new Parser(new Storage()).process(\"event \"));"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/test/java/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import duke.task.Todo;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    public void testMarKAsDone() {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"        assertEquals(true, new Todo(\"bring water\").markAsDone());"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"}"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""}],"authorContributionMap":{"zhengruoxin":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"todo wakeup"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"bla"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"event field trip at 2020-01-20"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"todo bring bread"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"deadline project by 2020-01-21"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"list"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"deadline"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"deadline lab excel by 2020-01-22"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"done 4"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"list"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"delete 5"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"list"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"bye"}],"authorContributionMap":{"zhengruoxin":15}}]
