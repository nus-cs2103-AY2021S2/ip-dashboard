[{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Stores information of a task that is to be added. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public abstract class AddCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"    protected String description;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    /** Asserts that all commands for adding tasks must contain description. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    public AddCommand(String description) {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"        super(\"Got it. I\u0027ve added this task:\\n\");"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"        this.description \u003d description;"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":12}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Encapsulates information of a possible command from user. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public abstract class Command {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"    protected String message;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises each command with a standard message. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    public Command(String msg) {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"        this.message \u003d msg;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    /** "},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     * Execute each command to achieve respective effect."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    public abstract void execute(TaskManager manager, Ui ui, Storage storage);"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":19}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Deadline."},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":" * For tasks that must be ccompletely by a certain time."},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Deadline of task. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    protected LocalDate by;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new Deadline with text description and date."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        if (by.contains(\"-\")) {"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"            this.by \u003d LocalDate.parse(by);"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"            this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", this.getStatusIcon(), "},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"                super.toString(), this.by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":31}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Deadline command is used for user to add a deadline task."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"public class DeadlineCommand extends AddCommand {"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a new deadline command with the task information. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    public DeadlineCommand(String description) {"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"        super(description.replaceAll(\"deadline \", \"\"));"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    /** "},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * Executes deadline command to add deadline task and respond to user."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"        Task t \u003d new Deadline(this.description.split(\" by \")[0], this.description.split(\" by \")[1]);;"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        manager.addTask(t);"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        this.message +\u003d t.toString() + \"\\n\" "},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"            + String.format(\"Now you have %s tasks in the list.\", manager.taskVolume());"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        storage.writeToDisk(manager.getStore());"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"        ui.replyWith(this.message);"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":27}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Delete command is used when user wants to remove a specific task."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    protected int index;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a new delete command with target task number. */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    public DeleteCommand(String description) {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"        super(\"\");"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        this.index \u003d Integer.valueOf(description.split(\" \")[1]);"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * Executes delete command to remove corresponding task from list."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        manager.deleteTask(this.index);"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        ui.replyWith(\"Task deleted.\");"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        storage.writeToDisk(manager.getStore());"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":26}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Done command is used when user wants to mark a task as done. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public class DoneCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"    protected int index;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new done command with index of target task."},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    public DoneCommand(String description) {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"        super(\"Wahoo you completed one task!\");"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        this.index \u003d Integer.valueOf(description.split(\" \")[1]);"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * Executes done command to mark target task as done."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        manager.markTaskDone(this.index);"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        ui.replyWith(this.message);"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        storage.writeToDisk(manager.getStore());"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":27}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"import duke.Storage;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"import duke.Ui;"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.Parser;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"/** Reads in user inputs and perform actions accordingly. */"},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    /** Storage to store and update tasks entered in hard drive. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    private Storage storage;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    /** Template for replying user. */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    private Ui ui;"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Helper to make sense of user inputs. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    private Parser parser;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises Duke with ui, storage and parser. */"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    public Duke() {"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    /** Activates Duke charbot. */"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    public void run() {"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        this.ui.greet();"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        this.parser.chat();"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"     * Reads input containing keyword and content of task from user."},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"     * Add, delete, view, mark as done or exit accordingly."},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"     * @param args Texts entered by user."},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"     */ "},{"lineNumber":32,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"        new Duke().run();"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"zhengruoxin":31,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information of potential exceptions in Duke."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new exception specific to Duke chatbot."},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    public DukeException(String message) {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":14}},{"path":"src/main/java/EmptyException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of an EmptyException."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * Arises when user enters task type without description."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class EmptyException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Fixed message to remind user to include task description. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    static final String message \u003d \":( OOPS! the description of a task cannot be empty.\";"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises new empty description exception."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    public EmptyException() {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":17}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Event."},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":" * For tasks that lasts for a certain period at certain location."},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Location of event. */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    protected LocalDate at;"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new Event with text description and date."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public Event(String description, String at) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        if (at.contains(\"-\")) {"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"            this.at \u003d LocalDate.parse(at);"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        } else {"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"            this.at \u003d LocalDate.parse(at, DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", this.getStatusIcon(), "},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"                super.toString(), this.at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":31}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Event command is used when user wants to add an event task. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public class EventCommand extends AddCommand {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises event command with its description. */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    public EventCommand(String description) {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Executes event command to add event to tasklist."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */ "},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        String trimmed \u003d this.description.replaceAll(\"event \", \"\");"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        Task t \u003d new Event(trimmed.split(\" at \")[0], trimmed.split(\" at \")[1]);"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"        manager.addTask(t);"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        this.message +\u003d t.toString() + \"\\n\" "},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"            + String.format(\"Now you have %s tasks in the list.\", manager.taskVolume());"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        storage.writeToDisk(manager.getStore());"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"        ui.replyWith(this.message);"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    } "},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":26}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Exit command is used when user bids chatbot goodbye. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public class ExitCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises exit command. */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    public ExitCommand() {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"        super(\"\");"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Executes exit command to bid user goodbye and exit chat."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        ui.sayBye();"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Find command is used when user wants to find all tasks that contain a certain keyword. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public class FindCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"    String keyword;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises find command with keyword. */"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    public FindCommand(String description) {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"        super(\"Here are the matching tasks in your list: \");"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"        this.keyword \u003d description.replaceAll(\"find \", \"\");"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    /** Executes find command to present all tasks containing keyword."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        ui.replyWith(this.message);"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"        manager.find(this.keyword);"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":22}},{"path":"src/main/java/KeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of an EmptyException."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * Arises when user enters words that do not correspond to any command."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class KeywordException extends DukeException {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Fixed message to remind user to include keyword. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    static final String message \u003d \":( OOPS! i\u0027m sorry but i don\u0027t know what that means.\";"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises new missing keyword exception."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    public KeywordException() {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"        super(message);"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":17}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** List command is used when user wants to view all tasks he/she has. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public class ListCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises list command. */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    public ListCommand() {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"        super(\"\");"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Executes list command to display all user\u0027s tasks."},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"        manager.displayTasks();"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.util.Scanner;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import java.lang.ArrayIndexOutOfBoundsException;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"/** The Parser makes sense of user inputs and executes follow up actions accordingly. */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    /** Storage to store and update tasks entered in hard drive. */"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    /** Template for replying user. */"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    /** Manager to organise and retrieve tasks from list. */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    private TaskManager manager;"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a parser in chatbot to make sense of user inputs. */"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    public Parser() {"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        this.manager \u003d new TaskManager(this.storage.loadContent());"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"     * Process the user input and execute the appropriate commands."},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"     * @param input Text representation of task type and task info."},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"     * @throws DukeException if input has no keyword or if task has no description."},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    public void process(String input) throws DukeException {"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        if (input.contains(\"todo\") || input.contains(\"deadline\") "},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"                || input.contains(\"event\") || input.contains(\"find\")) {"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"            if (input.split(\" \").length \u003d\u003d 1) {"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"                throw new EmptyException();"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        if (input.equals(\"list\")) {"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            ListCommand listcommand \u003d new ListCommand();"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"            listcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"todo\")) {"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"            TodoCommand todocommand \u003d new TodoCommand(input);"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"            todocommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"deadline\")) {"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"            DeadlineCommand deadlinecommand \u003d new DeadlineCommand(input);"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"            deadlinecommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"event\")) {"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"            EventCommand eventcommand \u003d new EventCommand(input);"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"            eventcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"find\")) {"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"            FindCommand findcommand \u003d new FindCommand(input);"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"            findcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"done\")) {"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"            DoneCommand donecommand \u003d new DoneCommand(input);"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"            donecommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.contains(\"delete\")) {"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"            DeleteCommand deletecommand \u003d new DeleteCommand(input);"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"            deletecommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"        } else if (input.equals(\"bye\")) {"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"            ExitCommand exitcommand \u003d new ExitCommand();"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"            exitcommand.execute(this.manager, this.ui, this.storage);"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"            throw new KeywordException();"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"     * Starts chat, reads user input and replies."},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"     * Exits when user says bye."},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"    public void chat() {"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"        String input;"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"            input \u003d sc.nextLine();"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"            try {"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"                this.process(input);"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"            } catch (DukeException err) {"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"                System.out.println(err.getMessage());"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"            if (!input.equals(\"bye\")) {"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"                this.ui.separateLine();"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"            }   "},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":87}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.nio.file.Path;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":" * The Storage is used to interact with content stored on hard drive."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"    private Path filepath;"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a storage and creates an empty file in specified directory. */"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"    public Storage() {"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"            File dir \u003d new File(\"tasklist\");"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"            dir.mkdirs();"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"            File f \u003d new File(dir, \"mytasks.txt\");"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"            f.createNewFile();"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"            this.filepath  \u003d f.toPath();"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException err) {"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"            err.printStackTrace();"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    /** Writes all the tasks to the txt file stored on hard drive. */"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    public void writeToDisk(List\u003cTask\u003e store) {"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"            FileWriter fw \u003d new FileWriter(\"tasklist/mytasks.txt\");"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"            for (Task t: store) {"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"                fw.write(t.toString() + \"\\n\");"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"            fw.close();"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException err) {"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"            err.printStackTrace();"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"    /** Read-in content from previously stored file on hard drive. */"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"    public List\u003cTask\u003e loadContent() {"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"        List\u003cTask\u003e store \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"            Scanner sc \u003d new Scanner(this.filepath);"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"            while (sc.hasNext()) {"},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"                boolean done \u003d false;"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"                Task t;"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"                if (line.split(\"]\")[1].replace(\"[\", \"\") !\u003d \"\") {"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"                    done \u003d true;"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"                if (line.contains(\"T\")) {"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"                    t \u003d new Todo(line.split(\" \")[1]);"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":"                } else if (line.contains(\"D\")) {"},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"                    String description \u003d line.split(\" \")[1];"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"                    String by \u003d line.split(\"\\\\(by: \")[1].split(\"\\\\)\")[0];"},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"                    t \u003d new Deadline(description, by);"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"                } else {"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"                    String description \u003d line.split(\" \")[1];"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"                    String by \u003d line.split(\"\\\\(at: \")[1].split(\"\\\\)\")[0];"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":"                    t \u003d new Event(description, by);"},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"                if (done) {"},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"                    t.markAsDone();"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"                }"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"                store.add(t);"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"        } catch (IOException err) {"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":"            err.printStackTrace();"},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"        return store;"},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":76}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Task."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * Supports modifying status of a task."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /** Text description of the task. */"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"    /** State of the task. */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    protected boolean isDone;"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * Initialise a new undone Task with text description."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     * @param description Text representation of what task is about."},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public Task(String description) {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * Marks task as done."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    public boolean markAsDone() {"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        this.isDone \u003d true;"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"        return this.isDone;"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"     * Give a text representation of task\u0027s state."},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"     @return an empty space for undone tasks and tick for done tasks."},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"    public String getStatusIcon() {"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"        return (isDone ? \"\\u2713\" : \" \");"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        return this.description;"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":42}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information of all tasks entered by user."},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":" * Supports operations to modify and display stored tasks."},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"public class TaskManager {"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"    /** List of all tasks entered by user. */"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    private List\u003cTask\u003e store;"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a task manager with no tasks. */"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public TaskManager() {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        this.store \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a task manager with pre-loaded list of tasks. */"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    public TaskManager(List\u003cTask\u003e store) {"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"        this.store \u003d store;"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"    /** Retrieves the whole list of tasks."},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"     * @return List of tasks."},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"    public List\u003cTask\u003e getStore() {"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"        return this.store;"},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"     * Adds new task to list of all tasks."},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    public void addTask(Task t) {"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"        this.store.add(t);"},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"     * Removes task from list of all tasks."},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"zhengruoxin"},"content":"    public void deleteTask(int n) {"},{"lineNumber":44,"author":{"gitId":"zhengruoxin"},"content":"        this.store.remove(n - 1);"},{"lineNumber":45,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":47,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"zhengruoxin"},"content":"     * Prints the list of all tasks and their statuses."},{"lineNumber":49,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"zhengruoxin"},"content":"    public void displayTasks() {"},{"lineNumber":51,"author":{"gitId":"zhengruoxin"},"content":"        int counter \u003d 1;"},{"lineNumber":52,"author":{"gitId":"zhengruoxin"},"content":"        for (Task elem: this.store) {"},{"lineNumber":53,"author":{"gitId":"zhengruoxin"},"content":"            System.out.println(counter + \". \" + elem.toString());"},{"lineNumber":54,"author":{"gitId":"zhengruoxin"},"content":"            counter +\u003d 1;"},{"lineNumber":55,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":58,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"zhengruoxin"},"content":"     * Accesses task at target index and mark it as done."},{"lineNumber":60,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"zhengruoxin"},"content":"    public void markTaskDone(int n) {"},{"lineNumber":62,"author":{"gitId":"zhengruoxin"},"content":"        this.store.get(n - 1).markAsDone();"},{"lineNumber":63,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":65,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"zhengruoxin"},"content":"     * Find out the total number of tasks."},{"lineNumber":67,"author":{"gitId":"zhengruoxin"},"content":"     * @return total number of tasks"},{"lineNumber":68,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"zhengruoxin"},"content":"    public int taskVolume() {"},{"lineNumber":70,"author":{"gitId":"zhengruoxin"},"content":"        return this.store.size();"},{"lineNumber":71,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":73,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"zhengruoxin"},"content":"     * Prints the line(s) that contain the element user is finding."},{"lineNumber":75,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"zhengruoxin"},"content":"    public void find(String item) {"},{"lineNumber":77,"author":{"gitId":"zhengruoxin"},"content":"        int counter \u003d 1;"},{"lineNumber":78,"author":{"gitId":"zhengruoxin"},"content":"        for (Task t: this.store) {"},{"lineNumber":79,"author":{"gitId":"zhengruoxin"},"content":"            if (t.toString().contains(item)) {"},{"lineNumber":80,"author":{"gitId":"zhengruoxin"},"content":"                System.out.println(counter + \". \" + t.toString());"},{"lineNumber":81,"author":{"gitId":"zhengruoxin"},"content":"            }"},{"lineNumber":82,"author":{"gitId":"zhengruoxin"},"content":"            counter +\u003d 1;"},{"lineNumber":83,"author":{"gitId":"zhengruoxin"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":85}},{"path":"src/main/java/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"import duke.Task;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"import duke.Todo;"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"import duke.Deadline;"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"public class TaskTest {"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"\t@Test"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"\tpublic void testMarKAsDone() {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"\t\tassertEquals(true, new Todo(\"bring water\").markAsDone());"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"\t}"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"\t@Test"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"\tpublic void testStringConversion() {"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"\t\tassertEquals(\"[D][ ] project (by: Jan 21 2020)\", "},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"            new Deadline(\"project\", \"2020-01-21\").toString());"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"\t}"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates information and state of a Todo."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" * For tasks with no location and timing."},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"     * Initialises a new Todo with text description."},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"    public Todo(String description) {"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        return String.format(\"[T][%s] %s\", this.getStatusIcon(), super.toString());"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":20}},{"path":"src/main/java/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/** Todo command is used when user wants to add a new task without date information. */"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"public class TodoCommand extends AddCommand {"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"    /** Initialises a todo command with its description. */"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"    public TodoCommand(String description) {"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    /** Executes todo command to add task to list."},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"     * @param manager Helper that manages the stored tasks."},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"     * @param ui Interface helper that decides what user sees."},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"     * @param storage Storage that interacts with information stored on harddrive."},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"    public void execute(TaskManager manager, Ui ui, Storage storage) {"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"        Task t \u003d new Todo(this.description.split(\"todo \")[1]);"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        manager.addTask(t);"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        this.message +\u003d t.toString() + \"\\n\" "},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"            + String.format(\"Now you have %s tasks in the list.\", manager.taskVolume());"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":"        storage.writeToDisk(manager.getStore());"},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"        ui.replyWith(this.message);"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":24}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":" * Encapsulates the visuals used in chatting with user."},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":" */"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"     * Prints a big Duke and greets the user. Prompts user to start input."},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"    public void greet() {"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"zhengruoxin"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"zhengruoxin"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":18,"author":{"gitId":"zhengruoxin"},"content":"        System.out.println(\"Hello! I\u0027m Duke :) What can I do for you?\");"},{"lineNumber":19,"author":{"gitId":"zhengruoxin"},"content":"        this.separateLine();"},{"lineNumber":20,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":22,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"zhengruoxin"},"content":"     * Prints a line to separate each reply."},{"lineNumber":24,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"zhengruoxin"},"content":"    public void separateLine() {"},{"lineNumber":26,"author":{"gitId":"zhengruoxin"},"content":"        System.out.println(\"----------------------------------------------------------\");"},{"lineNumber":27,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":29,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"zhengruoxin"},"content":"     * Displays intended message to user."},{"lineNumber":31,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"zhengruoxin"},"content":"    public void replyWith(String msg) {"},{"lineNumber":33,"author":{"gitId":"zhengruoxin"},"content":"        System.out.println(msg);"},{"lineNumber":34,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"zhengruoxin"},"content":""},{"lineNumber":36,"author":{"gitId":"zhengruoxin"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"zhengruoxin"},"content":"     * Prints a bye statement before exit."},{"lineNumber":38,"author":{"gitId":"zhengruoxin"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"zhengruoxin"},"content":"    public void sayBye() {"},{"lineNumber":40,"author":{"gitId":"zhengruoxin"},"content":"        System.out.println(\"Byebye~ Hope to see you again soon!\");"},{"lineNumber":41,"author":{"gitId":"zhengruoxin"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"zhengruoxin"},"content":"}"}],"authorContributionMap":{"zhengruoxin":42}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zhengruoxin"},"content":"todo wakeup"},{"lineNumber":2,"author":{"gitId":"zhengruoxin"},"content":"bla"},{"lineNumber":3,"author":{"gitId":"zhengruoxin"},"content":"event field trip at 2020-01-20"},{"lineNumber":4,"author":{"gitId":"zhengruoxin"},"content":"todo bring bread"},{"lineNumber":5,"author":{"gitId":"zhengruoxin"},"content":"deadline project by 2020-01-21"},{"lineNumber":6,"author":{"gitId":"zhengruoxin"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"zhengruoxin"},"content":"done 3"},{"lineNumber":8,"author":{"gitId":"zhengruoxin"},"content":"list"},{"lineNumber":9,"author":{"gitId":"zhengruoxin"},"content":"deadline"},{"lineNumber":10,"author":{"gitId":"zhengruoxin"},"content":"deadline lab excel by 2020-01-22"},{"lineNumber":11,"author":{"gitId":"zhengruoxin"},"content":"done 4"},{"lineNumber":12,"author":{"gitId":"zhengruoxin"},"content":"list"},{"lineNumber":13,"author":{"gitId":"zhengruoxin"},"content":"delete 5"},{"lineNumber":14,"author":{"gitId":"zhengruoxin"},"content":"list"},{"lineNumber":15,"author":{"gitId":"zhengruoxin"},"content":"bye"}],"authorContributionMap":{"zhengruoxin":15}}]
