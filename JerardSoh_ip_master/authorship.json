[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"group \u0027org.example\u0027"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"version \u00271.0-SNAPSHOT\u0027"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"repositories {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    mavenCentral()"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"test {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    useJUnitPlatform()"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"run {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    standardInput \u003d System.in"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"jar {"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    manifest {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        attributes \"Main-Class\": \"Duke\""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"application {"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    mainClassName \u003d \u0027Launcher\u0027"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"dependencies {"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.0\u0027"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"version \u003d \u00271.2.1\u0027"}],"authorContributionMap":{"JerardSoh":45}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":":end"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":":omega"}],"authorContributionMap":{"JerardSoh":89}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"rootProject.name \u003d \u0027ip\u0027"}],"authorContributionMap":{"JerardSoh":1}},{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A command that represents adding a \u003ccode\u003eTask\u003c/code\u003e into a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class AddCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    Task task;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    public AddCommand(Task task) {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        this.task \u003d task;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"     * Executes the adding command and adds the task to the TaskList."},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eUi\u003c/code\u003e prints the task added"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * and the storage stores the task into the text file."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interactions with the user"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of a message for added task"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList tasklist, Ui ui, Storage storage) throws IOException {"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        String message;"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        tasklist.addTask(task);"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        message \u003d ui.showAddTask(tasklist);"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(tasklist);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":33}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * An abstract class that represents all commands."},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    String execute(TaskList tasklist, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        return \"\";"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    public boolean isExit() {"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        return false;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":15}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of task that has an extra variable to keep track of date and overrides toString() method of"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" * \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    protected String by;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.by \u003d by;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":18}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A command that represents deleting a \u003ccode\u003eTask\u003c/code\u003e from a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    int taskIndex;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public DeleteCommand(int taskIndex) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Executes the delete command and removes the task from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eUi\u003c/code\u003e prints the task deleted."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eStorage\u003c/code\u003e helps the task to be deleted from the text file."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interactions with the user"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of deleted task"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException   is thrown when there is an error related to input and output"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList tasklist, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        String message;"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        message \u003d ui.showDeleteTask(tasklist, taskIndex);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        tasklist.deleteTask(taskIndex);"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(tasklist);"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":35}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":59}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A command that represents marking a \u003ccode\u003eTask\u003c/code\u003e in a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class DoneCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    int taskIndex;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public DoneCommand(int taskIndex) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Executes the done command and marks the task as done from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eUi\u003c/code\u003e prints the task marked."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eStorage\u003c/code\u003e helps to mark the task in the text file."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interactions with the user"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of done message"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException   is thrown when there is an error related to input and output"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList tasklist, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        String message;"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        tasklist.markTask(taskIndex);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        message \u003d ui.showMarkTask(tasklist.getList().get(taskIndex));"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(tasklist);"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":35}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"    private final Ui ui;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    private final Parser parser;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    private Storage storage;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    private TaskList tasklist;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    private String message \u003d \"\";"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    boolean isExit \u003d false;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    public Duke(String filePath) {"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"            this.storage \u003d new Storage(filePath);"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"            tasklist \u003d new TaskList(storage.load());"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"            ui.showLoadingError();"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"            tasklist \u003d new TaskList();"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     * Runs the program"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    public void run(String fullCommand) {"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        String pendingMessage;"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"            Command c \u003d parser.parse(fullCommand);"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"            pendingMessage \u003d c.execute(tasklist, ui, storage);"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"            message \u003d pendingMessage;"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"            isExit \u003d c.isExit();"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"            message \u003d ui.showLoadingError();"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        } catch (DukeException | RuntimeException e) {"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"            message \u003d ui.showError(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    public String getLine() {"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"        return ui.showLine();"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    public String getMessage() {"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"    public String welcomeMessage() {"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        return ui.showLine() + \"\\n\" + ui.showWelcome() + \"\\n\" + ui.showLine();"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    public String exitMessage() {"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        return ui.showExit() + \"\\n\" + ui.showLine();"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"    public boolean getExitStatus() {"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"        return isExit;"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":3,"JerardSoh":58}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Exception for exceptions related to Duke"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class DukeException extends Exception {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke exception for empty description after a command"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class EmptyDescriptionException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public EmptyDescriptionException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of \u003ccode\u003eTask\u003c/code\u003ethat has an extra variable to keep track of date and overrides toString() method of"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" * \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    protected String at;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    public Event(String description, String at) {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.at \u003d at;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":18}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A command that represents exiting the program"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class ExitCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    boolean isExit;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    public ExitCommand() {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        this.isExit \u003d true;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"     * Indicates that the program is at the exit"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * @return a boolean that is true when Exit Command is created"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    public boolean isExit() {"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        return isExit;"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":22}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of the \u003ccode\u003eCommand\u003c/code\u003eclass that represents a command to find a keyword the the ArrayList"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class FindCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    String keyWord;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public FindCommand(String keyWord) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.keyWord \u003d keyWord;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Executes the find command and finds the \u003ccode\u003eTasks\u003c/code\u003e that matches the keyword from the \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * Uses \u003ccode\u003eUi\u003c/code\u003e to print the \u003ccode\u003eTaskList\u003c/code\u003e of the matching keyword \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interaction with the user"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from a file and saving into it"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of found tasks"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList tasklist, Ui ui, Storage storage) {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e matchingArrayList \u003d tasklist.findTask(this.keyWord);"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        TaskList matchingList \u003d new TaskList(matchingArrayList);"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        return ui.printList(matchingList);"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""}],"authorContributionMap":{"JerardSoh":31}},{"path":"src/main/java/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke exception for an invalid command given"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public InvalidCommandException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke exception for an invalid description given"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class InvalidDescriptionException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public InvalidDescriptionException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public void start(Stage stage) {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"            stage.setScene(scene);"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"            stage.show();"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"            e.printStackTrace();"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":26}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    private VBox dialogContainer;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    private TextField userInput;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    private Button sendButton;"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    private Duke duke;"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        duke \u003d new Duke(\"src\\\\main\\\\java\\\\taskList.txt\");"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        String response \u003d duke.welcomeMessage();"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        );"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        duke.run(input);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        String response \u003d duke.getLine() + \"\\n\" + duke.getMessage() + \"\\n\" + duke.getLine();"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"                DialogBox.getUserDialog(input, userImage)"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        );"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        );"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"        userInput.clear();"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":55}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" * Takes in user input and makes sense of it for the program"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public Parser() {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Checks whether the command is invalid"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * @param taskType the first word of the input."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidCommandException is thrown when there is an error related to unknown command"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    void invalidCommandChecker(String taskType) throws InvalidCommandException {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        if (!(taskType.equals(\"todo\") || taskType.equals(\"done\") || taskType.equals(\"list\") || taskType.equals(\"event\")"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"                || taskType.equals(\"deadline\") || taskType.equals(\"delete\") || taskType.equals(\"bye\")"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"                || taskType.equals(\"find\"))) {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidCommandException(\"Sorry, I don\u0027t know what that means...\");"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * Checks whether the command has an empty description"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     * @param tokens specifies an array of the user input"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     * @throws EmptyDescriptionException is thrown when there is an error related to an empty description after a command"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    void emptyDescriptionChecker(String[] tokens) throws EmptyDescriptionException {"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        if (tokens.length \u003c 2) {"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"            throw new EmptyDescriptionException(\"Sorry, nothing was written after the command so I am unable to process...\");"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     * Converts the date to a suitable format so that the program is able to understand"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"     * @param date Date in the format of yyyy-mm-dd"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the date in (MMM d yyyy) format in String"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    public String parseDate(String date) {"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"        LocalDate d1 \u003d LocalDate.parse(date);"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        return d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"     * Converts the time to a suitable format so that the program is able to understand"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"     * @param time time in the format of (hh:mm) in 24 hour time"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the time in (hh:mm a) format in String"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"    public String parseTime(String time) {"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"        return LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HH:mm\"))"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"                .format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"     * Makes sense of the command given in string for the program to be able to take action"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"     * @param fullCommand the entire string of the user input"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns a \u003ccode\u003eCommand\u003c/code\u003e that specifies what the user is asking the program to do"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"    public Command parse(String fullCommand) throws DukeException {"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"        String[] tokens \u003d fullCommand.split(\" \", 2);"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"        String taskType \u003d tokens[0];"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        invalidCommandChecker(taskType);"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        switch (taskType) {"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"        case \"list\": {"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"            return new PrintListCommand();"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        case \"done\": {"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"            int taskIndex \u003d Integer.parseInt(taskInfo) - 1;"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"            return new DoneCommand(taskIndex);"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"        case \"delete\": {"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"            int taskIndex \u003d Integer.parseInt(taskInfo) - 1;"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"            return new DeleteCommand(taskIndex);"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"        case \"todo\": {"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new ToDo(taskInfo));"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"        case \"deadline\": {"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"            if (!(taskInfo.contains(\"/by\"))) {"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"            String[] taskInfoArr \u003d taskInfo.split(\" /by \", 2);"},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"            if (taskInfoArr.length \u003c 2) {"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"            String[] dateAndTime \u003d taskInfoArr[1].split(\" \");"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"            String date \u003d parseDate(dateAndTime[0]);"},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"            String time \u003d parseTime(dateAndTime[1]);"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"            String by \u003d date + \" \" + time;"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new Deadline(taskInfoArr[0], by));"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"        case \"event\": {"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":"            if (!(taskInfo.contains(\"/at\"))) {"},{"lineNumber":130,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":133,"author":{"gitId":"JerardSoh"},"content":"            String[] taskInfoArr \u003d taskInfo.split(\" /at \", 2);"},{"lineNumber":134,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":135,"author":{"gitId":"JerardSoh"},"content":"            if (taskInfoArr.length \u003c 2) {"},{"lineNumber":136,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":137,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":139,"author":{"gitId":"JerardSoh"},"content":"            String[] dateAndTime \u003d taskInfoArr[1].split(\" \");"},{"lineNumber":140,"author":{"gitId":"JerardSoh"},"content":"            String date \u003d parseDate(dateAndTime[0]);"},{"lineNumber":141,"author":{"gitId":"JerardSoh"},"content":"            String time \u003d parseTime(dateAndTime[1]);"},{"lineNumber":142,"author":{"gitId":"JerardSoh"},"content":"            String by \u003d date + \" \" + time;"},{"lineNumber":143,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":144,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new Event(taskInfoArr[0], by));"},{"lineNumber":145,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"JerardSoh"},"content":"        case \"find\": {"},{"lineNumber":147,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":148,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":149,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":150,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":151,"author":{"gitId":"JerardSoh"},"content":"            return new FindCommand(taskInfo);"},{"lineNumber":152,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":153,"author":{"gitId":"JerardSoh"},"content":"        case \"bye\": {"},{"lineNumber":154,"author":{"gitId":"JerardSoh"},"content":"            return new ExitCommand();"},{"lineNumber":155,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"JerardSoh"},"content":"        default: {"},{"lineNumber":157,"author":{"gitId":"JerardSoh"},"content":"            return null;"},{"lineNumber":158,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":159,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":160,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":161}},{"path":"src/main/java/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A command that represents printing the \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class PrintListCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public PrintListCommand() {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList tasklist, Ui ui, Storage storage) {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        return ui.printList(tasklist);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":14}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":" * Deals with loading tasks from a file and saving tasks to the file"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    String filePath;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    ArrayList\u003cTask\u003e tasks;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    File myFile;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        this.myFile \u003d new File(filePath);"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"        if (!myFile.createNewFile()) {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"            scanTaskList();"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * Scans the file and save the tasks into an ArrayList of Task"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     * @throws FileNotFoundException is thrown when there the file could not be found"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    void scanTaskList() throws FileNotFoundException {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        Scanner sc \u003d new Scanner(myFile);"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        while (sc.hasNext()) {"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"            Task task;"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"            if (input.contains(\"[T]\")) {"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"                String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"                String taskInfo \u003d tokens[1];"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"                task \u003d new ToDo(taskInfo);"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"            } else if (input.contains(\"[D]\")) {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"                String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"                String[] nextTokens \u003d tokens[1].split(\" \", 2);"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"                String date \u003d nextTokens[1].substring(nextTokens[1].indexOf(\u0027:\u0027) + 2, nextTokens[1].indexOf(\u0027)\u0027));"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"                task \u003d new Deadline(nextTokens[0], date);"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"            } else {"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"                String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"                String[] nextTokens \u003d tokens[1].split(\" \", 2);"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"                String date \u003d nextTokens[1].substring(nextTokens[1].indexOf(\u0027:\u0027) + 2, nextTokens[1].indexOf(\u0027)\u0027));"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"                task \u003d new Event(nextTokens[0], date);"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"            if (input.contains(\"\\u2713\")) {"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"                task.markAsDone();"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"            tasks.add(task);"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"     * Stores the \u003ccode\u003eTaskList\u003c/code\u003e into a file"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist A class that stores the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"    public void writeToFile(TaskList tasklist) throws IOException {"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tasklist.getList();"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        for (Task t : tasks) {"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"            fw.write(t + \"\\n\");"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        fw.close();"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"     * Loads the ArrayList"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the ArrayList of \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e load() {"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"        return tasks;"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":89}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * Represents the tasks that the user has input into the program. The task has a description and a boolean to"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" * indicate that it is completed"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * Gets the status of the \u003ccode\u003eTask\u003c/code\u003e\u003e to determine if it is done."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @return a String of a Tick symbol if it is done and a Cross symbol if it is not"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    public String getStatusIcon() {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     * Marks the \u003ccode\u003eTask\u003c/code\u003e as done"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    public void markAsDone() {"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        this.isDone \u003d true;"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":35}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * Contains the task list which is an ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    ArrayList\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * Removes the \u003ccode\u003eTask\u003c/code\u003e by specifying the index from the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the task index in the ArrayList \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidDescriptionException is thrown when there is an error related to an invalid description"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    void deleteTask(int taskIndex) throws InvalidDescriptionException {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        if (taskIndex \u003e\u003d tasks.size()) {"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        tasks.remove(taskIndex);"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"     * Marks the \u003ccode\u003eTask\u003c/code\u003e as done"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the task index in the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    void markTask(int taskIndex) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"        if (taskIndex \u003e\u003d tasks.size()) {"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"        tasks.get(taskIndex).markAsDone();"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"     * Gets the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the stored ArrayList"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        return tasks;"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"     * Adds the task to the ArrayList"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"     * @param task represents the \u003ccode\u003eTask\u003c/code\u003e to be added"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    void addTask(Task task) {"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"        tasks.add(task);"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"     * Finds \u003ccode\u003eTask\u003c/code\u003e in the ArrayList that contains the matching word"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"     * @param keyWord indicates the word to find"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     * @return an ArrayList that contains the \u003ccode\u003eTasks\u003c/code\u003e that has the keyword"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e findTask(String keyWord) {"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e matchingWords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        for (Task t : tasks) {"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"            if (t.toString().contains(keyWord)) {"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"                matchingWords.add(t);"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        return matchingWords;"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":81}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Task that has a description and overrides the toString() method of \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public ToDo(String description) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":14}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" * Deals with interactions with the user"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    Scanner sc;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public Ui() {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * To output a line that consists of -"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of -"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    public String showLine() {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        return \"------------------------------------------------\";"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     * To output an error message"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     * @param message the error message in String"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * @return String message"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    public String showError(String message) {"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"     * To indicate that the file is unable to be loaded"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"     * @return String that states unable to load file"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    public String showLoadingError() {"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"        return \"Unable to load file!\";"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"//    /**"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"//     * Takes in user input"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"//     *"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"//     * @return the full user command in String"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"//     */"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"//    public String readCommand() {"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"//        return sc.nextLine();"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"//    }"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"     * To output a welcome message"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"     * @return String of welcome message"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"    public String showWelcome() {"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"        String message \u003d \"Hi! I\u0027m Timmy!\\nWhat can Timmy note down for you today?\";"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"        message \u003d message + \"\\nPlease type in any of these format!\" + \"\\ntodo [title]\""},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"                + \"\\nevent [title] /at [yyyy-mm-dd] [HH:MM]\" + \"\\ndeadline [title] /by [yyyy-mm-dd] [HH:MM]\""},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"                + \"\\nlist\" + \"\\ndelete [index]\" + \"\\ndone [index]\";"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"     * To output an exit message"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     * @return String of an exit message"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"    public String showExit() {"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"        return \"Bye! Hope to see you again!\";"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"     * To output the \u003ccode\u003eTasks\u003c/code\u003e in a TaskList"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist stores the \u003ccode\u003eTask\u003c/code\u003e in an ArrayList"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"     * @return String to consists of \u003ccode\u003eTask\u003c/code\u003e in an ArrayList"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    public String printList(TaskList tasklist) {"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"        String message \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tasklist.getList();"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"        for (int j \u003d 0; j \u003c tasks.size(); j++) {"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"            message \u003d message + (j + 1) + \".\" + tasks.get(j).toString() + \"\\n\";"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"     * To ouput a message to indicate that the task is marked"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"     * @param task the \u003ccode\u003eTask\u003c/code\u003e\u003e to be marked"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"     * @return String that indicates the \u003ccode\u003eTask\u003c/code\u003e\u003e to be marked"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"    public String showMarkTask(Task task) {"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString();"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"     * To output a message to indicate that the task is deleted"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist  stores the \u003ccode\u003eTask\u003c/code\u003e in an ArrayList"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the \u003ccode\u003eTask\u003c/code\u003e index in the ArrayList"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of deleted tasks"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"    public String showDeleteTask(TaskList tasklist, int taskIndex) {"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"        String message \u003d \"Ok! I\u0027ve removed this task:\\n\" + tasklist.getList().get(taskIndex).toString() + \"\\n\";"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"        message \u003d message + \"Currently, you have \" + (tasklist.getList().size() - 1) + \" task(s) in the list!\";"},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"     * To output the added \u003ccode\u003eTask\u003c/code\u003e to the ArrayList"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist stores the \u003ccode\u003eTask\u003c/code\u003e in an ArrayList"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of the task added"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"    public String showAddTask(TaskList tasklist) {"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":"        String message \u003d \"Ok! I\u0027ve added this task:\\n\" + tasklist.getList().get(tasklist.getList().size() - 1).toString();"},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"        message \u003d message + \"\\nCurrently, you have \" + tasklist.getList().size() + \" task(s) in the list!\";"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":128}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"         \u003copaqueInsets\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"            \u003cInsets /\u003e"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"         \u003c/opaqueInsets\u003e"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"         \u003cpadding\u003e"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"            \u003cInsets right\u003d\"10.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"         \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"144.0\" fitWidth\u003d\"153.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"JerardSoh":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"398.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        \u003cAnchorPane prefHeight\u003d\"179.0\" prefWidth\u003d\"190.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"JerardSoh":20}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class ParserTest {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    Parser p \u003d new Parser();"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public void testParse() throws DukeException {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"list\") instanceof PrintListCommand);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"todo run\") instanceof AddCommand);"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"done 1\") instanceof DoneCommand);"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"deadline run /by 1999-12-19 23:24\") instanceof AddCommand);"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"event run /at 1999-12-19 23:21\") instanceof AddCommand);"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"bye\") instanceof ExitCommand);"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"asd\");"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        } catch (Exception e) {"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"            assertEquals(\"Sorry, I don\u0027t know what that means...\", e.getMessage());"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"todo\");"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"deadline\");"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"event\");"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        } catch (Exception e) {"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"            assertEquals(\"Sorry, nothing was written after the command so I am unable to process...\", e.getMessage());"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":32}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class TaskListTest {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    private final TaskList taskListTest \u003d new TaskList();"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    public void testAddTask() {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        Task t \u003d new ToDo(\"run\");"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(\"run\"));"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(t.toString(), taskListTest.getList().get(0).toString());"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    public void testDeleteTask() throws InvalidDescriptionException {"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(\"run\"));"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.deleteTask(0);"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(0, taskListTest.getList().size());"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    public void testMarkTask() throws DukeException {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(\"run\"));"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.markTask(0);"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(\"\\u2713\", taskListTest.getList().get(0).getStatusIcon());"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"delete 3"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"bye"}],"authorContributionMap":{"JerardSoh":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"javac  -cp C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java -Xlint:none -d C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\bin C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"java -classpath C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"pause"}],"authorContributionMap":{"-":19,"JerardSoh":4}}]
