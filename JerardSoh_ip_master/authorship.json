[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"-":22,"JerardSoh":1}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"    id \"com.github.johnrengelman.shadow\" version \"6.1.0\""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"group \u0027org.example\u0027"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"version \u00271.0-SNAPSHOT\u0027"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"repositories {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    mavenCentral()"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"test {"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    useJUnitPlatform()"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"run {"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    standardInput \u003d System.in"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"jar {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    manifest {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        attributes \"Main-Class\": \"timmy\""},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"application {"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    mainClassName \u003d \u0027timmy.Launcher\u0027"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"dependencies {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    implementation \u0027junit:junit:4.12\u0027"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.7.0\u0027"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.6.0\u0027"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine\u0027"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"version \u003d \u00271.2.1\u0027"}],"authorContributionMap":{"JerardSoh":54}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"## Introduction"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"**Duke** is a jar application to track a user\u0027s tasks in a list format. \u003cbr\u003e "},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"It is a CLI application that requires the download of [Java SE 11](https://www.oracle.com/java/technologies/javase-jdk11-downloads.html)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"### Feature `todo` "},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"Add a todo task to your list"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"#### Usage - `todo \u003cpriority\u003e \u003cname\u003e`"},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"Example of usage: "},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"`todo H run` "},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"Expected outcome:"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"`Ok! I\u0027ve added this task:` \u003cbr\u003e"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"`[T][X][H] run` \u003cbr\u003e"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"`Currently, you have 1 task(s) in the list!` \u003cbr\u003e"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"### Feature `event` "},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"Add a event task to your list"},{"lineNumber":27,"author":{"gitId":"-"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"#### Usage - `event \u003cpriority\u003e \u003cname\u003e /at \u003cyyyy-mm-dd\u003e \u003chh:mm\u003e`"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"`event M walk /at 2021-03-12 12:12` "},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"`Ok! I\u0027ve added this task:` \u003cbr\u003e"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"`[E][X][M] walk (at: Mar 12 2021 12:12 PM)` \u003cbr\u003e"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"`Currently, you have 1 task(s) in the list!` \u003cbr\u003e"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"### Feature `deadline` "},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"Add a deadline task to your list"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"#### Usage - `deadline \u003cpriority\u003e \u003cname\u003e /by \u003cyyyy-mm-dd\u003e \u003chh:mm\u003e`"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"`deadline L walk /by 2021-03-12 12:12` "},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"Expected outcome:"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"`Ok! I\u0027ve added this task:` \u003cbr\u003e"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"`[D][X][L] walk (by: Mar 12 2021 12:12 PM)` \u003cbr\u003e"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"`Currently, you have 1 task(s) in the list!` \u003cbr\u003e"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"### Feature `list` "},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"Views the list of tasks."},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"#### Usage - `list`"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"Example of usage:"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"`list` "},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"Expected outcome:"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"`Here are the tasks in your list:` \u003cbr\u003e"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"`1.[D][X][L] walk (by: Mar 12 2021 12:12 PM)` \u003cbr\u003e"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"### Feature `delete` "},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"Deletes a task from your task list."},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"#### Usage - `delete \u003cindex\u003e`"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"Example of usage:"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"`delete 1` "},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"Expected outcome:"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"`Ok! I\u0027ve removed this task:` \u003cbr\u003e"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"`[E][X][M] walk (by: Mar 12 2021 12:12 PM)` \u003cbr\u003e"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"`Currently, you have 0 task(s) in the list!` \u003cbr\u003e"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"### Feature `done` "},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"Marks a task as done in your task list."},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"#### Usage - `done \u003cindex\u003e`"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"Example of usage:"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"`done 1` "},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"Expected outcome:"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"`Nice! I\u0027ve marked this task as done:` \u003cbr\u003e"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"`[E][O][M] walk (by: Mar 12 2021 12:12 PM)` \u003cbr\u003e"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"### Feature `find` "},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"finds tasks in your tasklist with the relevant keyword."},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"#### Usage - `find \u003ckeyword\u003e`"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"Example of usage:"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"`find walk` "},{"lineNumber":111,"author":{"gitId":"-"},"content":""},{"lineNumber":112,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"`Here are the tasks in your list:` \u003cbr\u003e"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"`1.[E][O][M] walk (by: Mar 12 2021 12:12 PM)` \u003cbr\u003e"},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"## Command Summary"},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"Action | Format"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"-------|-------"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":"Add todo | todo \u003cpriority\u003e \u003cname\u003e"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"Add event | event \u003cpriority\u003e \u003cname\u003e /at \u003cyyyy-mm-dd\u003e \u003chh:mm\u003e"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":"Add deadline | deadline \u003cpriority\u003e \u003cname\u003e /by \u003cyyyy-mm-dd\u003e \u003chh:mm\u003e"},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"List tasks | list"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"Delete task | delete \u003cindex\u003e"},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"Mark task as done | done \u003cindex\u003e"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"Find task using keyword | find \u003ckeyword"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":"priority - takes in H, M or L characters \u003cbr\u003e"},{"lineNumber":130,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":"keyword/name - takes in String \u003cbr\u003e"},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":133,"author":{"gitId":"JerardSoh"},"content":"index - takes in Integer \u003cbr\u003e"},{"lineNumber":134,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":135,"author":{"gitId":"JerardSoh"},"content":"hh:mm - takes in time in 24 hours (e.g 23:30) \u003cbr\u003e"},{"lineNumber":136,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":137,"author":{"gitId":"JerardSoh"},"content":"yyyy-mm-dd - takes in date (e.g 2021-12-12) \u003cbr\u003e"}],"authorContributionMap":{"-":22,"JerardSoh":115}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto execute"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"if exist \"%JAVA_EXE%\" goto execute"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":":execute"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"@rem Setup the command line"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"@rem Execute Gradle"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %*"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":":end"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":":fail"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"exit /b 1"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":":mainEnd"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":":omega"}],"authorContributionMap":{"JerardSoh":89}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"rootProject.name \u003d \u0027ip\u0027"}],"authorContributionMap":{"JerardSoh":1}},{"path":"src/main/java/timmy/Commands/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Commands;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Storage;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.TaskList;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import timmy.Ui;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" * A command that represents adding a \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e into a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"public class AddCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    Task task;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    public AddCommand(Task task) {"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        this.task \u003d task;"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * Executes the adding command and adds the task to the TaskList."},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eDuke.Ui\u003c/code\u003e prints the task added"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * and the storage stores the task into the text file."},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList contains the task list and operations to manipulate the list"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interactions with the user"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of a message for added task"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws IOException {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        String message;"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        taskList.addTask(task);"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        message \u003d ui.showAddTask(taskList);"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(taskList);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":40}},{"path":"src/main/java/timmy/Commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Commands;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.Storage;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.TaskList;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import timmy.Ui;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" * An abstract class that represents all commands."},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList tasklist, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        return \"\";"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    public boolean isExit() {"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        return false;"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":22}},{"path":"src/main/java/timmy/Commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Commands;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.Storage;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.TaskList;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import timmy.Ui;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" * A command that represents deleting a \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e from a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    int taskIndex;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public DeleteCommand(int taskIndex) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * Executes the delete command and removes the task from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eDuke.Ui\u003c/code\u003e prints the task deleted."},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eDuke.Storage\u003c/code\u003e helps the task to be deleted from the text file."},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList contains the task list and operations to manipulate the list"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interactions with the user"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of deleted task"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException   is thrown when there is an error related to input and output"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        String message;"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        message \u003d ui.showDeleteTask(taskList, taskIndex);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        taskList.deleteTask(taskIndex);"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(taskList);"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":42}},{"path":"src/main/java/timmy/Commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Commands;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.Storage;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.TaskList;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import timmy.Ui;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" * A command that represents marking a \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e in a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"public class DoneCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    int taskIndex;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public DoneCommand(int taskIndex) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * Executes the done command and marks the task as done from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eDuke.Ui\u003c/code\u003e prints the task marked."},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eDuke.Storage\u003c/code\u003e helps to mark the task in the text file."},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList contains the task list and operations to manipulate the list"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interactions with the user"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of done message"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException   is thrown when there is an error related to input and output"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        String message;"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        taskList.markTask(taskIndex);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        message \u003d ui.showMarkTask(taskList.getList().get(taskIndex));"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(taskList);"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":42}},{"path":"src/main/java/timmy/Commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Commands;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A command that represents exiting the program"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class ExitCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    boolean isExit;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public ExitCommand() {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.isExit \u003d true;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Indicates that the program is at the exit"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * @return a boolean that is true when Exit Duke.Duke.Commands.Command is created"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    public boolean isExit() {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        return isExit;"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":24}},{"path":"src/main/java/timmy/Commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Commands;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Storage;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.TaskList;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import timmy.Ui;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" * A subclass of the \u003ccode\u003eDuke.Duke.Commands.Command\u003c/code\u003eclass that represents a command to find a keyword the the ArrayList"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"public class FindCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    String keyWord;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public FindCommand(String keyWord) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        this.keyWord \u003d keyWord;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * Executes the find command and finds the \u003ccode\u003eTasks\u003c/code\u003e that matches the keyword from the \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * Uses \u003ccode\u003eDuke.Ui\u003c/code\u003e to print the \u003ccode\u003eTaskList\u003c/code\u003e of the matching keyword \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList contains the task list and operations to manipulate the list"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     * @param ui       deals with interaction with the user"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     * @param storage  deals with loading tasks from a file and saving into it"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of found tasks"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e matchingArrayList \u003d taskList.findTask(this.keyWord);"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        TaskList matchingList \u003d new TaskList(matchingArrayList);"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        return ui.printList(matchingList);"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""}],"authorContributionMap":{"JerardSoh":38}},{"path":"src/main/java/timmy/Commands/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Commands;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Storage;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.TaskList;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.Ui;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":" * A command that represents printing the \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"public class PrintListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    public PrintListCommand() {"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public String execute(TaskList tasklist, Ui ui, Storage storage) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        return ui.printList(tasklist);"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":20}},{"path":"src/main/java/timmy/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"import java.util.Collections;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":" * An example of a custom control using FXML."},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":" * containing text from the speaker."},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"public class DialogBox extends HBox {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    private Label dialog;"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    private ImageView displayPicture;"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"            fxmlLoader.load();"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"            e.printStackTrace();"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"        dialog.setText(text);"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"        displayPicture.setImage(img);"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        return new DialogBox(text, img);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        db.flip();"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        return db;"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    private void flip() {"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"        Collections.reverse(tmp);"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":62}},{"path":"src/main/java/timmy/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Commands.Command;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    private final Ui ui;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    private final Parser parser;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    boolean isExit \u003d false;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    private TaskList tasklist;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    private String message \u003d \"\";"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public Duke(String filePath) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"            this.storage \u003d new Storage(filePath);"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"            tasklist \u003d new TaskList(storage.load());"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"            ui.showLoadingError();"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"            tasklist \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     * Runs the program"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    public void run(String fullCommand) {"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        String pendingMessage;"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"            Command c \u003d parser.parse(fullCommand);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"            pendingMessage \u003d c.execute(tasklist, ui, storage);"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"            message \u003d pendingMessage;"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"            isExit \u003d c.isExit();"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"            message \u003d ui.showLoadingError();"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"        } catch (DukeException | RuntimeException e) {"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"            message \u003d ui.showError(e.getMessage());"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"    public String getMessage() {"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    public String welcomeMessage() {"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        return  ui.showWelcome();"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":2,"JerardSoh":52}},{"path":"src/main/java/timmy/Exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Exceptions;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Exception for exceptions related to Duke.Duke"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":11}},{"path":"src/main/java/timmy/Exceptions/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Exceptions;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke.Duke exception for empty description after a command"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class EmptyDescriptionException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    public EmptyDescriptionException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":11}},{"path":"src/main/java/timmy/Exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Exceptions;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke.Duke exception for an invalid command given"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    public InvalidCommandException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":11}},{"path":"src/main/java/timmy/Exceptions/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Exceptions;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke.Duke exception for an invalid description given"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class InvalidDescriptionException extends DukeException {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    public InvalidDescriptionException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":11}},{"path":"src/main/java/timmy/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":12}},{"path":"src/main/java/timmy/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" * A GUI for Duke.Duke using FXML."},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"            stage.show();"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"            e.printStackTrace();"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":28}},{"path":"src/main/java/timmy/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" * Controller for Duke.MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        duke \u003d new Duke(\"taskList.txt\");"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        String response \u003d duke.welcomeMessage();"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        );"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke.Duke\u0027s reply and then appends them to"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"    private void handleUserInput() {"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"        duke.run(input);"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"        String response \u003d duke.getMessage();"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"                DialogBox.getUserDialog(input, userImage)"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        );"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        userInput.clear();"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":57}},{"path":"src/main/java/timmy/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Commands.*;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.EmptyDescriptionException;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.InvalidCommandException;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.InvalidDescriptionException;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Deadline;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Event;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Priority;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.ToDo;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"import java.time.LocalDate;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"import java.time.LocalTime;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":" * Takes in user input and makes sense of it for the program"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"public class Parser {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    public Parser() {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     * Checks whether the command is invalid"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * @param taskType the first word of the input."},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidCommandException is thrown when there is an error related to unknown command"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    void invalidCommandChecker(String taskType) throws InvalidCommandException {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        boolean isATask \u003d taskType.equals(\"todo\") || taskType.equals(\"deadline\") || taskType.equals(\"event\");"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        boolean isACommand \u003d taskType.equals(\"done\") || taskType.equals(\"list\")"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"                || taskType.equals(\"delete\") || taskType.equals(\"find\");"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        if (!(isATask || isACommand)) {"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidCommandException(\"Sorry, I don\u0027t know what that means...\");"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"     * Checks whether the command has an empty description"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"     * @param tokens specifies an array of the user input"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"     * @throws EmptyDescriptionException is thrown when there is an error related to an empty description after a command"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    void emptyDescriptionChecker(String[] tokens) throws EmptyDescriptionException {"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        if (tokens.length \u003c 2) {"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"            throw new EmptyDescriptionException(\"Sorry, nothing was written after the command so I am unable to process...\");"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"     * Converts the date to a suitable format so that the program is able to understand"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"     * @param date Date in the format of yyyy-mm-dd"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the date in (MMM d yyyy) format in String"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    public String parseDate(String date) {"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"        LocalDate d1 \u003d LocalDate.parse(date);"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"        return d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"     * Converts the time to a suitable format so that the program is able to understand"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     * @param time time in the format of (hh:mm) in 24 hour time"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the time in (hh:mm a) format in String"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"    public String parseTime(String time) {"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"        return LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HH:mm\"))"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"                .format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"     * Makes sense of the command given in string for the program to be able to take action"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"     * @param fullCommand the entire string of the user input"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns a \u003ccode\u003eDuke.Duke.Commands.Command\u003c/code\u003e that specifies what the user is asking the program to do"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"    public Command parse(String fullCommand) throws DukeException {"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        String[] tokens \u003d fullCommand.split(\" \", 2);"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"        assert tokens.length \u003e 0;"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"        String taskType \u003d tokens[0];"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"        invalidCommandChecker(taskType);"},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"        return getCommandType(tokens, taskType);"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"     * Returns a command after making sense of the String array of tokens"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"     * @param tokens   String array that represents the full command"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"     * @param taskType Part of the command"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"     * @return A command that represents the string array of tokens"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"     * @throws EmptyDescriptionException   An exception that occurs when there is an empty description"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidDescriptionException An exception that occurs when there is an invalid description"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidCommandException     An exception that occurs when there is an invalid command"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"    private Command getCommandType(String[] tokens, String taskType) throws EmptyDescriptionException,"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"            InvalidDescriptionException, InvalidCommandException {"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"        switch (taskType) {"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"        case \"list\": {"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"            return new PrintListCommand();"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"        case \"done\": {"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"            int taskIndex \u003d getTaskIndex(tokens[1]);"},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"            return new DoneCommand(taskIndex);"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"        case \"delete\": {"},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"            int taskIndex \u003d getTaskIndex(tokens[1]);"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"            return new DeleteCommand(taskIndex);"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":"        case \"todo\": {"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"            String[] nextTaskInfo \u003d getTaskInfo(tokens[1]);"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"            switch (nextTaskInfo[0]) {"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"            case \"H\":"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":"                return new AddCommand(new ToDo(Priority.HIGH, nextTaskInfo[1]));"},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":"            case \"M\":"},{"lineNumber":130,"author":{"gitId":"JerardSoh"},"content":"                return new AddCommand(new ToDo(Priority.MEDIUM, nextTaskInfo[1]));"},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":"            case \"L\":"},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":"                return new AddCommand(new ToDo(Priority.LOW, nextTaskInfo[1]));"},{"lineNumber":133,"author":{"gitId":"JerardSoh"},"content":"            default:"},{"lineNumber":134,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":135,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":136,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"JerardSoh"},"content":"        case \"deadline\": {"},{"lineNumber":138,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":139,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":140,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":141,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":142,"author":{"gitId":"JerardSoh"},"content":"            if (!(taskInfo.contains(\"/by\"))) {"},{"lineNumber":143,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":144,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":146,"author":{"gitId":"JerardSoh"},"content":"            String[] nextTaskInfo \u003d tokens[1].split(\" \", 2);"},{"lineNumber":147,"author":{"gitId":"JerardSoh"},"content":"            Priority priority \u003d Priority.NONE;"},{"lineNumber":148,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":149,"author":{"gitId":"JerardSoh"},"content":"            if (!(nextTaskInfo[0].equals(\"H\") || nextTaskInfo[0].equals(\"M\") || nextTaskInfo[0].equals(\"L\"))) {"},{"lineNumber":150,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, invalid priority!\");"},{"lineNumber":151,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":153,"author":{"gitId":"JerardSoh"},"content":"            priority \u003d getPriority(nextTaskInfo, priority);"},{"lineNumber":154,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":155,"author":{"gitId":"JerardSoh"},"content":"            String[] taskInfoArr \u003d nextTaskInfo[1].split(\" /by \", 2);"},{"lineNumber":156,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":157,"author":{"gitId":"JerardSoh"},"content":"            if (taskInfoArr.length \u003c 2) {"},{"lineNumber":158,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":159,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":161,"author":{"gitId":"JerardSoh"},"content":"            String by \u003d getDate(taskInfoArr[1]);"},{"lineNumber":162,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":163,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new Deadline(priority, taskInfoArr[0], by));"},{"lineNumber":164,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":165,"author":{"gitId":"JerardSoh"},"content":"        case \"event\": {"},{"lineNumber":166,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":167,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":168,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":169,"author":{"gitId":"JerardSoh"},"content":"            String[] nextTaskInfo \u003d taskInfo.split(\" \", 2);"},{"lineNumber":170,"author":{"gitId":"JerardSoh"},"content":"            Priority priority \u003d Priority.NONE;"},{"lineNumber":171,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":172,"author":{"gitId":"JerardSoh"},"content":"            if (!(nextTaskInfo[0].equals(\"H\") || nextTaskInfo[0].equals(\"M\") || nextTaskInfo[0].equals(\"L\"))) {"},{"lineNumber":173,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, invalid priority!\");"},{"lineNumber":174,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":175,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":176,"author":{"gitId":"JerardSoh"},"content":"            priority \u003d getPriority(nextTaskInfo, priority);"},{"lineNumber":177,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":178,"author":{"gitId":"JerardSoh"},"content":"            if (!(taskInfo.contains(\"/at\"))) {"},{"lineNumber":179,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":180,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":182,"author":{"gitId":"JerardSoh"},"content":"            String[] taskInfoArr \u003d nextTaskInfo[1].split(\" /at \", 2);"},{"lineNumber":183,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":184,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":185,"author":{"gitId":"JerardSoh"},"content":"            if (taskInfoArr.length \u003c 2) {"},{"lineNumber":186,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":187,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":188,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":189,"author":{"gitId":"JerardSoh"},"content":"            String by \u003d getDate(taskInfoArr[1]);"},{"lineNumber":190,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":191,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new Event(priority, taskInfoArr[0], by));"},{"lineNumber":192,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"JerardSoh"},"content":"        case \"find\": {"},{"lineNumber":194,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":195,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":196,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":197,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":198,"author":{"gitId":"JerardSoh"},"content":"            return new FindCommand(taskInfo);"},{"lineNumber":199,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":200,"author":{"gitId":"JerardSoh"},"content":"        default: {"},{"lineNumber":201,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidCommandException(\"Sorry, I don\u0027t know what that means...\");"},{"lineNumber":202,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":203,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":204,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":206,"author":{"gitId":"JerardSoh"},"content":"    private Priority getPriority(String[] nextTaskInfo, Priority priority) {"},{"lineNumber":207,"author":{"gitId":"JerardSoh"},"content":"        switch (nextTaskInfo[0]) {"},{"lineNumber":208,"author":{"gitId":"JerardSoh"},"content":"        case \"H\":"},{"lineNumber":209,"author":{"gitId":"JerardSoh"},"content":"            priority \u003d Priority.HIGH;"},{"lineNumber":210,"author":{"gitId":"JerardSoh"},"content":"            break;"},{"lineNumber":211,"author":{"gitId":"JerardSoh"},"content":"        case \"M\":"},{"lineNumber":212,"author":{"gitId":"JerardSoh"},"content":"            priority \u003d Priority.MEDIUM;"},{"lineNumber":213,"author":{"gitId":"JerardSoh"},"content":"            break;"},{"lineNumber":214,"author":{"gitId":"JerardSoh"},"content":"        case \"L\":"},{"lineNumber":215,"author":{"gitId":"JerardSoh"},"content":"            priority \u003d Priority.LOW;"},{"lineNumber":216,"author":{"gitId":"JerardSoh"},"content":"            break;"},{"lineNumber":217,"author":{"gitId":"JerardSoh"},"content":"        default:"},{"lineNumber":218,"author":{"gitId":"JerardSoh"},"content":"            break;"},{"lineNumber":219,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"JerardSoh"},"content":"        return priority;"},{"lineNumber":221,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":223,"author":{"gitId":"JerardSoh"},"content":"    private String[] getTaskInfo(String token) throws InvalidDescriptionException {"},{"lineNumber":224,"author":{"gitId":"JerardSoh"},"content":"        String[] nextTaskInfo \u003d token.split(\" \", 2);"},{"lineNumber":225,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":226,"author":{"gitId":"JerardSoh"},"content":"        if (!(nextTaskInfo[0].equals(\"H\") || nextTaskInfo[0].equals(\"M\") || nextTaskInfo[0].equals(\"L\"))) {"},{"lineNumber":227,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidDescriptionException(\"Sorry, invalid priority!\");"},{"lineNumber":228,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":229,"author":{"gitId":"JerardSoh"},"content":"        return nextTaskInfo;"},{"lineNumber":230,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":232,"author":{"gitId":"JerardSoh"},"content":"    private String getDate(String s) {"},{"lineNumber":233,"author":{"gitId":"JerardSoh"},"content":"        String[] dateAndTime \u003d s.split(\" \");"},{"lineNumber":234,"author":{"gitId":"JerardSoh"},"content":"        String date \u003d parseDate(dateAndTime[0]);"},{"lineNumber":235,"author":{"gitId":"JerardSoh"},"content":"        String time \u003d parseTime(dateAndTime[1]);"},{"lineNumber":236,"author":{"gitId":"JerardSoh"},"content":"        return date + \" \" + time;"},{"lineNumber":237,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":239,"author":{"gitId":"JerardSoh"},"content":"    private int getTaskIndex(String taskInfo) {"},{"lineNumber":240,"author":{"gitId":"JerardSoh"},"content":"        return Integer.parseInt(taskInfo) - 1;"},{"lineNumber":241,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":242,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":242}},{"path":"src/main/java/timmy/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.*;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import java.io.FileWriter;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":" * Deals with loading tasks from a file and saving tasks to the file"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"public class Storage {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    String filePath;"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    ArrayList\u003cTask\u003e tasks;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    File myFile;"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    public Storage(String filePath) throws IOException {"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        this.myFile \u003d new File(filePath);"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        if (!myFile.createNewFile()) {"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"            scanTaskList();"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     * Scans the file and save the tasks into an ArrayList of Duke.Tasks.Task"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"     * @throws FileNotFoundException is thrown when there the file could not be found"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"    public void scanTaskList() throws FileNotFoundException {"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        Scanner sc \u003d new Scanner(myFile);"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"        while (sc.hasNext()) {"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"            Priority p \u003d getTaskPriority(input);"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"            Task task \u003d getTask(p, input);"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"            markTaskAsDone(input, task);"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"            tasks.add(task);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"     * Marks the task as done if the input contains [O]"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"     * @param input A string"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"     * @param task  Task to be marked as done"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    private void markTaskAsDone(String input, Task task) {"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        if (input.contains(\"[O]\")) {"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"            task.markAsDone();"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"     * Gets the Task Priority from the input string"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"     * @param input A string of task description"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"     * @return Priority Enum to determine the priority"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"    private Priority getTaskPriority(String input) {"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"        if (input.contains(\"[H]\")) {"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"            return Priority.HIGH;"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"        } else if (input.contains(\"M\")) {"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"            return Priority.MEDIUM;"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"        } else if (input.contains(\"L\")) {"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"            return Priority.LOW;"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        } else {"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"            return Priority.NONE;"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"     * Gets the Task as represented from the input"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"     * @param input A string of task description"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"     * @return Task that is represented from the string"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"    private Task getTask(Priority priority, String input) {"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"        Task task;"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"        if (input.contains(\"[T]\")) {"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"            String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"            task \u003d new ToDo(priority, taskInfo);"},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"        } else if (input.contains(\"[D]\")) {"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"            String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"            String[] nextTokens \u003d tokens[1].split(\" \", 2);"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"            String date \u003d nextTokens[1].substring(nextTokens[1].indexOf(\u0027:\u0027) + 2, nextTokens[1].indexOf(\u0027)\u0027));"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"            task \u003d new Deadline(priority, nextTokens[0], date);"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"        } else {"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"            String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"            String[] nextTokens \u003d tokens[1].split(\" \", 2);"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"            String date \u003d nextTokens[1].substring(nextTokens[1].indexOf(\u0027:\u0027) + 2, nextTokens[1].indexOf(\u0027)\u0027));"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"            task \u003d new Event(priority, nextTokens[0], date);"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"        return task;"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"     * Stores the \u003ccode\u003eTaskList\u003c/code\u003e into a file"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList A class that stores the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"    public void writeToFile(TaskList taskList) throws IOException {"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getList();"},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"        assert tasks.size() \u003e 0;"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":"        for (Task t : tasks) {"},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"            fw.write(t + \"\\n\");"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"        fw.close();"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"     * Loads the ArrayList"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the ArrayList of \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e load() {"},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":"        return tasks;"},{"lineNumber":130,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":132}},{"path":"src/main/java/timmy/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.InvalidDescriptionException;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" * Contains the task list which is an ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"public class TaskList {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    ArrayList\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    public TaskList() {"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"     * Removes the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e by specifying the index from the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the task index in the ArrayList \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidDescriptionException is thrown when there is an error related to an invalid description"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    public void deleteTask(int taskIndex) throws InvalidDescriptionException {"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        assert taskIndex \u003e\u003d 0;"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        if (taskIndex \u003e\u003d tasks.size()) {"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"        tasks.remove(taskIndex);"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     * Marks the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e as done"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the task index in the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"    public void markTask(int taskIndex) throws DukeException {"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        assert taskIndex \u003e\u003d 0;"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        if (taskIndex \u003e\u003d tasks.size()) {"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        tasks.get(taskIndex).markAsDone();"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"     * Gets the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the stored ArrayList"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"        return tasks;"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"     * Adds the task to the ArrayList"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"     * @param task represents the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e to be added"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"    public void addTask(Task task) {"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"        tasks.add(task);"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"     * Finds \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e in the ArrayList that contains the matching word"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"     * @param keyWord indicates the word to find"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"     * @return an ArrayList that contains the \u003ccode\u003eTasks\u003c/code\u003e that has the keyword"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e findTask(String keyWord) {"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e matchingWords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        for (Task t : tasks) {"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"            if (t.toString().contains(keyWord)) {"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"                matchingWords.add(t);"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"        return matchingWords;"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":92}},{"path":"src/main/java/timmy/Tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Tasks;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of task that has an extra variable to keep track of date and overrides toString() method of"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" * \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    protected String by;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public Deadline(Priority priority, String description, String by) {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        super(priority, description);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        this.by \u003d by;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":20}},{"path":"src/main/java/timmy/Tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Tasks;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003ethat has an extra variable to keep track of date and overrides toString() method of"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" * \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    protected String at;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public Event(Priority priority, String description, String at) {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        super(priority, description);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        this.at \u003d at;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":20}},{"path":"src/main/java/timmy/Tasks/Priority.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Tasks;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"public enum Priority {"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"    HIGH, MEDIUM, LOW, NONE"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":5}},{"path":"src/main/java/timmy/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Tasks;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * Represents the tasks that the user has input into the program. The task has a description and a boolean to"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" * indicate that it is completed"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"public class Task {"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    protected String description;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    protected boolean isDone;"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    protected Priority priority;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    public Task(Priority priority, String description) {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        this.priority \u003d priority;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * Gets the status of the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e\u003e to determine if it is done."},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @return a String of a Tick symbol if it is done and a Cross symbol if it is not"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        return (isDone ? \"O\" : \"X\"); //return Y or X symbols"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * Marks the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e as done"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    public void markAsDone() {"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"     * Gets the priority of the Task"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"     * @return A string of a letter either H, M or L that represents the priority. X if no priority"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"    public String getPriority() {"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"        switch (priority) {"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"        case LOW:"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"            return \"L\";"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        case MEDIUM:"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"            return \"M\";"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"        case HIGH:"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"            return \"H\";"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        default:"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"            return \"X\";"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        return \"[\" + this.getStatusIcon() + \"]\" + \"[\" + this.getPriority() + \"] \" + this.description;"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":57}},{"path":"src/main/java/timmy/Tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy.Tasks;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke.Tasks.Task that has a description and overrides the toString() method of \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    public ToDo(Priority priority, String description) {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        super(priority, description);"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":16}},{"path":"src/main/java/timmy/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"package timmy;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Task;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":" * Deals with interactions with the user"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    Scanner sc;"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public Ui() {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * To output a line that consists of -"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of -"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    public String showLine() {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        return \"----------------------------------------------\";"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * To output an error message"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     * @param message the error message in String"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     * @return String message"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"    public String showError(String message) {"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        return message;"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"     * To indicate that the file is unable to be loaded"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     * @return String that states unable to load file"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    public String showLoadingError() {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        return \"Unable to load file!\";"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"     * To output a welcome message"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"     * @return String of welcome message"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    public String showWelcome() {"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"        String introductionMessage \u003d \"Hi! I\u0027m Timmy!\\nWhat can Timmy note down for you today?\";"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        String displayFormatMessage \u003d \"\\nPlease type in any of these format!\";"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        String displayToDoFormat \u003d \"\\ntodo [priority][title]\";"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"        String displayEventFormat \u003d \"\\nevent [priority][title] /at [yyyy-mm-dd] [HH:MM]\";"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        String displayDeadlineFormat \u003d \"\\ndeadline [priority][title] /by [yyyy-mm-dd] [HH:MM]\";"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"        String displayListFormat \u003d \"\\nlist\";"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"        String displayDeleteFormat \u003d \"\\ndelete [index]\";"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"        String displayDoneFormat \u003d \"\\ndone [index]\";"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"        return introductionMessage + displayFormatMessage + displayToDoFormat"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"                + displayEventFormat + displayDeadlineFormat"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"                + displayListFormat + displayDeleteFormat + displayDoneFormat;"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"     * To output the \u003ccode\u003eTasks\u003c/code\u003e in a TaskList"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList stores the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e in an ArrayList"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"     * @return String to consists of \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e in an ArrayList"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"    public String printList(TaskList taskList) {"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        StringBuilder listStringBuilder \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d taskList.getList();"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        for (int j \u003d 0; j \u003c tasks.size(); j++) {"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"            listStringBuilder.append(j + 1).append(\".\").append(tasks.get(j).toString()).append(\"\\n\");"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"        assert listStringBuilder.length() \u003e 0;"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"        return listStringBuilder.toString();"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"     * To output a message to indicate that the task is marked"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"     * @param task the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e\u003e to be marked"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"     * @return String that indicates the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e\u003e to be marked"},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"    public String showMarkTask(Task task) {"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + task.toString();"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"     * To output a message to indicate that the task is deleted"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList  stores the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e in an ArrayList"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e index in the ArrayList"},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of deleted tasks"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"    public String showDeleteTask(TaskList taskList, int taskIndex) {"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"        int size \u003d list.size();"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"        String taskName \u003d list.get(taskIndex).toString();"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"        String displayTaskName \u003d \"Ok! I\u0027ve removed this task:\\n\" + taskName + \"\\n\";"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"        String displayLeftoverTasks \u003d \"Currently, you have \" + (size - 1) + \" task(s) in the list!\";"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"        return displayTaskName + displayLeftoverTasks;"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":"     * To output the added \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e to the ArrayList"},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"     * @param taskList stores the \u003ccode\u003eDuke.Tasks.Task\u003c/code\u003e in an ArrayList"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"     * @return String that consists of the task added"},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"    public String showAddTask(TaskList taskList) {"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e list \u003d taskList.getList();"},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"        int size \u003d list.size();"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"        String taskName \u003d list.get(size - 1).toString();"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":"        String displayTaskName \u003d \"Ok! I\u0027ve added this task:\\n\" + taskName;"},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"        String displayLeftoverTasks \u003d \"\\nCurrently, you have \" + size + \" task(s) in the list!\";"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":"        return displayTaskName + displayLeftoverTasks;"},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":125}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        \u003cLabel fx:id\u003d\"dialog\" alignment\u003d\"CENTER\" style\u003d\"-fx-background-image: url(\u0026quot;\\Downloads\\TextBox.png\u0026quot;);\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"         \u003copaqueInsets\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"            \u003cInsets /\u003e"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"         \u003c/opaqueInsets\u003e"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"         \u003cpadding\u003e"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"10.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"         \u003c/padding\u003e"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"      \u003c/Label\u003e"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"80.0\" fitWidth\u003d\"86.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"            \u003cInsets bottom\u003d\"110.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    \u003c/children\u003e"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    \u003cpadding\u003e"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    \u003c/padding\u003e"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"JerardSoh":26}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"timmy.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"398.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        \u003cAnchorPane prefHeight\u003d\"179.0\" prefWidth\u003d\"190.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"JerardSoh":20}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import timmy.Commands.*;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.Parser;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Assertions;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    Parser p \u003d new Parser();"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    public void testParse() throws DukeException {"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"list\") instanceof PrintListCommand);"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"todo H run\") instanceof AddCommand);"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"done 1\") instanceof DoneCommand);"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"deadline L run /by 1999-12-19 23:24\") instanceof AddCommand);"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        Assertions.assertTrue(p.parse(\"event M run /at 1999-12-19 23:21\") instanceof AddCommand);"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"asd\");"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        } catch (Exception e) {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"            assertEquals(\"Sorry, I don\u0027t know what that means...\", e.getMessage());"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"todo\");"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"deadline\");"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"event\");"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        } catch (Exception e) {"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"            assertEquals(\"Sorry, nothing was written after the command so I am unable to process...\", e.getMessage());"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":34}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.DukeException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import timmy.Exceptions.InvalidDescriptionException;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import timmy.TaskList;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Priority;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.Task;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import timmy.Tasks.ToDo;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"public class TaskListTest {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    private final TaskList taskListTest \u003d new TaskList();"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public void testAddTask() {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        Task t \u003d new ToDo(Priority.LOW, \"run\");"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(Priority.LOW, \"run\"));"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(t.toString(), taskListTest.getList().get(0).toString());"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    public void testDeleteTask() throws InvalidDescriptionException {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(Priority.HIGH, \"run\"));"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.deleteTask(0);"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(0, taskListTest.getList().size());"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    public void testMarkTask() throws DukeException {"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(Priority.LOW, \"run\"));"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.markTask(0);"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(\"O\", taskListTest.getList().get(0).getStatusIcon());"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":34}},{"path":"taskList.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"[T][X][H] run"}],"authorContributionMap":{"JerardSoh":1}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"delete 3"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"bye"}],"authorContributionMap":{"JerardSoh":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"javac  -cp C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java -Xlint:none -d C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\bin C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"java -classpath C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"pause"}],"authorContributionMap":{"-":19,"JerardSoh":4}}]
