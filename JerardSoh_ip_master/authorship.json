[{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A command that represents adding a \u003ccode\u003eTask\u003c/code\u003e into a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class AddCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    Task task;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public AddCommand(Task task) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.task \u003d task;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Executes the adding command and adds the task to the TaskList."},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eUi\u003c/code\u003e prints the task added"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * and the storage stores the task into the text file."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param ui deals with interactions with the user"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param storage deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws IOException {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        tasklist.addTask(task);"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        ui.showAddTask(tasklist);"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(tasklist);"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":29}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * An abstract class that represents all commands"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    void execute(TaskList tasklist, Ui ui, Storage storage) throws IOException, DukeException {}"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public boolean isExit(){"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        return false;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":13}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of task that has an extra variable to keep track of date and overrides toString() method of"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" * \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    protected String by;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.by \u003d by;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":18}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A command that represents deleting a \u003ccode\u003eTask\u003c/code\u003e from a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class DeleteCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    int taskIndex;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public DeleteCommand(int taskIndex) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Executes the delete command and removes the task from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eUi\u003c/code\u003e prints the task deleted."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eStorage\u003c/code\u003e helps the task to be deleted from the text file."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param ui deals with interactions with the user"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param storage deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        ui.showDeleteTask(tasklist, taskIndex);"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        tasklist.deleteTask(taskIndex);"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(tasklist);"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":30}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A command that represents marking a \u003ccode\u003eTask\u003c/code\u003e in a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class DoneCommand extends Command{"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    int taskIndex;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public DoneCommand(int taskIndex) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Executes the done command and marks the task as done from the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eUi\u003c/code\u003e prints the task marked."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * \u003ccode\u003eStorage\u003c/code\u003e helps to mark the task in the text file."},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param ui deals with interactions with the user"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param storage deals with loading tasks from the file and saving tasks in the file"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws IOException, DukeException {"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        tasklist.markTask(taskIndex);"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        ui.showMarkTask(tasklist.getList().get(taskIndex));"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        storage.writeToFile(tasklist);"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":30}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"    private Storage storage;"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    private TaskList tasklist;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    private final Ui ui;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    private final Parser parser;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public Duke(String filePath) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"            this.storage \u003d new Storage(filePath);"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"            tasklist \u003d new TaskList(storage.load());"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        } catch (IOException e) {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"            ui.showLoadingError();"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"            tasklist \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * Runs the program"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    public void run() {"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        ui.showLine();"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        ui.showWelcome();"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        ui.showLine();"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"        boolean isExit \u003d false;"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        while (!isExit) {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"            try {"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"                ui.showLine();"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"                Command c \u003d parser.parse(fullCommand);"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"                c.execute(tasklist, ui, storage);"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"                isExit \u003d c.isExit();"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"            } catch (IOException e){"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"                ui.showLoadingError();"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"            } catch (DukeException | RuntimeException e) {"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"            } finally {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"                ui.showLine();"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"        ui.showExit();"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        ui.showLine();"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"        new Duke(\"src\\\\main\\\\java\\\\taskList.txt\").run();"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":4,"JerardSoh":51}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Exception for exceptions related to Duke"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class DukeException extends Exception{"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public DukeException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke exception for empty description after a command"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class EmptyDescriptionException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public EmptyDescriptionException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of \u003ccode\u003eTask\u003c/code\u003ethat has an extra variable to keep track of date and overrides toString() method of"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" * \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    protected String at;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    public Event(String description, String at) {"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.at \u003d at;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":18}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A command that represents exiting the program"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class ExitCommand extends Command{"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    boolean isExit;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    public ExitCommand(){"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"        this.isExit \u003d true;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"     * Indicates that the program is at the exit"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"     * @return a boolean that is true when Exit Command is created"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        return isExit;"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":21}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * A subclass of the \u003ccode\u003eCommand\u003c/code\u003eclass that represents a command to find a keyword the the ArrayList"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class FindCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    String keyWord;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public FindCommand(String keyWord) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.keyWord \u003d keyWord;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Executes the find command and finds the \u003ccode\u003eTasks\u003c/code\u003e that matches the keyword from the \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * Uses \u003ccode\u003eUi\u003c/code\u003e to print the \u003ccode\u003eTaskList\u003c/code\u003e of the matching keyword \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist contains the task list and operations to manipulate the list"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     * @param ui deals with interaction with the user"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * @param storage deals with loading tasks from a file and saving into it"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e matchingArrayList \u003d tasklist.findTask(this.keyWord);"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        TaskList matchingList \u003d new TaskList(matchingArrayList);"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        ui.printList(matchingList);"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"}"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":""}],"authorContributionMap":{"JerardSoh":28}},{"path":"src/main/java/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke exception for an invalid command given"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class InvalidCommandException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public InvalidCommandException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Duke exception for an invalid description given"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class InvalidDescriptionException extends DukeException {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public InvalidDescriptionException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":9}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" * Takes in user input and makes sense of it for the program"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public Parser() {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"     * Checks whether the command is invalid"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * @param taskType the first word of the input"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidCommandException is thrown when there is an error related to unknown command"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    void invalidCommandChecker(String taskType) throws InvalidCommandException {"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        if (!(taskType.equals(\"todo\") || taskType.equals(\"done\") || taskType.equals(\"list\") || taskType.equals(\"event\")"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"                || taskType.equals(\"deadline\") || taskType.equals(\"delete\") || taskType.equals(\"bye\")"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"                || taskType.equals(\"find\"))) {"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidCommandException(\"Sorry, I don\u0027t know what that means...\");"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"     * Checks whether the command has an empty description"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * @param tokens specifies an array of the user input"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     * @throws EmptyDescriptionException  is thrown when there is an error related to an empty description after a command"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    void emptyDescriptionChecker(String[] tokens) throws EmptyDescriptionException {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        if (tokens.length \u003c 2) {"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"            throw new EmptyDescriptionException(\"Sorry, nothing was written after the command so I am unable to process...\");"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"     * Converts the date to a suitable format so that the program is able to understand"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"     * @param date Date in the format of yyyy-mm-dd"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the date in (MMM d yyyy) format in String"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    public String parseDate(String date) {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"        LocalDate d1 \u003d LocalDate.parse(date);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"        return d1.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"     * Converts the time to a suitable format so that the program is able to understand"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"     * @param time time in the format of (hh:mm) in 24 hour time"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the time in (hh:mm a) format in String"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"    public String parseTime(String time) {"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        return LocalTime.parse(time, DateTimeFormatter.ofPattern(\"HH:mm\"))"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"                .format(DateTimeFormatter.ofPattern(\"hh:mm a\"));"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"     * Makes sense of the command given in string for the program to be able to take action"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"     * @param fullCommand the entire string of the user input"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns a \u003ccode\u003eCommand\u003c/code\u003e that specifies what the user is asking the program to do"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"    public Command parse(String fullCommand) throws DukeException {"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"        String[] tokens \u003d fullCommand.split(\" \", 2);"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"        String taskType \u003d tokens[0];"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"        invalidCommandChecker(taskType);"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"        switch (taskType) {"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"        case \"list\": {"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"            return new PrintListCommand();"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        case \"done\": {"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"            int taskIndex \u003d Integer.parseInt(taskInfo) - 1;"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"            return new DoneCommand(taskIndex);"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"        case \"delete\": {"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"            int taskIndex \u003d Integer.parseInt(taskInfo) - 1;"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"            return new DeleteCommand(taskIndex);"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"        case \"todo\": {"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new ToDo(taskInfo));"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"        case \"deadline\": {"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"            if (!(taskInfo.contains(\"/by\"))) {"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"            String[] taskInfoArr \u003d taskInfo.split(\" /by \", 2);"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"            if (taskInfoArr.length \u003c 2) {"},{"lineNumber":109,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":110,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":112,"author":{"gitId":"JerardSoh"},"content":"            String[] dateAndTime \u003d taskInfoArr[1].split(\" \");"},{"lineNumber":113,"author":{"gitId":"JerardSoh"},"content":"            String date \u003d parseDate(dateAndTime[0]);"},{"lineNumber":114,"author":{"gitId":"JerardSoh"},"content":"            String time \u003d parseTime(dateAndTime[1]);"},{"lineNumber":115,"author":{"gitId":"JerardSoh"},"content":"            String by \u003d date + \" \" + time;"},{"lineNumber":116,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":117,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new Deadline(taskInfoArr[0], by));"},{"lineNumber":118,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":119,"author":{"gitId":"JerardSoh"},"content":"        case \"event\": {"},{"lineNumber":120,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":121,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":122,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":123,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":124,"author":{"gitId":"JerardSoh"},"content":"            if (!(taskInfo.contains(\"/at\"))) {"},{"lineNumber":125,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":126,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":127,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":128,"author":{"gitId":"JerardSoh"},"content":"            String[] taskInfoArr \u003d taskInfo.split(\" /at \", 2);"},{"lineNumber":129,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":130,"author":{"gitId":"JerardSoh"},"content":"            if (taskInfoArr.length \u003c 2) {"},{"lineNumber":131,"author":{"gitId":"JerardSoh"},"content":"                throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":132,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":134,"author":{"gitId":"JerardSoh"},"content":"            String[] dateAndTime \u003d taskInfoArr[1].split(\" \");"},{"lineNumber":135,"author":{"gitId":"JerardSoh"},"content":"            String date \u003d parseDate(dateAndTime[0]);"},{"lineNumber":136,"author":{"gitId":"JerardSoh"},"content":"            String time \u003d parseTime(dateAndTime[1]);"},{"lineNumber":137,"author":{"gitId":"JerardSoh"},"content":"            String by \u003d date + \" \" + time;"},{"lineNumber":138,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":139,"author":{"gitId":"JerardSoh"},"content":"            return new AddCommand(new Event(taskInfoArr[0], by));"},{"lineNumber":140,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":141,"author":{"gitId":"JerardSoh"},"content":"        case \"find\": {"},{"lineNumber":142,"author":{"gitId":"JerardSoh"},"content":"            emptyDescriptionChecker(tokens);"},{"lineNumber":143,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":144,"author":{"gitId":"JerardSoh"},"content":"            String taskInfo \u003d tokens[1];"},{"lineNumber":145,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":146,"author":{"gitId":"JerardSoh"},"content":"            return new FindCommand(taskInfo);"},{"lineNumber":147,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"JerardSoh"},"content":"        case \"bye\": {"},{"lineNumber":149,"author":{"gitId":"JerardSoh"},"content":"            return new ExitCommand();"},{"lineNumber":150,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"JerardSoh"},"content":"        default: {"},{"lineNumber":152,"author":{"gitId":"JerardSoh"},"content":"            return null;"},{"lineNumber":153,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":156}},{"path":"src/main/java/PrintListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A command that represents printing the \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class PrintListCommand extends Command {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public PrintListCommand() {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        ui.printList(tasklist);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":14}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":" * Deals with loading tasks from a file and saving tasks to the file"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"public class Storage {"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    String filePath;"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    ArrayList\u003cTask\u003e tasks;"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    File myFile;"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    public Storage(String filePath) throws IOException{"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        this.myFile \u003d new File(filePath);"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        if (!myFile.createNewFile()) {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"            scanTaskList();"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"     * Scans the file and save the tasks into an ArrayList of Task"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"     * @throws FileNotFoundException is thrown when there the file could not be found"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"    void scanTaskList() throws FileNotFoundException {"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"        Scanner sc \u003d new Scanner(myFile);"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"        while (sc.hasNext()) {"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"            String input \u003d sc.nextLine();"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"            Task task;"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"            if (input.contains(\"[T]\")) {"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"                String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"                String taskInfo \u003d tokens[1];"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"                task \u003d new ToDo(taskInfo);"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"            } else if (input.contains(\"[D]\")) {"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"                String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"                String[] nextTokens \u003d tokens[1].split(\" \", 2);"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"                String date \u003d nextTokens[1].substring(nextTokens[1].indexOf(\u0027:\u0027) + 2, nextTokens[1].indexOf(\u0027)\u0027));"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"                task \u003d new Deadline(nextTokens[0], date);"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"            } else {"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"                String[] tokens \u003d input.split(\"] \", 2);"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"                String[] nextTokens \u003d tokens[1].split(\" \", 2);"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"                String date \u003d nextTokens[1].substring(nextTokens[1].indexOf(\u0027:\u0027) + 2, nextTokens[1].indexOf(\u0027)\u0027));"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"                task \u003d new Event(nextTokens[0], date);"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"            if (input.contains(\"\\u2713\")) {"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"                task.markAsDone();"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"            tasks.add(task);"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"     * Stores the \u003ccode\u003eTaskList\u003c/code\u003e into a file"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist A class that stores the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"     * @throws IOException is thrown when there is an error related to input and output"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"    public void writeToFile(TaskList tasklist) throws IOException {"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tasklist.getList();"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"        for (Task t : tasks) {"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"            fw.write(t + \"\\n\");"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"        fw.close();"},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"     * Loads the ArrayList"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the ArrayList of \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e load() {"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"        return tasks;"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":87}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * Represents the tasks that the user has input into the program. The task has a description and a boolean to"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" * indicate that it is completed"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class Task {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public Task(String description) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.description \u003d description;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * Gets the status of the \u003ccode\u003eTask\u003c/code\u003e\u003e to determine if it is done."},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     * @return a String of a Tick symbol if it is done and a Cross symbol if it is not"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"    public String getStatusIcon() {"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * Marks the \u003ccode\u003eTask\u003c/code\u003e as done"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    public void markAsDone(){"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        this.isDone \u003d true;"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    public String toString(){"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":34}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":" * Contains the task list which is an ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class TaskList {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    ArrayList\u003cTask\u003e tasks;"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"     * Removes the \u003ccode\u003eTask\u003c/code\u003e by specifying the index from the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the task index in the ArrayList \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"     * @throws InvalidDescriptionException is thrown when there is an error related to an invalid description"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"    void deleteTask(int taskIndex) throws InvalidDescriptionException {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"        if (taskIndex \u003e\u003d tasks.size()) {"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        tasks.remove(taskIndex);"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     * Marks the \u003ccode\u003eTask\u003c/code\u003e as done"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the task index in the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"     * @throws DukeException is thrown when there is an error related to duke"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":"    void markTask(int taskIndex) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"        if (taskIndex \u003e\u003d tasks.size()) {"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"            throw new InvalidDescriptionException(\"Sorry, I am unable to process what was written after the command...\");"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"        tasks.get(taskIndex).markAsDone();"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"     * Gets the ArrayList of \u003ccode\u003eTasks\u003c/code\u003e"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"     * @return Returns the stored ArrayList"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        return tasks;"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"     * Adds the task to the ArrayList"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"     * @param task represents the \u003ccode\u003eTask\u003c/code\u003e to be added"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"    void addTask(Task task) {"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"        tasks.add(task);"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"     * Finds \u003ccode\u003eTask\u003c/code\u003e in the ArrayList that contains the matching word"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"     * @param keyWord indicates the word to find"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"     * @return an ArrayList that contains the \u003ccode\u003eTasks\u003c/code\u003e that has the keyword"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"    public ArrayList\u003cTask\u003e findTask(String keyWord) {"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e matchingWords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"        for (Task t : tasks) {"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"            if (t.toString().contains(keyWord)) {"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"                matchingWords.add(t);"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"            }"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":"        return matchingWords;"},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":76}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":" * A subclass of Task that has a description and overrides the toString() method of \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"public class ToDo extends Task {"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    public ToDo(String description) {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"        super(description);"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public String toString() {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":14}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":" * Deals with interactions with the user"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":" */"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    Scanner sc;"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"    public Ui() {"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        this.sc \u003d new Scanner(System.in);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"     * Prints a line"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"    public void showLine() {"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"------------------------------------------------\");"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"     * Prints the error message"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"     * @param message the error message in String"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"    public void showError(String message) {"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(message);"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"     * Prints to indicate that the file is unable to be loaded"},{"lineNumber":32,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"JerardSoh"},"content":"    public void showLoadingError() {"},{"lineNumber":34,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Unable to load file!\");"},{"lineNumber":35,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":37,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"JerardSoh"},"content":"     * Takes in user input"},{"lineNumber":39,"author":{"gitId":"JerardSoh"},"content":"     * @return the full user command in String"},{"lineNumber":40,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"JerardSoh"},"content":"    public String readCommand() {"},{"lineNumber":42,"author":{"gitId":"JerardSoh"},"content":"        return sc.nextLine();"},{"lineNumber":43,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":45,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"JerardSoh"},"content":"     * Prints a welcome message"},{"lineNumber":47,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"JerardSoh"},"content":"    public void showWelcome() {"},{"lineNumber":49,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Hi! I\u0027m Timmy!\\nWhat can Timmy note down for you today?\");"},{"lineNumber":50,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Please type in any of these format!\");"},{"lineNumber":51,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"todo [title]\");"},{"lineNumber":52,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"event [title] /at [yyyy-mm-dd] [HH:MM]\");"},{"lineNumber":53,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"deadline [title] /by [yyyy-mm-dd] [HH:MM]\");"},{"lineNumber":54,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"list\");"},{"lineNumber":55,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"delete [index]\");"},{"lineNumber":56,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"done [index]\");"},{"lineNumber":57,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":59,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"JerardSoh"},"content":"     * Prints the exit message"},{"lineNumber":61,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"JerardSoh"},"content":"    public void showExit() {"},{"lineNumber":63,"author":{"gitId":"JerardSoh"},"content":"        sc.close();"},{"lineNumber":64,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":65,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Bye! Hope to see you again!\");"},{"lineNumber":66,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":68,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"JerardSoh"},"content":"     * Prints the \u003ccode\u003eTasks\u003c/code\u003e in a TaskList"},{"lineNumber":70,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist stores the \u003ccode\u003eTask\u003c/code\u003e in an ArrayList"},{"lineNumber":71,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"JerardSoh"},"content":"    void printList(TaskList tasklist) {"},{"lineNumber":73,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":74,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":75,"author":{"gitId":"JerardSoh"},"content":"        ArrayList\u003cTask\u003e tasks \u003d tasklist.getList();"},{"lineNumber":76,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":77,"author":{"gitId":"JerardSoh"},"content":"        for (int j \u003d 0; j \u003c tasks.size(); j++) {"},{"lineNumber":78,"author":{"gitId":"JerardSoh"},"content":"            System.out.println(j + 1 + \".\" + tasks.get(j).toString());"},{"lineNumber":79,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":82,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"JerardSoh"},"content":"     * Prints a message to indicate that the task is marked"},{"lineNumber":84,"author":{"gitId":"JerardSoh"},"content":"     * @param task the \u003ccode\u003eTask\u003c/code\u003e\u003e to be marked"},{"lineNumber":85,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"JerardSoh"},"content":"    void showMarkTask(Task task) {"},{"lineNumber":87,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\\n\" + task.toString());"},{"lineNumber":88,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":90,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"JerardSoh"},"content":"     * Prints a message to indicate that the task is deleted"},{"lineNumber":92,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist stores the \u003ccode\u003eTask\u003c/code\u003e in an ArrayList"},{"lineNumber":93,"author":{"gitId":"JerardSoh"},"content":"     * @param taskIndex indicates the \u003ccode\u003eTask\u003c/code\u003e index in the ArrayList"},{"lineNumber":94,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"JerardSoh"},"content":"    void showDeleteTask(TaskList tasklist, int taskIndex) {"},{"lineNumber":96,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Ok! I\u0027ve removed this task:\\n\" + tasklist.getList().get(taskIndex).toString());"},{"lineNumber":97,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Currently, you have \" + (tasklist.getList().size() - 1) + \" task(s) in the list!\");"},{"lineNumber":98,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":100,"author":{"gitId":"JerardSoh"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"JerardSoh"},"content":"     * Prints the added \u003ccode\u003eTask\u003c/code\u003e to the ArrayList"},{"lineNumber":102,"author":{"gitId":"JerardSoh"},"content":"     * @param tasklist stores the \u003ccode\u003eTask\u003c/code\u003e in an ArrayList"},{"lineNumber":103,"author":{"gitId":"JerardSoh"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"JerardSoh"},"content":"    void showAddTask(TaskList tasklist) {"},{"lineNumber":105,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Ok! I\u0027ve added this task:\\n\" + tasklist.getList().get(tasklist.getList().size() - 1).toString());"},{"lineNumber":106,"author":{"gitId":"JerardSoh"},"content":"        System.out.println(\"Currently, you have \" + tasklist.getList().size() + \" task(s) in the list!\");"},{"lineNumber":107,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":108}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    public void dummyTest(){"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(2, 2);"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":10}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    Parser p \u003d new Parser();"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public void testParse() throws DukeException {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        assertTrue(p.parse(\"list\") instanceof PrintListCommand);"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        assertTrue(p.parse(\"todo run\") instanceof AddCommand);"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        assertTrue(p.parse(\"done 1\") instanceof DoneCommand);"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"        assertTrue(p.parse(\"delete 1\") instanceof DeleteCommand);"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":"        assertTrue(p.parse(\"deadline run /by 1999-12-19 23:24\") instanceof AddCommand);"},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"        assertTrue(p.parse(\"event run /at 1999-12-19 23:21\") instanceof AddCommand);"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"        assertTrue(p.parse(\"bye\") instanceof ExitCommand);"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"asd\");"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        } catch (Exception e) {"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"            assertEquals(\"Sorry, I don\u0027t know what that means...\", e.getMessage());"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"todo\");"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"deadline\");"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"            p.parse(\"event\");"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        } catch (Exception e) {"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"            assertEquals(\"Sorry, nothing was written after the command so I am unable to process...\", e.getMessage());"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":31}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.BeforeAll;"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"public class TaskListTest {"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"    private TaskList taskListTest \u003d new TaskList();"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"    public void testAddTask() {"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"        Task t \u003d new ToDo(\"run\");"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(\"run\"));"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(t.toString(), taskListTest.getList().get(0).toString());"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":16,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"JerardSoh"},"content":"    public void testDeleteTask() throws InvalidDescriptionException {"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"        Task t \u003d new ToDo(\"run\");"},{"lineNumber":19,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(\"run\"));"},{"lineNumber":20,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.deleteTask(0);"},{"lineNumber":21,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(0, taskListTest.getList().size());"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":24,"author":{"gitId":"JerardSoh"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"JerardSoh"},"content":"    public void testMarkTask() throws DukeException {"},{"lineNumber":26,"author":{"gitId":"JerardSoh"},"content":"        Task t \u003d new ToDo(\"run\");"},{"lineNumber":27,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.addTask(new ToDo(\"run\"));"},{"lineNumber":28,"author":{"gitId":"JerardSoh"},"content":"        taskListTest.markTask(0);"},{"lineNumber":29,"author":{"gitId":"JerardSoh"},"content":"        assertEquals(\"\\u2713\", taskListTest.getList().get(0).getStatusIcon());"},{"lineNumber":30,"author":{"gitId":"JerardSoh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"JerardSoh"},"content":"}"}],"authorContributionMap":{"JerardSoh":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"JerardSoh"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"JerardSoh"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"JerardSoh"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"JerardSoh"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"JerardSoh"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"JerardSoh"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"JerardSoh"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":9,"author":{"gitId":"JerardSoh"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":12,"author":{"gitId":"JerardSoh"},"content":"delete 3"},{"lineNumber":13,"author":{"gitId":"JerardSoh"},"content":"list"},{"lineNumber":14,"author":{"gitId":"JerardSoh"},"content":"bye"}],"authorContributionMap":{"JerardSoh":14}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"JerardSoh"},"content":"javac  -cp C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java -Xlint:none -d C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\bin C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"JerardSoh"},"content":"java -classpath C:\\Users\\Jerard\\OneDrive\\Desktop\\CS2103T\\repos\\ip\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"JerardSoh"},"content":""},{"lineNumber":23,"author":{"gitId":"JerardSoh"},"content":"pause"}],"authorContributionMap":{"-":19,"JerardSoh":4}}]
