[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"public class Deadline extends Task {"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"    protected LocalDate period;"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"    public Deadline(String description, String period) throws DukeException {"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"            this.period \u003d LocalDate.parse(period);"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"            throw new DukeException(\"☹ OOPS!!! Please specify the date in this format:\\n\""},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"                                        + \"  deadline [task description] /at [yyyy-mm-dd]\");"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"    public String saveFormat() {"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"        return \"D | \" + super.saveFormat() + \" | \" + period;"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + period.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":"}"}],"authorContributionMap":{"pngsebastian":27}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"    private static final String SEPARATOR \u003d \"____________________________________________________________\";"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"    private static ArrayList\u003cTask\u003e tasksList;"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"    private static int counter;"},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"    private static final FileManager fileManager \u003d new FileManager(\"data/tasksList.txt\");"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"    public enum TaskType {"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"        TODO, DEADLINE, EVENT"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"    private static void replyFormat(String reply) {"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"        System.out.println(SEPARATOR + \"\\n\" + reply + \"\\n\" + SEPARATOR);"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"    private static void greet() {"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"        String greeting \u003d \"Hello! I\u0027m Duke\\n\" + \"What can I do for you?\";"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"        replyFormat(greeting);"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"    private static void bye() {"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"        String byeMessage \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"        replyFormat(byeMessage);"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"    private static void displayPrompts() {"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":"        String promptMessage \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\""},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"                                + \"List of recognised user prompts:\\n\""},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"                                + \"  1. todo - adds a todo (E.g. todo borrow book)\\n\""},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"                                + \"  2. deadline - adds a deadline (E.g. deadline return book /by 2021-02-04)\\n\""},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"                                + \"  3. event - adds an event (E.g. event project meeting /at 2021-03-05)\\n\""},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"                                + \"  4. delete - removes a task from the lists of task\\n\""},{"lineNumber":35,"author":{"gitId":"pngsebastian"},"content":"                                + \"  5. list - displays the list of tasks\\n\""},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"                                + \"  6. bye - terminates Duke ☹\";"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"        replyFormat(promptMessage);"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":41,"author":{"gitId":"pngsebastian"},"content":"    // Adds a task to tasksList"},{"lineNumber":42,"author":{"gitId":"pngsebastian"},"content":"    private static void addTask(TaskType taskType, String promptDescription) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":"        String[] strings;"},{"lineNumber":44,"author":{"gitId":"pngsebastian"},"content":"        String systemMessage;"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"        String description;"},{"lineNumber":46,"author":{"gitId":"pngsebastian"},"content":"        String period;"},{"lineNumber":47,"author":{"gitId":"pngsebastian"},"content":"        Task newTask;"},{"lineNumber":48,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":49,"author":{"gitId":"pngsebastian"},"content":"        // Checks if string is null or empty or contains only spaces"},{"lineNumber":50,"author":{"gitId":"pngsebastian"},"content":"        boolean isDescriptionFilled \u003d (promptDescription !\u003d null \u0026\u0026 !promptDescription.trim().isEmpty());"},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":52,"author":{"gitId":"pngsebastian"},"content":"        switch (taskType) {"},{"lineNumber":53,"author":{"gitId":"pngsebastian"},"content":"        case TODO:"},{"lineNumber":54,"author":{"gitId":"pngsebastian"},"content":"            if (isDescriptionFilled) {"},{"lineNumber":55,"author":{"gitId":"pngsebastian"},"content":"                counter++;"},{"lineNumber":56,"author":{"gitId":"pngsebastian"},"content":"                newTask \u003d new ToDo(promptDescription);"},{"lineNumber":57,"author":{"gitId":"pngsebastian"},"content":"                tasksList.add(newTask);"},{"lineNumber":58,"author":{"gitId":"pngsebastian"},"content":"                systemMessage \u003d \"Got it. I\u0027ve added this task:\\n\" + \"  \" + newTask + \"\\n\" + \"Now you have \""},{"lineNumber":59,"author":{"gitId":"pngsebastian"},"content":"                                    + counter + (counter \u003c\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"},{"lineNumber":60,"author":{"gitId":"pngsebastian"},"content":"                replyFormat(systemMessage);"},{"lineNumber":61,"author":{"gitId":"pngsebastian"},"content":"            } else {"},{"lineNumber":62,"author":{"gitId":"pngsebastian"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":63,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"pngsebastian"},"content":"            break;"},{"lineNumber":65,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":66,"author":{"gitId":"pngsebastian"},"content":"        case DEADLINE:"},{"lineNumber":67,"author":{"gitId":"pngsebastian"},"content":"            if (isDescriptionFilled) {"},{"lineNumber":68,"author":{"gitId":"pngsebastian"},"content":"                try {"},{"lineNumber":69,"author":{"gitId":"pngsebastian"},"content":"                    strings \u003d promptDescription.split(\" /by\");"},{"lineNumber":70,"author":{"gitId":"pngsebastian"},"content":"                    description \u003d strings[0];"},{"lineNumber":71,"author":{"gitId":"pngsebastian"},"content":"                    period \u003d (strings.length \u003e 1 ? strings[1].split(\" \",2)[1] : \"\");"},{"lineNumber":72,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":73,"author":{"gitId":"pngsebastian"},"content":"                    if (period !\u003d null \u0026\u0026 !period.trim().isEmpty()) {"},{"lineNumber":74,"author":{"gitId":"pngsebastian"},"content":"                        newTask \u003d new Deadline(description, period);"},{"lineNumber":75,"author":{"gitId":"pngsebastian"},"content":"                        tasksList.add(newTask);"},{"lineNumber":76,"author":{"gitId":"pngsebastian"},"content":"                        counter++;"},{"lineNumber":77,"author":{"gitId":"pngsebastian"},"content":"                        systemMessage \u003d \"Got it. I\u0027ve added this task:\\n\" + \"  \" + newTask + \"\\n\" + \"Now you have \""},{"lineNumber":78,"author":{"gitId":"pngsebastian"},"content":"                                            + counter + (counter \u003c\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"},{"lineNumber":79,"author":{"gitId":"pngsebastian"},"content":"                        replyFormat(systemMessage);"},{"lineNumber":80,"author":{"gitId":"pngsebastian"},"content":"                    } else {"},{"lineNumber":81,"author":{"gitId":"pngsebastian"},"content":"                        throw new DukeException(\"☹ OOPS!!! The date cannot be empty.\");"},{"lineNumber":82,"author":{"gitId":"pngsebastian"},"content":"                    }"},{"lineNumber":83,"author":{"gitId":"pngsebastian"},"content":"                } catch (IndexOutOfBoundsException e) {"},{"lineNumber":84,"author":{"gitId":"pngsebastian"},"content":"                    throw new DukeException(\"☹ OOPS!!! Please specify the date in this format:\\n\""},{"lineNumber":85,"author":{"gitId":"pngsebastian"},"content":"                                                + \"  deadline [task description] /by [yyyy-mm-dd]\");"},{"lineNumber":86,"author":{"gitId":"pngsebastian"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"pngsebastian"},"content":"            } else {"},{"lineNumber":88,"author":{"gitId":"pngsebastian"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":89,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"pngsebastian"},"content":"            break;"},{"lineNumber":91,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":92,"author":{"gitId":"pngsebastian"},"content":"        case EVENT:"},{"lineNumber":93,"author":{"gitId":"pngsebastian"},"content":"            if (isDescriptionFilled) {"},{"lineNumber":94,"author":{"gitId":"pngsebastian"},"content":"                try {"},{"lineNumber":95,"author":{"gitId":"pngsebastian"},"content":"                    strings \u003d promptDescription.split(\" /at\");"},{"lineNumber":96,"author":{"gitId":"pngsebastian"},"content":"                    description \u003d strings[0];"},{"lineNumber":97,"author":{"gitId":"pngsebastian"},"content":"                    period \u003d (strings.length \u003e 1 ? strings[1].split(\" \", 2)[1] : \"\");"},{"lineNumber":98,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":99,"author":{"gitId":"pngsebastian"},"content":"                    if (period !\u003d null \u0026\u0026 !period.trim().isEmpty()) {"},{"lineNumber":100,"author":{"gitId":"pngsebastian"},"content":"                        newTask \u003d new Event(description, period);"},{"lineNumber":101,"author":{"gitId":"pngsebastian"},"content":"                        tasksList.add(newTask);"},{"lineNumber":102,"author":{"gitId":"pngsebastian"},"content":"                        counter++;"},{"lineNumber":103,"author":{"gitId":"pngsebastian"},"content":"                        systemMessage \u003d \"Got it. I\u0027ve added this task:\\n\" + \"  \" + newTask + \"\\n\" + \"Now you have \""},{"lineNumber":104,"author":{"gitId":"pngsebastian"},"content":"                                            + counter + (counter \u003c\u003d 1 ? \" task\" : \" tasks\") + \" in the list.\";"},{"lineNumber":105,"author":{"gitId":"pngsebastian"},"content":"                        replyFormat(systemMessage);"},{"lineNumber":106,"author":{"gitId":"pngsebastian"},"content":"                    } else {"},{"lineNumber":107,"author":{"gitId":"pngsebastian"},"content":"                        throw new DukeException(\"☹ OOPS!!! The date cannot be empty.\");"},{"lineNumber":108,"author":{"gitId":"pngsebastian"},"content":"                    }"},{"lineNumber":109,"author":{"gitId":"pngsebastian"},"content":"                } catch (IndexOutOfBoundsException e) {"},{"lineNumber":110,"author":{"gitId":"pngsebastian"},"content":"                    throw new DukeException(\"☹ OOPS!!! Please specify the date in this format:\\n\""},{"lineNumber":111,"author":{"gitId":"pngsebastian"},"content":"                                                + \"  event [task description] /at [yyyy-mm-dd]\");"},{"lineNumber":112,"author":{"gitId":"pngsebastian"},"content":"                }"},{"lineNumber":113,"author":{"gitId":"pngsebastian"},"content":"            } else {"},{"lineNumber":114,"author":{"gitId":"pngsebastian"},"content":"                throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":115,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":116,"author":{"gitId":"pngsebastian"},"content":"            break;"},{"lineNumber":117,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":118,"author":{"gitId":"pngsebastian"},"content":"        default:"},{"lineNumber":119,"author":{"gitId":"pngsebastian"},"content":"            displayPrompts();"},{"lineNumber":120,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":123,"author":{"gitId":"pngsebastian"},"content":"    // Marks a task as done and informs the user about it"},{"lineNumber":124,"author":{"gitId":"pngsebastian"},"content":"    private static void completeTask(String promptDescription) throws DukeException {"},{"lineNumber":125,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":126,"author":{"gitId":"pngsebastian"},"content":"            int taskNum \u003d Integer.parseInt(promptDescription);"},{"lineNumber":127,"author":{"gitId":"pngsebastian"},"content":"            if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasksList.size()) {"},{"lineNumber":128,"author":{"gitId":"pngsebastian"},"content":"                Task taskToComplete \u003d tasksList.get(taskNum - 1);"},{"lineNumber":129,"author":{"gitId":"pngsebastian"},"content":"                taskToComplete.markAsDone();"},{"lineNumber":130,"author":{"gitId":"pngsebastian"},"content":"                String doneMessage \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + taskToComplete;"},{"lineNumber":131,"author":{"gitId":"pngsebastian"},"content":"                replyFormat(doneMessage);"},{"lineNumber":132,"author":{"gitId":"pngsebastian"},"content":"            } else {"},{"lineNumber":133,"author":{"gitId":"pngsebastian"},"content":"                throw new DukeException(\"☹ OOPS!!! Task \" + taskNum + \" is not in the task list!\");"},{"lineNumber":134,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":135,"author":{"gitId":"pngsebastian"},"content":"        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":136,"author":{"gitId":"pngsebastian"},"content":"            throw new DukeException(\"☹ OOPS!!! Please specify a task number. (E.g. done 2)\");"},{"lineNumber":137,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":140,"author":{"gitId":"pngsebastian"},"content":"    // Deletes a task from the taskList"},{"lineNumber":141,"author":{"gitId":"pngsebastian"},"content":"    private static void deleteTask(String promptDescription) throws DukeException {"},{"lineNumber":142,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":143,"author":{"gitId":"pngsebastian"},"content":"            int taskNum \u003d Integer.parseInt(promptDescription);"},{"lineNumber":144,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":145,"author":{"gitId":"pngsebastian"},"content":"            if (taskNum \u003e 0 \u0026\u0026 taskNum \u003c\u003d tasksList.size()) {"},{"lineNumber":146,"author":{"gitId":"pngsebastian"},"content":"                counter--;"},{"lineNumber":147,"author":{"gitId":"pngsebastian"},"content":"                Task taskToDelete \u003d tasksList.get(taskNum - 1);"},{"lineNumber":148,"author":{"gitId":"pngsebastian"},"content":"                String deletedMessage \u003d \"Noted. I\u0027ve removed this task:\\n\" + \"  \" + taskToDelete + \"\\n\""},{"lineNumber":149,"author":{"gitId":"pngsebastian"},"content":"                                            + \"Now you have \" + counter + \" tasks in the list\";"},{"lineNumber":150,"author":{"gitId":"pngsebastian"},"content":"                tasksList.remove(taskNum - 1);"},{"lineNumber":151,"author":{"gitId":"pngsebastian"},"content":"                replyFormat(deletedMessage);"},{"lineNumber":152,"author":{"gitId":"pngsebastian"},"content":"            } else {"},{"lineNumber":153,"author":{"gitId":"pngsebastian"},"content":"                throw new DukeException(\"☹ OOPS!!! Task \" + taskNum + \" is not in the task list!\");"},{"lineNumber":154,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":155,"author":{"gitId":"pngsebastian"},"content":"        } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {"},{"lineNumber":156,"author":{"gitId":"pngsebastian"},"content":"            throw new DukeException(\"☹ OOPS!!! Please specify a task number. (E.g. delete 2)\");"},{"lineNumber":157,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":158,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":159,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":160,"author":{"gitId":"pngsebastian"},"content":"    // Displays all the tasks in tasksList to the user"},{"lineNumber":161,"author":{"gitId":"pngsebastian"},"content":"    private static void displayTasks(ArrayList\u003cTask\u003e tasksList) {"},{"lineNumber":162,"author":{"gitId":"pngsebastian"},"content":"        if (tasksList.size() \u003c\u003d 0) {"},{"lineNumber":163,"author":{"gitId":"pngsebastian"},"content":"            replyFormat(\"There are no tasks at the moment.\");"},{"lineNumber":164,"author":{"gitId":"pngsebastian"},"content":"        } else {"},{"lineNumber":165,"author":{"gitId":"pngsebastian"},"content":"            System.out.println(SEPARATOR);"},{"lineNumber":166,"author":{"gitId":"pngsebastian"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":167,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":168,"author":{"gitId":"pngsebastian"},"content":"            for (int i \u003d 1; i \u003c\u003d tasksList.size(); i++) {"},{"lineNumber":169,"author":{"gitId":"pngsebastian"},"content":"                Task currentTask \u003d tasksList.get(i - 1);"},{"lineNumber":170,"author":{"gitId":"pngsebastian"},"content":"                System.out.println(\"  \" + i + \". \" + currentTask);"},{"lineNumber":171,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":172,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":173,"author":{"gitId":"pngsebastian"},"content":"            System.out.println(SEPARATOR + \"\\n\");"},{"lineNumber":174,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":177,"author":{"gitId":"pngsebastian"},"content":"    private static void userInputManager(String userInput) {"},{"lineNumber":178,"author":{"gitId":"pngsebastian"},"content":"        String[] inputArray \u003d userInput.split(\" \", 2);"},{"lineNumber":179,"author":{"gitId":"pngsebastian"},"content":"        String prompt \u003d inputArray[0];"},{"lineNumber":180,"author":{"gitId":"pngsebastian"},"content":"        String promptDescription \u003d \"\";"},{"lineNumber":181,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":182,"author":{"gitId":"pngsebastian"},"content":"        if (inputArray.length \u003e 1) {"},{"lineNumber":183,"author":{"gitId":"pngsebastian"},"content":"            promptDescription \u003d inputArray[1];"},{"lineNumber":184,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":185,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":186,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":187,"author":{"gitId":"pngsebastian"},"content":"            switch (prompt) {"},{"lineNumber":188,"author":{"gitId":"pngsebastian"},"content":"            case \"list\":"},{"lineNumber":189,"author":{"gitId":"pngsebastian"},"content":"                displayTasks(tasksList);"},{"lineNumber":190,"author":{"gitId":"pngsebastian"},"content":"                break;"},{"lineNumber":191,"author":{"gitId":"pngsebastian"},"content":"            case \"done\":"},{"lineNumber":192,"author":{"gitId":"pngsebastian"},"content":"                completeTask(promptDescription);"},{"lineNumber":193,"author":{"gitId":"pngsebastian"},"content":"                fileManager.saveFile(tasksList);"},{"lineNumber":194,"author":{"gitId":"pngsebastian"},"content":"                break;"},{"lineNumber":195,"author":{"gitId":"pngsebastian"},"content":"            case \"delete\":"},{"lineNumber":196,"author":{"gitId":"pngsebastian"},"content":"                deleteTask(promptDescription);"},{"lineNumber":197,"author":{"gitId":"pngsebastian"},"content":"                fileManager.saveFile(tasksList);"},{"lineNumber":198,"author":{"gitId":"pngsebastian"},"content":"                break;"},{"lineNumber":199,"author":{"gitId":"pngsebastian"},"content":"            case \"todo\":"},{"lineNumber":200,"author":{"gitId":"pngsebastian"},"content":"                addTask(TaskType.TODO, promptDescription);"},{"lineNumber":201,"author":{"gitId":"pngsebastian"},"content":"                fileManager.saveFile(tasksList);"},{"lineNumber":202,"author":{"gitId":"pngsebastian"},"content":"                break;"},{"lineNumber":203,"author":{"gitId":"pngsebastian"},"content":"            case \"deadline\":"},{"lineNumber":204,"author":{"gitId":"pngsebastian"},"content":"                addTask(TaskType.DEADLINE, promptDescription);"},{"lineNumber":205,"author":{"gitId":"pngsebastian"},"content":"                fileManager.saveFile(tasksList);"},{"lineNumber":206,"author":{"gitId":"pngsebastian"},"content":"                break;"},{"lineNumber":207,"author":{"gitId":"pngsebastian"},"content":"            case \"event\":"},{"lineNumber":208,"author":{"gitId":"pngsebastian"},"content":"                addTask(TaskType.EVENT, promptDescription);"},{"lineNumber":209,"author":{"gitId":"pngsebastian"},"content":"                fileManager.saveFile(tasksList);"},{"lineNumber":210,"author":{"gitId":"pngsebastian"},"content":"                break;"},{"lineNumber":211,"author":{"gitId":"pngsebastian"},"content":"            default:"},{"lineNumber":212,"author":{"gitId":"pngsebastian"},"content":"                displayPrompts();"},{"lineNumber":213,"author":{"gitId":"pngsebastian"},"content":"                break;"},{"lineNumber":214,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":215,"author":{"gitId":"pngsebastian"},"content":"        } catch (DukeException e){"},{"lineNumber":216,"author":{"gitId":"pngsebastian"},"content":"            replyFormat(e.getMessage());"},{"lineNumber":217,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":219,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":220,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":221,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"pngsebastian"},"content":"            fileManager.loadFile();"},{"lineNumber":223,"author":{"gitId":"pngsebastian"},"content":"            Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":224,"author":{"gitId":"pngsebastian"},"content":"            tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":225,"author":{"gitId":"pngsebastian"},"content":"            counter \u003d 0;"},{"lineNumber":226,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":227,"author":{"gitId":"pngsebastian"},"content":"            greet();"},{"lineNumber":228,"author":{"gitId":"pngsebastian"},"content":"            String userInput \u003d sc.nextLine();"},{"lineNumber":229,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":230,"author":{"gitId":"pngsebastian"},"content":"            while (!userInput.equals(\"bye\")) {"},{"lineNumber":231,"author":{"gitId":"pngsebastian"},"content":"                userInputManager(userInput);"},{"lineNumber":232,"author":{"gitId":"pngsebastian"},"content":"                userInput \u003d sc.nextLine();"},{"lineNumber":233,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":234,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":235,"author":{"gitId":"pngsebastian"},"content":"            bye();"},{"lineNumber":236,"author":{"gitId":"pngsebastian"},"content":"        } catch (DukeException e){"},{"lineNumber":237,"author":{"gitId":"pngsebastian"},"content":"            replyFormat(e.getMessage());"},{"lineNumber":238,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":239,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":240,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pngsebastian":236,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"    public DukeException(String message) {"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"        super(message);"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"}"}],"authorContributionMap":{"pngsebastian":5}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"    protected LocalDate period;"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"    public Event(String description, String period) throws DukeException {"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"            this.period \u003d LocalDate.parse(period);"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"            throw new DukeException(\"☹ OOPS!!! Please specify the date in this format:\\n\""},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"                                        + \"  event [task description] /at [yyyy-mm-dd]\");"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"    public String saveFormat() {"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"        return \"E | \" + super.saveFormat() + \" | \" + period;"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + period.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":"}"}],"authorContributionMap":{"pngsebastian":27}},{"path":"src/main/java/FileManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"import java.io.BufferedWriter;"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"public class FileManager {"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"    private String filePath;"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"    public FileManager(String filePath) {"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"    public ArrayList\u003cTask\u003e loadFile() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"        File tasksListFile \u003d new File(filePath);"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":"        ArrayList\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"            Scanner sc \u003d new Scanner(tasksListFile);"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"                String savedTask \u003d sc.nextLine();"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"                String[] savedTaskDetails \u003d savedTask.split(\" | \");"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"                String savedTaskType \u003d savedTaskDetails[0];"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"                String savedTaskDescription \u003d savedTaskDetails[2];"},{"lineNumber":27,"author":{"gitId":"pngsebastian"},"content":"                boolean isTaskDone \u003d (Integer.parseInt(savedTaskDetails[1]) \u003d\u003d 1);"},{"lineNumber":28,"author":{"gitId":"pngsebastian"},"content":"                Task taskToLoad;"},{"lineNumber":29,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":30,"author":{"gitId":"pngsebastian"},"content":"                switch (savedTaskType) {"},{"lineNumber":31,"author":{"gitId":"pngsebastian"},"content":"                case \"T\":"},{"lineNumber":32,"author":{"gitId":"pngsebastian"},"content":"                    taskToLoad \u003d new ToDo(savedTaskDescription);"},{"lineNumber":33,"author":{"gitId":"pngsebastian"},"content":"                    break;"},{"lineNumber":34,"author":{"gitId":"pngsebastian"},"content":"                case \"D\":"},{"lineNumber":35,"author":{"gitId":"pngsebastian"},"content":"                    taskToLoad \u003d new Deadline(savedTaskDescription, savedTaskDetails[3]);"},{"lineNumber":36,"author":{"gitId":"pngsebastian"},"content":"                    break;"},{"lineNumber":37,"author":{"gitId":"pngsebastian"},"content":"                case \"E\":"},{"lineNumber":38,"author":{"gitId":"pngsebastian"},"content":"                    taskToLoad \u003d new Event(savedTaskDescription, savedTaskDetails[3]);"},{"lineNumber":39,"author":{"gitId":"pngsebastian"},"content":"                    break;"},{"lineNumber":40,"author":{"gitId":"pngsebastian"},"content":"                default:"},{"lineNumber":41,"author":{"gitId":"pngsebastian"},"content":"                    throw new DukeException(\"☹ OOPS!!! There are issues in loading the saved file of the tasks list.\");"},{"lineNumber":42,"author":{"gitId":"pngsebastian"},"content":"                }"},{"lineNumber":43,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":44,"author":{"gitId":"pngsebastian"},"content":"                if (isTaskDone) {"},{"lineNumber":45,"author":{"gitId":"pngsebastian"},"content":"                    taskToLoad.markAsDone();"},{"lineNumber":46,"author":{"gitId":"pngsebastian"},"content":"                }"},{"lineNumber":47,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":48,"author":{"gitId":"pngsebastian"},"content":"                tasksList.add(taskToLoad);"},{"lineNumber":49,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":51,"author":{"gitId":"pngsebastian"},"content":"            return tasksList;"},{"lineNumber":52,"author":{"gitId":"pngsebastian"},"content":"        } catch (IOException e){"},{"lineNumber":53,"author":{"gitId":"pngsebastian"},"content":"            throw new DukeException(\"☹ OOPS!!! There is no saved file of the tasks list in this directory.\");"},{"lineNumber":54,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":57,"author":{"gitId":"pngsebastian"},"content":"    public void saveFile(ArrayList\u003cTask\u003e tasksList) throws DukeException {"},{"lineNumber":58,"author":{"gitId":"pngsebastian"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"pngsebastian"},"content":"            File tasksListFile \u003d new File(filePath);"},{"lineNumber":60,"author":{"gitId":"pngsebastian"},"content":"            FileWriter fw \u003d new FileWriter(tasksListFile);"},{"lineNumber":61,"author":{"gitId":"pngsebastian"},"content":"            BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":62,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":63,"author":{"gitId":"pngsebastian"},"content":"            for (Task task : tasksList) {"},{"lineNumber":64,"author":{"gitId":"pngsebastian"},"content":"                bw.write(task.saveFormat());"},{"lineNumber":65,"author":{"gitId":"pngsebastian"},"content":"                bw.newLine();"},{"lineNumber":66,"author":{"gitId":"pngsebastian"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":68,"author":{"gitId":"pngsebastian"},"content":"            bw.close();"},{"lineNumber":69,"author":{"gitId":"pngsebastian"},"content":"            fw.close();"},{"lineNumber":70,"author":{"gitId":"pngsebastian"},"content":"        } catch (IOException e) {"},{"lineNumber":71,"author":{"gitId":"pngsebastian"},"content":"            throw new DukeException(\"☹ OOPS!!! Tasks list cannot be saved.\");"},{"lineNumber":72,"author":{"gitId":"pngsebastian"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pngsebastian"},"content":"}"}],"authorContributionMap":{"pngsebastian":74}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"    public Task(String description) {"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"        this.description \u003d description;"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"        this.isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"    public void markAsDone() {"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"        this.isDone \u003d true;"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"    public String getStatusIcon() {"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"        return isDone ? \"[X]\" : \"[ ]\";"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":18,"author":{"gitId":"pngsebastian"},"content":"    public String saveFormat() {"},{"lineNumber":19,"author":{"gitId":"pngsebastian"},"content":"        return (isDone ? \"1\" : \"0\") +  \" | \" + description;"},{"lineNumber":20,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":22,"author":{"gitId":"pngsebastian"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"pngsebastian"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"pngsebastian"},"content":"        return this.getStatusIcon() + \" \" + this.description;"},{"lineNumber":25,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"pngsebastian"},"content":"}"}],"authorContributionMap":{"pngsebastian":26}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"    public ToDo(String description) {"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"        super(description);"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"    public String saveFormat() {"},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"        return \"T | \" + super.saveFormat();"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":""},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"}"}],"authorContributionMap":{"pngsebastian":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pngsebastian"},"content":"todo go through cs2103 weekly topics"},{"lineNumber":2,"author":{"gitId":"pngsebastian"},"content":"deadline cs2103 week 2 post-lecture quiz /by 2021-01-21"},{"lineNumber":3,"author":{"gitId":"pngsebastian"},"content":"deadline cs2103 week 2 project /by 2021-01-21"},{"lineNumber":4,"author":{"gitId":"pngsebastian"},"content":"done 1"},{"lineNumber":5,"author":{"gitId":"pngsebastian"},"content":"deadline test /by"},{"lineNumber":6,"author":{"gitId":"pngsebastian"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"pngsebastian"},"content":"list"},{"lineNumber":8,"author":{"gitId":"pngsebastian"},"content":"event cs2103 lecture /at 2021-01-22"},{"lineNumber":9,"author":{"gitId":"pngsebastian"},"content":"event cs2103 tutorial /at 2021-01-27"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"blah"},{"lineNumber":11,"author":{"gitId":"pngsebastian"},"content":"list"},{"lineNumber":12,"author":{"gitId":"pngsebastian"},"content":"done 0"},{"lineNumber":13,"author":{"gitId":"pngsebastian"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"pngsebastian"},"content":"done 3"},{"lineNumber":15,"author":{"gitId":"pngsebastian"},"content":"list"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"bye"}],"authorContributionMap":{"pngsebastian":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"pngsebastian"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"pngsebastian":1,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"pngsebastian"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"pngsebastian":1,"-":37}}]
