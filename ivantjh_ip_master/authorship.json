[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Set up the correct JDK version, as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Configure` \u003e `Structure for New Projects` and then `Project Settings` \u003e `Project` \u003e `Project SDK`"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `OK`"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Import the project into Intellij as follows:"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. Click `Open or Import`."},{"lineNumber":16,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"1. After the importing is complete, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"ivantjh":1,"-":25}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import duke.parser.Parser;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import duke.storage.Storage;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.util.Scanner;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private final Ui ui;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    private final TaskList taskLst;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    private Storage storage;"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"     * The constructor of Duke. Components needed to run Duke should be initialized here."},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    public Duke() {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        ui \u003d new Ui();"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        taskLst \u003d new TaskList();"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        // Terminate if unable to initialise storage"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"            storage \u003d new Storage();"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"            storage.fillTaskLst(taskLst);"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"            ui.print(String.format(\"Unable to initialise duke.storage.Storage: %s\", e));"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"            System.exit(1);"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"     * The run method of Duke. Do `new Duke().run()` to start Duke."},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"    public void run() {"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"        boolean isExit \u003d false;"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"        ui.printWelcomeMsg();"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        while (!isExit) {"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"            try {"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"                String input \u003d sc.nextLine();"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"                Command cmd \u003d Parser.parse(input);"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"                String resp \u003d cmd.execute(taskLst);"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"                isExit \u003d cmd.isExit();"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"                storage.saveTaskLst(taskLst);"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"                ui.print(resp);"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"            } catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"                ui.print(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"    public static void main(String[] args) {"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"        new Duke().run();"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"ivantjh":62,"-":2}},{"path":"src/main/java/duke/command/AddCmd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskType;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"import duke.task.Todo;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":" * Represents the execution of Add Command"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"public class AddCmd extends Command {"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    private final String cmdArgs;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    private final TaskType taskType;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    public AddCmd(String cmdArgs, TaskType taskType) {"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"        this.cmdArgs \u003d cmdArgs;"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    private void validateNotEmpty(String str, String msg) {"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        if (str.equals(\"\")) {"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"            throw new DukeException(msg);"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    private String[] trimStrArr(String[] strArr) {"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"        for (int i \u003d 0; i \u003c strArr.length; i++) {"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"            strArr[i] \u003d strArr[i].trim();"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        return strArr;"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"     * Returns the response of the bot after execution of command"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"     * @param lst TaskList"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     * @return response"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"    public String execute(TaskList lst) {"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        Task task \u003d null;"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"        String[] words;"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"        validateNotEmpty(cmdArgs, \"OOPS!!! The description of a task cannot be empty\");"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"        switch (taskType) {"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"        case TODO:"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"            task \u003d new Todo(cmdArgs);"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"        case EVENT:"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"            words \u003d cmdArgs.split(\"/at\");"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"            trimStrArr(words);"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"            task \u003d new Event(words[0], words[1]);"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"        case DEADLINE:"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"            words \u003d cmdArgs.split(\"/by\");"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"            trimStrArr(words);"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"            task \u003d new Deadline(words[0], words[1]);"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"        lst.add(task);"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"        String resp \u003d \"Got it. I\u0027ve added this task:\\n\";"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"        resp +\u003d String.format(\"\\t%s\\n\", task.toString());"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":"        resp +\u003d String.format(\"Now you have %d tasks in the list\\n\", lst.size());"},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":"        return resp;"},{"lineNumber":72,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":73}},{"path":"src/main/java/duke/command/ByeCmd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":" * Represents the execution of Bye Command"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"public class ByeCmd extends Command {"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    private static final String byeMsg \u003d \"Bye. Hope to see you again soon!\\n\";"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"     * Returns true if processed command wants the bot to exit"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"     * @return true if processed command wants the bot to exit"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    public boolean isExit() {"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"        return true;"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"     * Returns the response of the bot after execution of command"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"     * @param lst TaskList"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"     * @return response"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"    public String execute(TaskList lst) {"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        return byeMsg;"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":31}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":" * Represents the execution of a Command. All Commands should inherit this base class."},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"public abstract class Command {"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"     * Returns true if processed command wants the bot to exit"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"     * @return true if processed command wants the bot to exit"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    public boolean isExit() {"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"        return false;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     * Returns the response of the bot after execution of command"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"     * @param taskLst TaskList"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"     * @return response"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    public abstract String execute(TaskList taskLst);"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":25}},{"path":"src/main/java/duke/command/DeleteCmd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":" * Represents the execution of Delete Command"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"public class DeleteCmd extends Command {"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    private final String cmdArgs;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    public DeleteCmd(String cmdArgs) {"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"        this.cmdArgs \u003d cmdArgs;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"     * Returns the response of the bot after execution of command"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"     * @param lst TaskList"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"     * @return response"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    public String execute(TaskList lst) {"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"        int idx \u003d Integer.parseInt(cmdArgs) - 1;"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        if (idx \u003c 0 || idx \u003e\u003d lst.size()) {"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"            throw new DukeException(String.format(\"Item no. %d cannot be found in list\", idx + 1));"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"        Task t \u003d lst.remove(idx);"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"            + String.format(\"\\t%s\\n\", t.toString())"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"            + String.format(\"Now you have %d tasks in the list\\n\", lst.size());"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":35}},{"path":"src/main/java/duke/command/DoneCmd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":" * Represents the execution of Done Command"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"public class DoneCmd extends Command {"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    private final String cmdArgs;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    public DoneCmd(String cmdArgs) {"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"        this.cmdArgs \u003d cmdArgs;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"     * Returns the response of the bot after execution of command"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"     * @param lst TaskList"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"     * @return response"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    public String execute(TaskList lst) {"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"        int idx \u003d Integer.parseInt(cmdArgs) - 1;"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        if (idx \u003c 0 || idx \u003e\u003d lst.size()) {"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"            throw new DukeException(String.format(\"Item no. %d cannot be found in list\", idx + 1));"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"        Task t \u003d lst.get(idx);"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"        t.markDone();"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\""},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"                + String.format(\"%s\\n\", t.toString());"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":36}},{"path":"src/main/java/duke/command/FindCmd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"public class FindCmd extends Command {"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"    private final String cmdArgs;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"    public FindCmd(String cmdArgs) {"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"        this.cmdArgs \u003d cmdArgs;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    public String execute(TaskList lst) {"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"        // Split the search terms and search individually"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"        String[] wordsToFind \u003d cmdArgs.split(\" \");"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"        HashSet\u003cTask\u003e hs \u003d new HashSet\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"        for (String word: wordsToFind) {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"            hs.addAll(lst.find(word));"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        Iterator\u003cTask\u003e iter \u003d hs.iterator();"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        if (!iter.hasNext()) {"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"            return String.format(\"There are no matching tasks in your list for search \u0027%s\u0027.\\n\", cmdArgs);"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        sb.append(String.format(\"Here are the matching tasks in your list for search \u0027%s\u0027:\\n\", cmdArgs));"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        int sn \u003d 1;"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"        while (iter.hasNext()) {"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"            sb.append(String.format(\"%d. %s\\n\", sn, iter.next()));"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"            sn++;"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"        return sb.toString();"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":42}},{"path":"src/main/java/duke/command/ListCmd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":" * Represents the execution of List Command"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"public class ListCmd extends Command {"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"     * Returns the response of the bot after execution of command"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"     * @param lst TaskList"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"     * @return response"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    public String execute(TaskList lst) {"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"        for (int i \u003d 0; i \u003c lst.size(); i++) {"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"            Task task \u003d lst.get(i);"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"            sb.append(String.format(\"%d. %s\\n\", i + 1, task.toString()));"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        return sb.toString();"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":26}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":" * Base exception class of Duke"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"public class DukeException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"    public DukeException(String msg) {"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"        super(msg);"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.command.*;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.exception.DukeException;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskType;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":" * Interprets user input and routes them to the correct command"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"public class Parser {"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"     * Returns the Command to process the line of user input. Returned Commands are initialised with arguments"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"     * from user input."},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"     * @param input A line of user input"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     * @return Command"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"    public static Command parse(String input) {"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"        String[] words \u003d input.trim().split(\" \");"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        String cmdStr \u003d words[0];"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"        // Recombine cmdArgs for further parsing in individual cmd classes"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        String[] remain \u003d Arrays.copyOfRange(words, 1, words.length);"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        String cmdArgs \u003d String.join(\" \", remain);"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        Command cmd;"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"        switch (cmdStr) {"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        case \"bye\":"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"            cmd \u003d new ByeCmd();"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"        case \"list\":"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"            cmd \u003d new ListCmd();"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"        case \"done\":"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"            cmd \u003d new DoneCmd(cmdArgs);"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"        case \"todo\":"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"        case \"deadline\":"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"        case \"event\":"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"            cmd \u003d new AddCmd(cmdArgs, TaskType.valueOf(cmdStr.toUpperCase()));"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"        case \"delete\":"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"            cmd \u003d new DeleteCmd(cmdArgs);"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"        case \"find\":"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"            cmd \u003d new FindCmd(cmdArgs);"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"        default:"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that command means :-(\");"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"        return cmd;"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":58}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import duke.task.Deadline;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import duke.task.Event;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"import duke.task.Todo;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"import java.io.BufferedReader;"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"import java.io.BufferedWriter;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"import java.io.File;"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"import java.io.FileReader;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"import java.io.FileWriter;"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"import java.io.IOException;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":" * Represents the external storage used by Duke to remember tasks on restarts. Duke is currently saving tasks to a"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":" * single text file and reading from that file on startup."},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":" *"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"public class Storage {"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    private final static String DIR_NAME \u003d System.getProperty(\"user.dir\") + File.separator + \"data\";"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"    private final static String FILE_NAME \u003d DIR_NAME + File.separator + \"tasks.txt\";"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"    private final File file;"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"    public Storage() throws IOException {"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"        File dir \u003d new File(DIR_NAME);"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"        file \u003d new File(FILE_NAME);"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        //noinspection ResultOfMethodCallIgnored"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        dir.mkdir();"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"        //noinspection ResultOfMethodCallIgnored"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"        file.createNewFile();"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"     * Fills the given TaskList with data read from storage. The TaskList will be modified in-place."},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"     * @param taskLst the TaskList to have data filled in"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"     * @return taskLst the original TaskList"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"     * @throws IOException if there is a problem reading from file"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"    public TaskList fillTaskLst(TaskList taskLst) throws IOException {"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(file));"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"            String line;"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"            while ((line \u003d br.readLine()) !\u003d null) {"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"                Task t \u003d parseLine(line);"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"                taskLst.add(t);"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"            br.close();"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"        } catch (FileNotFoundException ignored) {"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"        return taskLst;"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"    private Task parseLine(String line) {"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":"        // Need double backslashes to escape the literal \"\\|\" or else it will be parsed as an escape sequence"},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"        String[] words \u003d line.split(\" \\\\| \");"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":"        String taskTypeStr \u003d words[0];"},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"        Task t;"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":"        switch (taskTypeStr) {"},{"lineNumber":72,"author":{"gitId":"ivantjh"},"content":"        case \"T\":"},{"lineNumber":73,"author":{"gitId":"ivantjh"},"content":"            t \u003d Todo.deserialize(line);"},{"lineNumber":74,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":75,"author":{"gitId":"ivantjh"},"content":"        case \"D\":"},{"lineNumber":76,"author":{"gitId":"ivantjh"},"content":"            t \u003d Deadline.deserialize(line);"},{"lineNumber":77,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":78,"author":{"gitId":"ivantjh"},"content":"        case \"E\":"},{"lineNumber":79,"author":{"gitId":"ivantjh"},"content":"            t \u003d Event.deserialize(line);"},{"lineNumber":80,"author":{"gitId":"ivantjh"},"content":"            break;"},{"lineNumber":81,"author":{"gitId":"ivantjh"},"content":"        default:"},{"lineNumber":82,"author":{"gitId":"ivantjh"},"content":"            throw new DukeException(\"Found invalid task type. Allowed task types: [T, D, E]\");"},{"lineNumber":83,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":85,"author":{"gitId":"ivantjh"},"content":"        return t;"},{"lineNumber":86,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":88,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":89,"author":{"gitId":"ivantjh"},"content":"     * Saves the tasks in the given TaskList to storage."},{"lineNumber":90,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"ivantjh"},"content":"     * @param taskLst the TaskList to retrieve tasks from"},{"lineNumber":92,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":93,"author":{"gitId":"ivantjh"},"content":"    public void saveTaskLst(TaskList taskLst) {"},{"lineNumber":94,"author":{"gitId":"ivantjh"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":95,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":96,"author":{"gitId":"ivantjh"},"content":"        taskLst.forEach(t -\u003e {"},{"lineNumber":97,"author":{"gitId":"ivantjh"},"content":"            sb.append(t.getSerialized());"},{"lineNumber":98,"author":{"gitId":"ivantjh"},"content":"            sb.append(\"\\n\");"},{"lineNumber":99,"author":{"gitId":"ivantjh"},"content":"        });"},{"lineNumber":100,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":101,"author":{"gitId":"ivantjh"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"ivantjh"},"content":"            BufferedWriter bw \u003d new BufferedWriter(new FileWriter(file));"},{"lineNumber":103,"author":{"gitId":"ivantjh"},"content":"            bw.write(sb.toString());"},{"lineNumber":104,"author":{"gitId":"ivantjh"},"content":"            bw.flush();"},{"lineNumber":105,"author":{"gitId":"ivantjh"},"content":"            bw.close();"},{"lineNumber":106,"author":{"gitId":"ivantjh"},"content":"        } catch (Exception e) {"},{"lineNumber":107,"author":{"gitId":"ivantjh"},"content":"            throw new DukeException(String.format(\"Error with saveTaskLst: %s\", e));"},{"lineNumber":108,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":110}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import duke.util.DateTime;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":" * Represents a task that needs to be done by a given deadline."},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    private final DateTime by;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    public Deadline(String content, String by) {"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"        super(content);"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"        this.by \u003d new DateTime(by);"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    private Deadline(String content, boolean isDone, DateTime dt) {"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"        super(content, isDone);"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"        this.by \u003d dt;"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"    public DateTime getBy() {"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"        return by;"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"     * Deserialize the given string to create a Deadline instance. The string should be generated by"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"     * #getSerialized()."},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"     * @param str the string to deserialize from"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"     * @return the created Deadline instance"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"     * @see #getSerialized()"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"    public static Deadline deserialize(String str) {"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        String[] words \u003d str.split(\" \\\\| \");"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"        boolean isDone \u003d Boolean.parseBoolean(words[1]);"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"        String content \u003d words[2];"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"        boolean isDateOnly \u003d Boolean.parseBoolean(words[3]);"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"        String isoStr \u003d words[4];"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"        return new Deadline(content, isDone, DateTime.fromISODateTime(isoStr, isDateOnly));"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"     * Serialise the Deadline instance to a string where the Deadline instance can be recreated from."},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"     * @return the serialized Deadline instance"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"    public String getSerialized() {"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"D | %s | %s | %s | %s\", getIsDone(), getContent(),"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"                by.getDateOnly(), by.toISODateTime());"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"     * Returns true if the task contains str in one of its fields"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"     * @param str the target string"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"     * @return true if the task contains str in one of its fields"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"    public boolean hasStrInProps(String str) {"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"        return getContent().contains(str);"},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"[D][%s] %s (by: %s)\", getStatusIcon(), getContent(), by);"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":70}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":" * Represents a task that happens at a specific location and/or date and time."},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"public class Event extends Task {"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"    private final String at;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    public Event(String content, String at) {"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"        super(content);"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"        this.at \u003d at;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    private Event(String content, boolean isDone, String at) {"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"        super(content, isDone);"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"        this.at \u003d at;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    public String getAt() {"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"        return at;"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"     * Deserialize the given string to create an Event instance. The string should be generated by #getSerialized()."},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"     * @param str the string to deserialize from"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"     * @return the created Event instance"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"     * @see #getSerialized()"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"    public static Event deserialize(String str) {"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"        String[] words \u003d str.split(\" \\\\| \");"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        boolean isDone \u003d Boolean.parseBoolean(words[1]);"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        String content \u003d words[2];"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"        String at \u003d words[3];"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"        return new Event(content, isDone, at);"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"     * Serialize the Event instance to a string where the Event instance can be recreated from."},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"     * @return the serialized Event instance"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"    public String getSerialized() {"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"E | %s | %s | %s\", getIsDone(), getContent(), at);"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"     * Returns true if the task contains str in one of its fields"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"     * @param str the target string"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"     * @return true if the task contains str in one of its fields"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"    public boolean hasStrInProps(String str) {"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"        return getContent().contains(str) || at.contains(str);"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"[E][%s] %s (at: %s)\", getStatusIcon(), getContent(), at);"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":64}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":" * Base Task class."},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"public abstract class Task {"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"    private final String content;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"    public Task(String content) {"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"        this.content \u003d content;"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"        isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    protected Task(String content, boolean isDone) {"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"        this.content \u003d content;"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    public String getStatusIcon() {"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    public String getContent() {"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"        return content;"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"    public boolean getIsDone() {"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        return isDone;"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"    public void markDone() {"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        isDone \u003d true;"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"    public abstract String getSerialized();"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"    public abstract boolean hasStrInProps(String str);"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), getContent());"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":44}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.util.function.Consumer;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":" * Represents the list where tasks are stored."},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"    private final ArrayList\u003cTask\u003e lst;"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"        lst \u003d new ArrayList\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     * Returns the number of tasks in this list"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"     * @return the number of tasks in this list"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    public int size() {"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        return lst.size();"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"     * Appends the task to the end of the list."},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"     * @param task task to be appended to this list"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"    public void add(Task task) {"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        lst.add(task);"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"     * Returns the task at the specified position in this list."},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"     * @param index index of the task to return"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"     * @return the task at the specified position in this list"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"    public Task get(int index) {"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"        return lst.get(index);"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"     * Returns the task at the specified position in this list. Shifts any subsequent tasks to the left."},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"     * @param index the index of the task to be removed"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"     * @return the task that was removed from this list"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    public Task remove(int index) {"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        return lst.remove(index);"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"     * Performs the given action for each task in the list until all tasks have been processed. Actions are performed"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"     * in order of iteration."},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"     * @param action the action to be performed for each task"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"    public void forEach(Consumer\u003c? super Task\u003e action) {"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":"        lst.forEach(action);"},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"    public List\u003cTask\u003e find(String target) {"},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":"        return lst.stream().filter(task -\u003e task.hasStrInProps(target)).collect(Collectors.toList());"},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":69}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":" * Represents the available types of Task"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"public enum TaskType {"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"    TODO,"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"    DEADLINE,"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    EVENT"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":10}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":" * Represents a task that needs to be done."},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"    public Todo(String content) {"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"        super(content);"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    private Todo(String content, boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"        super(content, isDone);"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"     * Deserialize the given string to create a Todo instance. The string should be generated by #getSerialized()."},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"     * @param str the string to deserialize from"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"     * @return the created Todo instance"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"     * @see #getSerialized()"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    public static Todo deserialize(String str) {"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"        String[] words \u003d str.split(\" \\\\| \");"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"        boolean isDone \u003d Boolean.parseBoolean(words[1]);"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"        String content \u003d words[2];"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        return new Todo(content, isDone);"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"     * Serialise the Todo instance to a string where the Todo instance can be recreated from."},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"     * @return the serialized Todo instance"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"    public String getSerialized() {"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"T | %s | %s\", getIsDone(), getContent());"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"     * Returns true if the task contains str in one of its fields"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"     * @param str the target string"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"     * @return true if the task contains str in one of its fields"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"    public boolean hasStrInProps(String str) {"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":"        return getContent().contains(str);"},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":"        return String.format(\"[T][%s] %s\", getStatusIcon(), getContent());"},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":55}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":" * Represents the UI of Duke. Provides methods to print to screen."},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"    private void printLine() {"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"        System.out.println(\"\\t____________________________________________________________\");"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    public void printWelcomeMsg() {"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"        String logo \u003d \" ____        _\\n\""},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"                + \"|  _ \\\\ _   _| | _____\\n\""},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"        String msg \u003d logo +"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"                \"Hello! I am duke\\n\" +"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"                \"What can I do for you?\\n\";"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"        print(msg);"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":"    public void print(String msg) {"},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"        printLine();"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        msg.lines().forEach(line -\u003e System.out.printf(\"\\t%s\\n\", line));"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        printLine();"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":29}},{"path":"src/main/java/duke/util/DateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import java.time.temporal.ChronoField;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":" * Represents a date-time object without a timezone."},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":" */"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"public class DateTime {"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"    private final LocalDateTime ldt;"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    private final boolean dateOnly;"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    /** Formatter used for parsing date/datetime strings */"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    private final static DateTimeFormatter PARSE_FORMATTER;"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"    /** Output formatter used when instance does not have dateOnly */"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"    private final static DateTimeFormatter DATETIME_FORMATTER;"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"    /** Output formatter used when instance has dateOnly */"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    private final static DateTimeFormatter DATE_FORMATTER;"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"    static {"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"        // Put the pattern with more info in front as"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        // longer datetime strings are unable to be parsed by shorter formatters"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        String[] patterns \u003d new String[]{\"dd/MM/yyyy HHmm\", \"dd/MM/yyyy\"};"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"        DateTimeFormatterBuilder builder \u003d new DateTimeFormatterBuilder();"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":"        Arrays.stream(patterns).map(DateTimeFormatter::ofPattern).forEach(builder::appendOptional);"},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        PARSE_FORMATTER \u003d builder"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"                .parseDefaulting(ChronoField.HOUR_OF_DAY, 0)"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"                .parseDefaulting(ChronoField.MINUTE_OF_HOUR, 0)"},{"lineNumber":36,"author":{"gitId":"ivantjh"},"content":"                .parseDefaulting(ChronoField.SECOND_OF_MINUTE, 0)"},{"lineNumber":37,"author":{"gitId":"ivantjh"},"content":"                .toFormatter();"},{"lineNumber":38,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":39,"author":{"gitId":"ivantjh"},"content":"        DATETIME_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HHmm dd MMM yyyy\");"},{"lineNumber":40,"author":{"gitId":"ivantjh"},"content":"        DATE_FORMATTER \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":41,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":43,"author":{"gitId":"ivantjh"},"content":"    public DateTime(String str) {"},{"lineNumber":44,"author":{"gitId":"ivantjh"},"content":"        // Length of dd/MM/yyyy"},{"lineNumber":45,"author":{"gitId":"ivantjh"},"content":"        dateOnly \u003d str.length() \u003c\u003d 10;"},{"lineNumber":46,"author":{"gitId":"ivantjh"},"content":"        ldt \u003d LocalDateTime.parse(str, PARSE_FORMATTER);"},{"lineNumber":47,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":49,"author":{"gitId":"ivantjh"},"content":"    private DateTime(LocalDateTime ldt, boolean dateOnly) {"},{"lineNumber":50,"author":{"gitId":"ivantjh"},"content":"        this.ldt \u003d ldt;"},{"lineNumber":51,"author":{"gitId":"ivantjh"},"content":"        this.dateOnly \u003d dateOnly;"},{"lineNumber":52,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":54,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"ivantjh"},"content":"     * Returns an ISO-8601 datetime string. If the instance was created with a date string (without time),"},{"lineNumber":56,"author":{"gitId":"ivantjh"},"content":"     * hour, minute and second fields will be defaulted to 0."},{"lineNumber":57,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"ivantjh"},"content":"     * @return an ISO-8601 datetime string"},{"lineNumber":59,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"ivantjh"},"content":"    public String toISODateTime() {"},{"lineNumber":61,"author":{"gitId":"ivantjh"},"content":"        return ldt.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);"},{"lineNumber":62,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":64,"author":{"gitId":"ivantjh"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"ivantjh"},"content":"     * Recreates a DateTime instance from an ISO-8601 datetime string. The dateOnly parameter will indicate if the time"},{"lineNumber":66,"author":{"gitId":"ivantjh"},"content":"     * details should be ignored."},{"lineNumber":67,"author":{"gitId":"ivantjh"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"ivantjh"},"content":"     * @param str the ISO-8601 datetime string"},{"lineNumber":69,"author":{"gitId":"ivantjh"},"content":"     * @param dateOnly the boolean indicating if time details should be ignored"},{"lineNumber":70,"author":{"gitId":"ivantjh"},"content":"     * @return a DateTime instance created from the given ISO-8601 datetime string"},{"lineNumber":71,"author":{"gitId":"ivantjh"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"ivantjh"},"content":"    public static DateTime fromISODateTime(String str, boolean dateOnly) {"},{"lineNumber":73,"author":{"gitId":"ivantjh"},"content":"        return new DateTime(LocalDateTime.parse(str, DateTimeFormatter.ISO_LOCAL_DATE_TIME), dateOnly);"},{"lineNumber":74,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":76,"author":{"gitId":"ivantjh"},"content":"    public boolean getDateOnly() {"},{"lineNumber":77,"author":{"gitId":"ivantjh"},"content":"        return dateOnly;"},{"lineNumber":78,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":80,"author":{"gitId":"ivantjh"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"ivantjh"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"ivantjh"},"content":"        if (dateOnly) {"},{"lineNumber":83,"author":{"gitId":"ivantjh"},"content":"            return ldt.format(DATE_FORMATTER);"},{"lineNumber":84,"author":{"gitId":"ivantjh"},"content":"        }"},{"lineNumber":85,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":86,"author":{"gitId":"ivantjh"},"content":"        return ldt.format(DATETIME_FORMATTER);"},{"lineNumber":87,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":88}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"public class DukeTest {"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    public void dummyTest() {"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"        assertEquals(2, 2);"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":12}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"public class TaskListTest {"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    TaskList lst;"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"    @BeforeEach"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"    void init() {"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"        lst \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    void add_validTask_success() {"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"        Task todo \u003d new Todo(\"test todo\");"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"        lst.add(todo);"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"        assertEquals(1, lst.size());"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"        assertEquals(todo, lst.get(0));"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":25,"author":{"gitId":"ivantjh"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"ivantjh"},"content":"    void get_validTask_success() {"},{"lineNumber":27,"author":{"gitId":"ivantjh"},"content":"        Task todo1 \u003d new Todo(\"test todo 1\");"},{"lineNumber":28,"author":{"gitId":"ivantjh"},"content":"        Task todo2 \u003d new Todo(\"test todo 2\");"},{"lineNumber":29,"author":{"gitId":"ivantjh"},"content":"        lst.add(todo1);"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"        lst.add(todo2);"},{"lineNumber":31,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":32,"author":{"gitId":"ivantjh"},"content":"        assertEquals(todo1, lst.get(0));"},{"lineNumber":33,"author":{"gitId":"ivantjh"},"content":"        assertEquals(todo2, lst.get(1));"},{"lineNumber":34,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":35}},{"path":"src/test/java/duke/util/DateTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"package duke.util;"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"public class DateTimeTest {"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"    void dateTime_acceptedInputs_noExceptionThrown() {"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"        assertDoesNotThrow(() -\u003e {"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"            new DateTime(\"05/06/2021\");"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"            new DateTime(\"05/06/2021 1250\");"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"        });"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"    void toString_acceptedInputs_printsCorrectly() {"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"        assertEquals(\"12 Dec 2020\", new DateTime(\"12/12/2020\").toString());"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":"        assertEquals(\"2359 06 Aug 2021\", new DateTime(\"06/08/2021 2359\").toString());"},{"lineNumber":21,"author":{"gitId":"ivantjh"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"}"}],"authorContributionMap":{"ivantjh":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ivantjh"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"ivantjh"},"content":"deadline return book /by 12/12/2020"},{"lineNumber":3,"author":{"gitId":"ivantjh"},"content":"deadline submit project /by 21/01/2021 2359"},{"lineNumber":4,"author":{"gitId":"ivantjh"},"content":"find book"},{"lineNumber":5,"author":{"gitId":"ivantjh"},"content":"find nothing"},{"lineNumber":6,"author":{"gitId":"ivantjh"},"content":"list"},{"lineNumber":7,"author":{"gitId":"ivantjh"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":8,"author":{"gitId":"ivantjh"},"content":"todo eat lunch"},{"lineNumber":9,"author":{"gitId":"ivantjh"},"content":"blah"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"todo"},{"lineNumber":11,"author":{"gitId":"ivantjh"},"content":"list"},{"lineNumber":12,"author":{"gitId":"ivantjh"},"content":"done 2"},{"lineNumber":13,"author":{"gitId":"ivantjh"},"content":"done 99"},{"lineNumber":14,"author":{"gitId":"ivantjh"},"content":"list"},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"list"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"bye"}],"authorContributionMap":{"ivantjh":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"ivantjh"},"content":"javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"ivantjh":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"ivantjh"},"content":"# delete data files saved fro previous run"},{"lineNumber":16,"author":{"gitId":"ivantjh"},"content":"if [ -e \"./data/tasks.txt\" ]"},{"lineNumber":17,"author":{"gitId":"ivantjh"},"content":"then"},{"lineNumber":18,"author":{"gitId":"ivantjh"},"content":"  rm data/tasks.txt"},{"lineNumber":19,"author":{"gitId":"ivantjh"},"content":"fi"},{"lineNumber":20,"author":{"gitId":"ivantjh"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":22,"author":{"gitId":"ivantjh"},"content":"# Can just direct javac to compile Duke.java, will find relevant classes under classpath"},{"lineNumber":23,"author":{"gitId":"ivantjh"},"content":"if ! javac -classpath ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/Duke.java"},{"lineNumber":24,"author":{"gitId":"-"},"content":"then"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":27,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":30,"author":{"gitId":"ivantjh"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":33,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":34,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":37,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":38,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"then"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":42,"author":{"gitId":"-"},"content":"else"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":44,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":45,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"ivantjh":9,"-":36}}]
