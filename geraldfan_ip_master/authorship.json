[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    mainClassName \u003d \"mike.Launcher\""},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"}"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"test {"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"    useJUnitPlatform()"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"    archiveBaseName \u003d \"mike\""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"geraldfan":21,"-":44}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"[T][?]read books"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":"[D][?]return book (by: Jan 25 2021)"},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"[E][?]drink (at: Feb 01 2021)"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"[T][?]join sports club"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"[T][?]go home"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"[T][?]celebrate cny"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"[F][?]running (needs: 1 hour)"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"[T][?]Fix this code"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"[E][?]Fix this code  (at: Feb 01 2021)"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"[D][?]Fix this code  (by: Feb 01 2021)"}],"authorContributionMap":{"geraldfan":10}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"### Add a Task:"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"Add a task to Mike\u0027s storage. "},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"There are 4 types of tasks:"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"1. todo"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"2. event"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"3. description"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"4. fixed duration task"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"#### todo - Add a todo task to Mike\u0027s storage"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"Todo is a task with no time restrictions. The format should be:"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"todo {description of the task}"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"Example of usage: "},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"`todo Fix this code`"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"`Got it. I\u0027ve added this task`"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"`[T][X]Fix this code`"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"`Now you have {number of tasks} tasks in the list.`"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"#### event - Add an event task to Mike\u0027s storage"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"Event is a task that needs to be completed on the specified date. The format should be:"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"event {description of the task} /at YYYY-MM-DD"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"Example of usage: "},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"`event Fix this code /at 2021-02-01`"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"Expected outcome:"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"`Got it. I\u0027ve added this task`"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"`[E][X]Fix this code (at: Feb 01 2021)`"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"`Now you have {number of tasks} tasks in the list.`"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"#### deadline - Add an deadline task to Mike\u0027s storage"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"Deadline is a task that needs to be completed before the specified date. The format should be:"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"deadline {description of the task} /by YYYY-MM-DD"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"Example of usage: "},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"`deadline Fix this code /by 2021-02-01`"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"Expected outcome:"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"`Got it. I\u0027ve added this task`"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"`[D][X]Fix this code (by: Feb 01 2021)`"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"`Now you have {number of tasks} tasks in the list.`"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"#### fixed duration task - Add an fixed duration task to Mike\u0027s storage"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"Fixed duration task is a task with a fixed time duration. The format should be:"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"fixed {description of the task} /needs {amount of time}"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"Example of usage: "},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"`fixed Fix this code /needs 30 hours`"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"Expected outcome:"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"`Got it. I\u0027ve added this task`"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"`[F][X]Fix this code (needs: 30 hours)`"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"`Now you have {number of tasks} tasks in the list.`"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"### Mark a completed task as done:"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"Once a task has been completed, the user can instruct Mike to mark the corresponding task."},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"#### done - Mark a completed task as done. The format should be:"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"done {index of completed task}"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"Example of usage: "},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"`done 1`"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"Expected outcome:"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"`Nice! I\u0027ve marked this task as done:`"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"`[T][X] Fix this code`"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"### Delete a task:"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"Delete the task at the index specified."},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"#### delte - Delete a task in Mike\u0027s storage. The format should be:"},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":"delete {index of completed task}"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"Example of usage: "},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"`delete 1`"},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"Expected outcome:"},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"`Noted. I\u0027ve removed this task:`"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"`[T][X] Fix this code`"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"`Now you have {number of tasks} tasks in the list.`"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"### List the tasks:"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"List all the tasks in Mike\u0027s storage."},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"#### list - List all the tasks in Mike\u0027s storage. The format should be:"},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"list"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"Example of usage: "},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"`list 1`"},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"Expected outcome:"},{"lineNumber":128,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"`Here are the tasks in your list:`"},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"`1.[T][X] Fix this code`"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":132,"author":{"gitId":"geraldfan"},"content":"### Find tasks:"},{"lineNumber":133,"author":{"gitId":"geraldfan"},"content":"Find tasks in Mike\u0027s storage corresponding to the keyword."},{"lineNumber":134,"author":{"gitId":"geraldfan"},"content":"#### find - Find tasks corresponding to the keyword. The format should be:"},{"lineNumber":135,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":136,"author":{"gitId":"geraldfan"},"content":"find {keyword}"},{"lineNumber":137,"author":{"gitId":"geraldfan"},"content":"```"},{"lineNumber":138,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"Example of usage: "},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":141,"author":{"gitId":"geraldfan"},"content":"`find code`"},{"lineNumber":142,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"Expected outcome:"},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":145,"author":{"gitId":"geraldfan"},"content":"  `Here are the matching tasks in your list:`"},{"lineNumber":146,"author":{"gitId":"geraldfan"},"content":"`[T][X] Fix this code` "},{"lineNumber":147,"author":{"gitId":"geraldfan"},"content":"`[E][X]Fix this code (at: Feb 01 2021)`"},{"lineNumber":148,"author":{"gitId":"geraldfan"},"content":"`[D][X]Fix this code (by: Feb 01 2021)`"},{"lineNumber":149,"author":{"gitId":"geraldfan"},"content":"`[F][X]Fix this code (needs: 30 hours)`"}],"authorContributionMap":{"geraldfan":136,"-":13}},{"path":"src/main/java/mike/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":" * The set of commands that Mike can identify"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, FIND, FIXED"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":8}},{"path":"src/main/java/mike/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":12}},{"path":"src/main/java/mike/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.ui.MainWindow;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":" * GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    private Mike mike \u003d new Mike(\"data/tasks.txt\");"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setMike(mike);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":33}},{"path":"src/main/java/mike/Mike.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import mike.ui.TextUi;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"public class Mike {"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    private final Storage storage;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    private TaskList taskList;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    private final TextUi ui;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     * Create a Mike Object with a taskList from an existing file"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * Otherwise creates a Mike Object with an empty taskList"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     * @param filePath the path of the *.txt file holding information of existing tasks"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    public Mike(String filePath) {"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"        this.ui \u003d new TextUi();"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"            taskList \u003d new TaskList(storage.loadTasks());"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        } catch (ParseException e) {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"            ui.showLoadingError(e);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"            this.taskList \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"            ui.showIOError(e);"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"     * Gets response when \"BYE\" is the input"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for BYE command"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForByeCommand() {"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        return ui.showExitUi();"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"     * Gets response when \"LIST\" is the input"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for LIST command"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForListCommand() {"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"        return ui.showListUi(taskList);"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"     * Gets response when \"DONE x\" is the input"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     * @param descriptionInput x as a String"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for DONE command"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForDoneCommand(String descriptionInput) {"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"            int i \u003d Integer.parseInt(descriptionInput);"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"            return ui.showMarkSuccess(taskList.mark(i));"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"            return ui.showIndexOutOfBoundsError(taskList);"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"     * Gets response when \"DELETE x\" is the input"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"     * @param descriptionInput x as a String"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for DELETE command"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForDeleteCommand(String descriptionInput) {"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"            int i \u003d Integer.parseInt(descriptionInput);"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"            Task deletedTask \u003d taskList.delete(i);"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"            storage.save(this.taskList);"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"            return ui.showDeleteSuccess(taskList, deletedTask);"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"            return ui.showIndexOutOfBoundsError(taskList);"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"        } catch (IOException e1) {"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"            return ui.showGeneralError();"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"     * Gets response when \"FIND {keyword}\" is the input"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"     * @param descriptionInput the {keyword} as a String"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for FIND command"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForFindCommand(String descriptionInput) {"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"        return ui.showMatchingResults(taskList.find(descriptionInput));"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"     * Gets response when \"TODO/DEADLINE/EVENT {description}\" is the input"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"     * @param command          TODO/DEADLINE/EVENT command"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"     * @param descriptionInput the {description} as a String"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for TODO/DEADLINE/EVENT/ command"},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForAddCommand(Command command, String descriptionInput) {"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"            Task addedTask \u003d Parser.parseDescription(command, descriptionInput);"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"            taskList.add(addedTask);"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"            String response \u003d ui.showAddSuccess(taskList, addedTask);"},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"            storage.save(taskList);"},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":"            return response;"},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"        } catch (ParseException e) {"},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"            return ui.showError(e);"},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"        } catch (IOException e) {"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"            return ui.showIOError(e);"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":"            return ui.showDateTimeParseError(e);"},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"     * Gets a response if input is invalid"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for invalid input"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForInvalidInput() {"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"        return ui.showGeneralError();"},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":128,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"     * Gets command from a single-word user input"},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":132,"author":{"gitId":"geraldfan"},"content":"     * @return Command object"},{"lineNumber":133,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":134,"author":{"gitId":"geraldfan"},"content":"    private Command getCommandForSingleWord(String input) {"},{"lineNumber":135,"author":{"gitId":"geraldfan"},"content":"        return Parser.parseCommandForSingleWord(input);"},{"lineNumber":136,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":138,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"     * Gets command from a multiple-word user input"},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":141,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":142,"author":{"gitId":"geraldfan"},"content":"     * @return Command object"},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":"    private Command getCommandForMultipleWords(String input) {"},{"lineNumber":145,"author":{"gitId":"geraldfan"},"content":"        return Parser.parseCommandForMultipleWords(input);"},{"lineNumber":146,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":148,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"geraldfan"},"content":"     * Gets the response from a single-word user input"},{"lineNumber":150,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":152,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for a single-word user input"},{"lineNumber":153,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForSingleWord(String input) {"},{"lineNumber":155,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":156,"author":{"gitId":"geraldfan"},"content":"            Command command \u003d getCommandForSingleWord(input);"},{"lineNumber":157,"author":{"gitId":"geraldfan"},"content":"            switch (command) {"},{"lineNumber":158,"author":{"gitId":"geraldfan"},"content":"            case BYE:"},{"lineNumber":159,"author":{"gitId":"geraldfan"},"content":"                return getResponseForByeCommand();"},{"lineNumber":160,"author":{"gitId":"geraldfan"},"content":"            case LIST:"},{"lineNumber":161,"author":{"gitId":"geraldfan"},"content":"                return getResponseForListCommand();"},{"lineNumber":162,"author":{"gitId":"geraldfan"},"content":"            default:"},{"lineNumber":163,"author":{"gitId":"geraldfan"},"content":"                assert false;"},{"lineNumber":164,"author":{"gitId":"geraldfan"},"content":"                return getResponseForInvalidInput();"},{"lineNumber":165,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"geraldfan"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":167,"author":{"gitId":"geraldfan"},"content":"            return getResponseForInvalidInput();"},{"lineNumber":168,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":171,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"geraldfan"},"content":"     * Gets response for a multiple-words user input"},{"lineNumber":173,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":174,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":175,"author":{"gitId":"geraldfan"},"content":"     * @return text UI for a multipler-words user input"},{"lineNumber":176,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":177,"author":{"gitId":"geraldfan"},"content":"    private String getResponseForMultipleWords(String input) {"},{"lineNumber":178,"author":{"gitId":"geraldfan"},"content":"        Command command \u003d getCommandForMultipleWords(input);"},{"lineNumber":179,"author":{"gitId":"geraldfan"},"content":"        String descriptionInput \u003d getDescriptionInput(input);"},{"lineNumber":180,"author":{"gitId":"geraldfan"},"content":"        switch (command) {"},{"lineNumber":181,"author":{"gitId":"geraldfan"},"content":"        case DONE:"},{"lineNumber":182,"author":{"gitId":"geraldfan"},"content":"            return getResponseForDoneCommand(descriptionInput);"},{"lineNumber":183,"author":{"gitId":"geraldfan"},"content":"        case DELETE:"},{"lineNumber":184,"author":{"gitId":"geraldfan"},"content":"            return getResponseForDeleteCommand(descriptionInput);"},{"lineNumber":185,"author":{"gitId":"geraldfan"},"content":"        case FIND:"},{"lineNumber":186,"author":{"gitId":"geraldfan"},"content":"            return getResponseForFindCommand(descriptionInput);"},{"lineNumber":187,"author":{"gitId":"geraldfan"},"content":"        default:"},{"lineNumber":188,"author":{"gitId":"geraldfan"},"content":"            return getResponseForAddCommand(command, descriptionInput);"},{"lineNumber":189,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":190,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":192,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"geraldfan"},"content":"     * Gets the description portion of the user input"},{"lineNumber":194,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":195,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":196,"author":{"gitId":"geraldfan"},"content":"     * @return the description portion of the user input as a String"},{"lineNumber":197,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":198,"author":{"gitId":"geraldfan"},"content":"    private String getDescriptionInput(String input) {"},{"lineNumber":199,"author":{"gitId":"geraldfan"},"content":"        return Parser.parseDescriptionInput(input);"},{"lineNumber":200,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":201,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":202,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":203,"author":{"gitId":"geraldfan"},"content":"     * Checks if input has multiple words"},{"lineNumber":204,"author":{"gitId":"geraldfan"},"content":"     * throws a StringIndexOutOfBoundsException if input is a single word"},{"lineNumber":205,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":206,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":207,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":208,"author":{"gitId":"geraldfan"},"content":"    private void checkIfInputHasMultipleWords(String input) {"},{"lineNumber":209,"author":{"gitId":"geraldfan"},"content":"        int endIndexOfCommand \u003d input.indexOf(\u0027 \u0027);"},{"lineNumber":210,"author":{"gitId":"geraldfan"},"content":"        if (endIndexOfCommand \u003c 0 || endIndexOfCommand \u003e\u003d input.length()) {"},{"lineNumber":211,"author":{"gitId":"geraldfan"},"content":"            throw new StringIndexOutOfBoundsException();"},{"lineNumber":212,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":213,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":214,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":215,"author":{"gitId":"geraldfan"},"content":"    public String getResponse(String input) {"},{"lineNumber":216,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":217,"author":{"gitId":"geraldfan"},"content":"            checkIfInputHasMultipleWords(input);"},{"lineNumber":218,"author":{"gitId":"geraldfan"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":219,"author":{"gitId":"geraldfan"},"content":"            return getResponseForSingleWord(input);"},{"lineNumber":220,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":222,"author":{"gitId":"geraldfan"},"content":"            return getResponseForMultipleWords(input);"},{"lineNumber":223,"author":{"gitId":"geraldfan"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":224,"author":{"gitId":"geraldfan"},"content":"            return getResponseForInvalidInput();"},{"lineNumber":225,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":226,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":228,"author":{"gitId":"geraldfan"},"content":"    public static void main(String[] args) {"},{"lineNumber":229,"author":{"gitId":"geraldfan"},"content":"        Mike mike \u003d new Mike(\"data/tasks.txt\");"},{"lineNumber":230,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":231}},{"path":"src/main/java/mike/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":" * Extends RunTimeException and is thrown when parsing fails"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public class ParseException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"    public ParseException(String message) {"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"        this.description \u003d message;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":14}},{"path":"src/main/java/mike/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.*;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":" * Parses input from the user"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"public class Parser {"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"     * Returns a Task Object by parsing the description depending on the Command"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"     * @param command an object of the Command type"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     * @param input   the input of the user"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * @return the Task corresponding to the user\u0027s command"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if parsing fails"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    public static Task parseDescription(Command command, String input) throws ParseException {"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        switch (command) {"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        case TODO:"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"            return parseToDo(input);"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"        case DEADLINE:"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"            return parseDeadline(input);"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        case EVENT:"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"            return parseEvent(input);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        case FIXED:"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"            return parseFixedDurationTask(input);"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"        default:"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"The command is not valid\");"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"     * Returns a ToDo by parsing the input"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"     * Used when the command is todo"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"     * @param input the input from the user"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"     * @return a ToDo Object based on the input"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if the description is empty"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"    private static ToDo parseToDo(String input) throws ParseException {"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"        if (input.equals(\" \") || input.isEmpty()) {"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"        assert !input.isEmpty() : \"Input cannot be empty\";"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        return new ToDo(input);"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"     * Returns a Deadline by parsing the input"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"     * Used when the command is deadline"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"     * @param input the input from the user"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"     * @return a Deadline Object based on the input"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if the description is empty"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"    private static Deadline parseDeadline(String input) throws ParseException {"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"        if (input.equals(\" \") || input.isEmpty()) {"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        } else if (input.contains(\"/by \")) {"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"            int endIndexOfDescription \u003d input.indexOf(\"/by \");"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"            String deadlineDescription \u003d input.substring(0, endIndexOfDescription);"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"            assert !deadlineDescription.isEmpty() : \"Description of a deadline should not empty\";"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"            String deadline \u003d input.substring(endIndexOfDescription + 4);"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"            return new Deadline(deadlineDescription, deadline);"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD after the description\");"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"     * Returns an Event by parsing the input"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"     * Used when the command is event"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"     * @param input the input from the user"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"     * @return a Event Object based on the input from the user"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if the description is empty"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"    private static Event parseEvent(String input) throws ParseException {"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"        if (input.equals(\" \") || input.isEmpty()) {"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"        } else if (input.contains(\"/at \")) {"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"            int endIndexOfDescription \u003d input.indexOf(\"/at \");"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"            String eventDescription \u003d input.substring(0, endIndexOfDescription);"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"            assert !eventDescription.isEmpty() : \"Description of an event cannot be empty\";"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"            String eventTime \u003d input.substring(endIndexOfDescription + 4);"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"            return new Event(eventDescription, eventTime);"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/at YYYY-MM-DD after the description\");"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"    private static FixedDurationTask parseFixedDurationTask(String input) throws ParseException {"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"        if (input.equals(\" \") || input.isEmpty()) {"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The description of a fixed duration task cannot be empty.\");"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"        } else if (input.contains(\"/needs \")) {"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"            int endIndexOfDescription \u003d input.indexOf(\"/needs \");"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"            String fixedDurationTaskDescription \u003d input.substring(0, endIndexOfDescription);"},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":"            assert !fixedDurationTaskDescription.isEmpty() : \"Description of an event cannot be empty\";"},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":"            String fixedDurationTaskTime \u003d input.substring(endIndexOfDescription + 7);"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"            return new FixedDurationTask(fixedDurationTaskDescription, fixedDurationTaskTime);"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/at YYYY-MM-DD after the description\");"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"     * Returns a Task that is parsed from a String"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"     * Used to parse lines from a file for tasks"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":"     * @param line the String to be parsed for tasks"},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"     * @return a Task Object created from line"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"    public static Task parseLineInFile(String line) {"},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"        Task task;"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"        if (line.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"            task \u003d parseForToDoInFile(line);"},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"            task \u003d parseForDeadlineInFile(line);"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027E\u0027) {"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"            task \u003d parseForEventInFile(line);"},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027F\u0027) {"},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"            task \u003d parseForFixedDurationTaskInFile(line);"},{"lineNumber":128,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! It seems that the file might be corrupted.\");"},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":"        if (line.charAt(4) \u003d\u003d \u0027\\u2713\u0027) {"},{"lineNumber":132,"author":{"gitId":"geraldfan"},"content":"            task.markAsDone();"},{"lineNumber":133,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"geraldfan"},"content":"        return task;"},{"lineNumber":135,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":137,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"geraldfan"},"content":"     * Parse a single-word user input and returns a Command"},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":141,"author":{"gitId":"geraldfan"},"content":"     * @return a Command of the enum type"},{"lineNumber":142,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"    public static Command parseCommandForSingleWord(String input) {"},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":"        return Command.valueOf(input.toUpperCase(Locale.ROOT));"},{"lineNumber":145,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":146,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":147,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":148,"author":{"gitId":"geraldfan"},"content":"     * Parse a multiple-words user input and return a Command"},{"lineNumber":149,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":150,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":151,"author":{"gitId":"geraldfan"},"content":"     * @return a Command of the enum type"},{"lineNumber":152,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":153,"author":{"gitId":"geraldfan"},"content":"    public static Command parseCommandForMultipleWords(String input) {"},{"lineNumber":154,"author":{"gitId":"geraldfan"},"content":"        int endIndexOfCommand \u003d input.indexOf(\u0027 \u0027);"},{"lineNumber":155,"author":{"gitId":"geraldfan"},"content":"        String commandInput \u003d input.substring(0, endIndexOfCommand);"},{"lineNumber":156,"author":{"gitId":"geraldfan"},"content":"        return Command.valueOf(commandInput.toUpperCase(Locale.ROOT));"},{"lineNumber":157,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":159,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"geraldfan"},"content":"     * Returns the description portion of the user input"},{"lineNumber":161,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"geraldfan"},"content":"     * @param input user input as a String"},{"lineNumber":163,"author":{"gitId":"geraldfan"},"content":"     * @return the description portion of the user input as a String"},{"lineNumber":164,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"geraldfan"},"content":"    public static String parseDescriptionInput(String input) {"},{"lineNumber":166,"author":{"gitId":"geraldfan"},"content":"        int endIndexOfCommand \u003d input.indexOf(\u0027 \u0027);"},{"lineNumber":167,"author":{"gitId":"geraldfan"},"content":"        return input.substring(endIndexOfCommand + 1);"},{"lineNumber":168,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":169,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":170,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":171,"author":{"gitId":"geraldfan"},"content":"     * Parses ToDo Tasks stored in a file"},{"lineNumber":172,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":173,"author":{"gitId":"geraldfan"},"content":"     * @param line line representing a ToDo Task in the file"},{"lineNumber":174,"author":{"gitId":"geraldfan"},"content":"     * @return a ToDo Task"},{"lineNumber":175,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"geraldfan"},"content":"    private static ToDo parseForToDoInFile(String line) {"},{"lineNumber":177,"author":{"gitId":"geraldfan"},"content":"        return new ToDo(line.substring(6));"},{"lineNumber":178,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":180,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":181,"author":{"gitId":"geraldfan"},"content":"     * parses Deadline Tasks stored in a file"},{"lineNumber":182,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":183,"author":{"gitId":"geraldfan"},"content":"     * @param line line representing a Deadline Task in the file"},{"lineNumber":184,"author":{"gitId":"geraldfan"},"content":"     * @return a Deadline Task"},{"lineNumber":185,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":186,"author":{"gitId":"geraldfan"},"content":"    private static Deadline parseForDeadlineInFile(String line) {"},{"lineNumber":187,"author":{"gitId":"geraldfan"},"content":"        int endIndexOfDescription \u003d line.indexOf(\"by: \");"},{"lineNumber":188,"author":{"gitId":"geraldfan"},"content":"        String deadlineDescription \u003d line.substring(6, endIndexOfDescription - 2);"},{"lineNumber":189,"author":{"gitId":"geraldfan"},"content":"        String deadline \u003d line.substring(endIndexOfDescription + 4, line.length() - 1);"},{"lineNumber":190,"author":{"gitId":"geraldfan"},"content":"        return new Deadline(deadlineDescription, deadline);"},{"lineNumber":191,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":192,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":193,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":194,"author":{"gitId":"geraldfan"},"content":"     * Parses Event Tasks stored in a file"},{"lineNumber":195,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":196,"author":{"gitId":"geraldfan"},"content":"     * @param line line representing a Event Task in the file"},{"lineNumber":197,"author":{"gitId":"geraldfan"},"content":"     * @return a Event Task"},{"lineNumber":198,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":199,"author":{"gitId":"geraldfan"},"content":"    private static Event parseForEventInFile(String line) {"},{"lineNumber":200,"author":{"gitId":"geraldfan"},"content":"        int endIndexOfDescription \u003d line.indexOf(\"at: \");"},{"lineNumber":201,"author":{"gitId":"geraldfan"},"content":"        String eventDescription \u003d line.substring(6, endIndexOfDescription - 2);"},{"lineNumber":202,"author":{"gitId":"geraldfan"},"content":"        String eventTime \u003d line.substring(endIndexOfDescription + 4, line.length() - 1);"},{"lineNumber":203,"author":{"gitId":"geraldfan"},"content":"        return new Event(eventDescription, eventTime);"},{"lineNumber":204,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":205,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":206,"author":{"gitId":"geraldfan"},"content":"    private static FixedDurationTask parseForFixedDurationTaskInFile(String line) {"},{"lineNumber":207,"author":{"gitId":"geraldfan"},"content":"        int endIndexOfDescription \u003d line.indexOf(\"needs: \");"},{"lineNumber":208,"author":{"gitId":"geraldfan"},"content":"        String fixedDurationTaskDescription \u003d line.substring(6, endIndexOfDescription - 1);"},{"lineNumber":209,"author":{"gitId":"geraldfan"},"content":"        String fixedDurationTaskTime \u003d line.substring(endIndexOfDescription + 7, line.length() - 1);"},{"lineNumber":210,"author":{"gitId":"geraldfan"},"content":"        return new FixedDurationTask(fixedDurationTaskDescription, fixedDurationTaskTime);"},{"lineNumber":211,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":212,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":212}},{"path":"src/main/java/mike/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":" * Used to store or load from the task lists into the disk"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    private Path filePath;"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"     * Creates a Storage object corresponding to the path"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"     * @param filePath"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    public Storage(String filePath) {"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        this.filePath \u003d Paths.get(filePath);"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     * Saves the taskList into the file on the disk corresponding to the filePath"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the task list based on the user\u0027s input"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"     * @throws IOException"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    public void save(TaskList taskList) throws IOException {"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        Path dirPath \u003d filePath.getParent();"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        if (!Files.exists(dirPath)) {"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"            Files.createDirectory(dirPath);"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        assert !Files.exists(dirPath) : false;"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"            Files.createFile(filePath);"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"        assert !Files.exists(filePath) : false;"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        FileWriter fw \u003d new FileWriter(filePath.toString());"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"        String textToAdd \u003d \"\";"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"            Task currentTask \u003d taskList.get(i);"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"            textToAdd +\u003d currentTask + \"\\n\";"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        fw.write(textToAdd);"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"        fw.close();"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"     * Loads the task list from the filePath"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"     * @return a list of tasks corresponding to the filePath"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"     * @throws IOException"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"    public List\u003cTask\u003e loadTasks() throws IOException {"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"        File f \u003d new File(filePath.toString());"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"        if (!f.exists()) {"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The file does not exist\");"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"        List\u003cString\u003e stringList \u003d Files.readAllLines(filePath);"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        for (String line : stringList) {"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"            Task task \u003d Parser.parseLineInFile(line);"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"            taskList.add(task);"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"        return taskList;"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":76}},{"path":"src/main/java/mike/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" * A List of Tasks"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     * Creates a taskList from a list of Task Objects"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     * @param tasks"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        this.taskList \u003d new ArrayList();"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        this.taskList.addAll(tasks);"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"     * Creates an empty taskList"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    public TaskList() {"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        this.taskList \u003d new ArrayList();"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"     * Add a task to the taskList"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"     * @param task the task to be added to the taskList"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"    public void add(Task task) {"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        taskList.add(task);"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"     * Deletes the Task at the index of the list"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"     * @param index the index of the Task to be deleted"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     * @return the Task Object that was removed from the list"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    public Task delete(int index) {"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        return taskList.remove(index - 1);"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"     * Mark the Task at the index of the taskList as done"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"     * @param index the index of the Task to be marked as done"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     * @return the Task Object that was marked as done"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"    public Task mark(int index) {"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        Task taskToMark \u003d taskList.get(index - 1);"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        taskToMark.markAsDone();"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        return taskToMark;"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"     * Search the taskList for tasks containing the keyword"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"     * @param keyword the String used to locate tasks in the taskList"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"     * @return a TaskList of Tasks corresponding to the keyword"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"    public TaskList find(String keyword) {"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"        TaskList matchingResults \u003d new TaskList();"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"            if (taskList.get(i).toString().contains(keyword)) {"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"                matchingResults.add(taskList.get(i));"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        return matchingResults;"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"    public Task get(int index) {"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"        return this.taskList.get(index);"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"    public int size() {"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"        return taskList.size();"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"    public boolean isEmpty() {"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"        return taskList.isEmpty();"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":90}},{"path":"src/main/java/mike/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.util.Locale;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":" * A Task that needs to be completed before a set date"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    protected String by;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    protected LocalDate date;"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * Creates a deadline object with a description and date of the deadline"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     * @param description a description of the deadline"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"     * @param by          the date of the deadline"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"        super(description);"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"        this.by \u003d by;"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        if (Character.isDigit(by.charAt(0))) {"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"            this.date \u003d LocalDate.parse(by);"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\", Locale.ENGLISH);"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"            this.date \u003d LocalDate.parse(by, formatter);"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":37}},{"path":"src/main/java/mike/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":" * A Task that needs to be completed on the date"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    protected final String time;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    protected LocalDate date;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"     * Creates an event with a description and time of the event"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * @param description a description of the event"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     * @param time        the time of the event"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    public Event(String description, String time) {"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        this.time \u003d time;"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"        if (Character.isDigit(time.charAt(0))) {"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"            date \u003d LocalDate.parse(time);"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\", Locale.ENGLISH);"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"            this.date \u003d LocalDate.parse(time, formatter);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":35}},{"path":"src/main/java/mike/task/FixedDurationTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":" * A Task with a fixed time duration."},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public class FixedDurationTask extends Task {"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"    protected final String time;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"    public FixedDurationTask(String description, String time) {"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"        super(description);"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"        this.time \u003d time;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"        return \"[F]\" + super.toString() + \"(needs: \" + this.time.toString() + \")\";"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":18}},{"path":"src/main/java/mike/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"     * Creates a Task with a description"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"     * @param description the description of the task"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"     * Returns an icon of the status of completion of the task"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"     * @return a string indicating the status of the task"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"     * Marks the task as done"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    public void markAsDone() {"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        return \"[\" + getStatusIcon() + \"]\" + this.description;"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":39}},{"path":"src/main/java/mike/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":" * A Task with no time limit"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"     * Creates a ToDo Task with description"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"     * @param description a description of the Task"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":21}},{"path":"src/main/java/mike/ui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.ui;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import javafx.geometry.Pos;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.Node;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.control.Label;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"import java.util.Collections;"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":61}},{"path":"src/main/java/mike/ui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.ui;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import mike.Mike;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    private Mike mike;"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    private TextUi ui;"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        ui \u003d new TextUi();"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"                DialogBox.getDukeDialog(ui.init(), dukeImage)"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        );"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"    public void setMike(Mike m) {"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        mike \u003d m;"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"    @FXML"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    private void handleUserInput() {"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        String response \u003d mike.getResponse(input);"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        );"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        userInput.clear();"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":58}},{"path":"src/main/java/mike/ui/TextUi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.ui;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.ParseException;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import mike.TaskList;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":" * Used by Mike to relay information to the user"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"public class TextUi {"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    private final StringBuilder lengthOfChatBox \u003d new StringBuilder();"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * Defines the length of the chat box"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    public void setLengthOfChatBox() {"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"        lengthOfChatBox.append(\"\\n\");"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        for (int i \u003d 0; i \u003c 50; i++) {"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"            lengthOfChatBox.append(\"-\");"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"        lengthOfChatBox.append(\"\\n\");"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"     * Formats the string to simulate the chat box of Mike"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     * @param s the String Object to be formatted"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    public String formatInChatBox(String s) {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        return lengthOfChatBox + s + lengthOfChatBox;"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"     * Initializes the Ui Object"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"    public String init() {"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        setLengthOfChatBox();"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(\"Hello I\u0027m Mike.\\nWhat can I do for you?\\n\");"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     * Displays when the \"bye\" command is received and exits"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    public String showExitUi() {"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(\"Bye. Hope to see you again soon!\\n\");"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"     * Lists all the tasks in taskList when the \"list\" command is received"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the TaskList to be listed"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    public String showListUi(TaskList taskList) {"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        int numOfText \u003d taskList.size();"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"            output.append(\"No tasks saved\\n\");"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"            output.append(\"Here are the tasks in your list: \\n\");"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"                Task currentTask \u003d taskList.get(i);"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"                output.append(i + 1).append(\". \").append(currentTask).append(\"\\n\");"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(output.toString());"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"     * Informs user that the addition of the task is successful"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the list of tasks"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"     * @param task     the task to be added to the taskList"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"    public String showAddSuccess(TaskList taskList, Task task) {"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(\"Got it. I\u0027ve added this task:\\n  \" + task + \"\\n Now you have \""},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"                + taskList.size() + \" tasks in the list.\");"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"     * Informs user that the marking of the task is successful"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"     * @param task the task to be marked asa done"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"    public String showMarkSuccess(Task task) {"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(\"Nice! I\u0027ve marked this task as done: \\n\" + task);"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"     * Informs user that the deletion of the task is successful"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the list of tasks"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"     * @param task     the task to be deleted"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"    public String showDeleteSuccess(TaskList taskList, Task task) {"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(\"Noted. I\u0027ve removed this task:\\n  \" + task"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"                + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":"    public String showError(ParseException e) {"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(e.getMessage());"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"    public String showLoadingError(ParseException e) {"},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(e.getMessage());"},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"    public String showMatchingResults(TaskList matchingResults) {"},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"        String output \u003d \"\";"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"        if (matchingResults.isEmpty()) {"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"            output +\u003d \"OOP!!! There are no matching tasks in your list\";"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"            output +\u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"            for (int i \u003d 0; i \u003c matchingResults.size(); i++) {"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"                output +\u003d (i + 1) + \".\" + matchingResults.get(i).toString() + \"\\n\";"},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"       return formatInChatBox(output);"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"    public String showIndexOutOfBoundsError(TaskList taskList) {"},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(\"OOPS!!! You only have \" + taskList.size() + \" tasks, please enter an index within the range\");"},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"    public String showIOError(IOException e) {"},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(e.getMessage());"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":133,"author":{"gitId":"geraldfan"},"content":"    public String showDateTimeParseError(DateTimeParseException e) {"},{"lineNumber":134,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(e.getMessage());"},{"lineNumber":135,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":137,"author":{"gitId":"geraldfan"},"content":"    public String showGeneralError() {"},{"lineNumber":138,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");"},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":"        } catch (ParseException e) {"},{"lineNumber":141,"author":{"gitId":"geraldfan"},"content":"            return formatInChatBox(e.getMessage());"},{"lineNumber":142,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":145,"author":{"gitId":"geraldfan"},"content":"    public String showListError() {"},{"lineNumber":146,"author":{"gitId":"geraldfan"},"content":"        return formatInChatBox(\"OOPS!!! The list is empty.\");"},{"lineNumber":147,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":148}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"  \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"    \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"  \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"  \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"  \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"geraldfan":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"mike.ui.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"  \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"      \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"      \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"  \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"geraldfan":19}},{"path":"src/test/mike/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import mike.task.Event;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import mike.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"class ParserTest {"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandToDo() {"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"todo\");"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.TODO);"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandDeadline() {"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"deadline\");"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.DEADLINE);"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandEvent() {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"EVENT\");"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.EVENT);"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandByeTest() {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"bye\");"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.BYE);"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandDoneTest() {"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"done\");"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.DONE);"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandListTest() {"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"list\");"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.LIST);"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    public void parseToDoTest() {"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        ToDo todo \u003d (ToDo) Parser.parseDescription(Command.TODO, \"Read Books\");"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        assertEquals(todo.toString(), new ToDo(\"Read Books\").toString());"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    public void parseDeadlineTest() {"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        Deadline deadline \u003d (Deadline) Parser.parseDescription(Command.DEADLINE, \"testing /by 2021-01-25\");"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        assertEquals(deadline.toString(), new Deadline(\"testing \", LocalDate.parse(\"2021-01-25\").toString()).toString());"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"    public void parseEventTest() {"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        Event event \u003d (Event) Parser.parseDescription(Command.EVENT, \"testing /at 2021-01-25\");"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        assertEquals(event.toString(), new Event(\"testing \", LocalDate.parse(\"2021-01-25\").toString()).toString());"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":67}},{"path":"src/test/mike/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"class EventTest {"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"    public void eventConstructorTest() {"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"        Event event \u003d new Event(\"project meeting\", \"2021-01-25\");"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"        assertEquals(event.toString(), \"[E][\\u2718]project meeting (at: Jan 25 2021)\");"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    public void eventMarkTest() {"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"        Event event \u003d new Event(\"project meeting\", \"2021-01-25\");"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"        event.markAsDone();"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"        assertEquals(event.toString(), \"[E][\\u2713]project meeting (at: Jan 25 2021)\");"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"done 2"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"list"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"list"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"deadline "},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"event"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"blah"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"bye"}],"authorContributionMap":{"geraldfan":17}}]
