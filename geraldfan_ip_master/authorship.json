[{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"[T][✓] read book"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":"[D][✘] return book  (by: Jan 25 2021)"},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"[E][✘] project meeting  (at: Jan 28 2021)"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"[T][✘] join sports club"}],"authorContributionMap":{"geraldfan":4}},{"path":"src/main/java/mike/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":" * The set of commands that Mike can identify"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, FIND"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":8}},{"path":"src/main/java/mike/Mike.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"public class Mike {"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    private Storage storage;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    private TaskList taskList;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    private Ui ui;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     * Create a Mike Object with a taskList from an existing file"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * Otherwise creates a Mike Object with an empty taskList"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     * @param filePath the path of the *.txt file holding information of existing tasks"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    public Mike(String filePath) {"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        this.storage \u003d new Storage(filePath);"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"            taskList \u003d new TaskList(storage.load());"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        } catch (ParseException e) {"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"            ui.showLoadingError(e);"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"            this.taskList \u003d new TaskList();"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"            ui.showIOError(e);"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    public void run() {"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        ui.init();"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        do {"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"            String input \u003d sc.next();"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"                Command command \u003d Parser.parseCommand(input);"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"                switch (command) {"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"                case BYE:"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"                    ui.exit();"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"                    return;"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"                case LIST:"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"                    try {"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"                        ui.showList(taskList);"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"                    } catch (NullPointerException e) {"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"                        ui.showListError();"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"                    }"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"                    break;"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"                case DONE:"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"                    int i \u003d sc.nextInt();"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"                    try {"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"                        ui.showMarkSuccess(taskList.mark(i));"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"                    } catch (IndexOutOfBoundsException e) {"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"                        ui.showIndexOutOfBoundsError(taskList);"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"                    }"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"                    break;"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"                case DELETE:"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"                    int k \u003d sc.nextInt();"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"                    try {"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"                        Task deletedTask \u003d taskList.delete(k);"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"                        ui.showDeleteSuccess(taskList, deletedTask);"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"                    } catch (IndexOutOfBoundsException e) {"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"                        ui.showIndexOutOfBoundsError(taskList);"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"                    }"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"                    break;"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"                case FIND:"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"                    String keyword \u003d sc.next();"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"                    ui.showMatchingResults(taskList.find(keyword));"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"                    break;"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"                default:"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"                    String description \u003d sc.nextLine();"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"                    try {"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"                        Task addedTask \u003d Parser.parseDescription(command, description);"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"                        taskList.add(addedTask);"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"                        ui.showAddSuccess(taskList, addedTask);"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"                        storage.save(taskList);"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"                    } catch (ParseException e) {"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"                        ui.showError(e);"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"                    } catch (IOException e) {"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"                        ui.showIOError(e);"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"                    } catch (DateTimeParseException e) {"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"                        ui.showDateTimeParseError(e);"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"                    }"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"            } catch (IllegalArgumentException e) {"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"                ui.showGeneralError();"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"        } while (true);"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"    public static void main(String[] args) {"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"        new Mike(\"data/tasks.txt\").run();"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":97}},{"path":"src/main/java/mike/ParseException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":" * Extends RunTimeException and is thrown when parsing fails"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public class ParseException extends RuntimeException {"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"    private final String description;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"    public ParseException(String message) {"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"        super(message);"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"        this.description \u003d message;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":14}},{"path":"src/main/java/mike/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import mike.task.Event;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import mike.task.ToDo;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" * Parses input from the user"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"     * Returns a Command with the enum type by parsing the input"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     * @param input String object representing the user\u0027s input"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * @return a Command of the enum type"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    public static Command parseCommand(String input) {"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"        return Command.valueOf(input.toUpperCase());"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"     * Returns a Task Object by parsing the description depending on the Command"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"     * @param command an object of the Command type"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"     * @param input the input of the user"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"     * @return the Task corresponding to the user\u0027s command"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if parsing fails"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    public static Task parseDescription(Command command, String input) throws ParseException {"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        switch (command) {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        case TODO:"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"            return parseToDo(input);"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"        case DEADLINE:"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"            return parseDeadline(input);"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        case EVENT:"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"            return parseEvent(input);"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        default:"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"The command is not valid\");"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     * Returns a ToDo by parsing the input"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"     * Used when the command is todo"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"     * @param input the input from the user"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"     * @return a ToDo Object based on the input"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if the description is empty"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    private static ToDo parseToDo(String input) throws ParseException {"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"        if (input.equals(\" \") || input.isEmpty()) {"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The description of a todo cannot be empty.\");"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"            return new ToDo(input);"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"     * Returns a Deadline by parsing the input"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"     * Used when the command is deadline"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"     * @param input the input from the user"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"     * @return a Deadline Object based on the input"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if the description is empty"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"    private static Deadline parseDeadline(String input) throws ParseException {"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        if (input.equals(\" \") || input.isEmpty()) {"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The description of a deadline cannot be empty.\");"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"        } else if (input.contains(\"/by \")) {"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"            int endIndexOfDescription \u003d input.indexOf(\"/by \");"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"            String deadlineDescription \u003d input.substring(0, endIndexOfDescription);"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"            String deadline \u003d input.substring(endIndexOfDescription + 4);"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"            return new Deadline(deadlineDescription, deadline);"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD after the description\");"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"     * Returns an Event by parsing the input"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"     * Used when the command is event"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"     * @param input the input from the user"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"     * @return a Event Object based on the input from the user"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"     * @throws ParseException if the description is empty"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"    private static Event parseEvent(String input) throws ParseException {"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"        if (input.equals(\" \") || input.isEmpty()) {"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The description of an event cannot be empty.\");"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"        } else if (input.contains(\"/at \")) {"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"            int endIndexOfDescription \u003d input.indexOf(\"/at \");"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"            String eventDescription \u003d input.substring(0, endIndexOfDescription);"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":"            String eventTime \u003d input.substring(endIndexOfDescription + 4);"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"            return new Event(eventDescription, eventTime);"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! Please enter \u0027/at YYYY-MM-DD after the description\");"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":"     * Returns a Task that is parsed from a String"},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"     * Used to parse lines from a file for tasks"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"     * @param line the String to be parsed for tasks"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":"     * @return a Task Object created from line"},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":"    public static Task parseLineInFile(String line) {"},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"        Task task;"},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"        if (line.charAt(1) \u003d\u003d \u0027T\u0027) {"},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"            task \u003d new ToDo(line.substring(6));"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027D\u0027) {"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"            int endIndexOfDescription \u003d line.indexOf(\"by: \");"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":"            String deadlineDescription \u003d line.substring(6, endIndexOfDescription - 3);"},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"            String deadline \u003d line.substring(endIndexOfDescription + 4, line.length() - 1);"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"            task \u003d new Deadline(deadlineDescription, deadline);"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":"        } else if (line.charAt(1) \u003d\u003d \u0027E\u0027) {"},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"            int endIndexOfDescription \u003d line.indexOf(\"at: \");"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"            String eventDescription \u003d line.substring(6, endIndexOfDescription - 3);"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":"            String eventTime \u003d line.substring(endIndexOfDescription + 4, line.length() - 1);"},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"            task \u003d new Event(eventDescription, eventTime);"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! It seems that the file might be corrupted.\");"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":"        if (line.charAt(4) \u003d\u003d \u0027X\u0027) {"},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"            task.markAsDone();"},{"lineNumber":128,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":"        return task;"},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":132,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":132}},{"path":"src/main/java/mike/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Files;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Path;"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import java.nio.file.Paths;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":" * Used to store or load from the task lists into the disk"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"public class Storage {"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    Path filePath;"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"     * Creates a Storage object corresponding to the path"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"     * @param filePath"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    public Storage(String filePath) {"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        this.filePath \u003d Paths.get(filePath);"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     * Saves the taskList into the file on the disk corresponding to the filePath"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the task list based on the user\u0027s input"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"     * @throws IOException"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    public void save(TaskList taskList) throws IOException {"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        Path dirPath \u003d filePath.getParent();"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        if (!Files.exists(dirPath)) {"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"            Files.createDirectory(dirPath);"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        if (!Files.exists(filePath)) {"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"            Files.createFile(filePath);"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"        FileWriter fw \u003d new FileWriter(filePath.toString());"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        String textToAdd \u003d \"\";"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"            Task currentTask \u003d taskList.get(i);"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"            textToAdd +\u003d currentTask + \"\\n\";"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"        fw.write(textToAdd);"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        fw.close();"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     * Loads the task list from the filePath"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"     * @return a list of tasks corresponding to the filePath"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"     * @throws IOException"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"    public List\u003cTask\u003e load() throws IOException {"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        File f \u003d new File(filePath.toString());"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        if (!f.exists()) {"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! The file does not exist\");"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"        List\u003cString\u003e stringList \u003d Files.readAllLines(filePath);"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"        for (String line : stringList) {"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"            Task task \u003d Parser.parseLineInFile(line);"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"            taskList.add(task);"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"        return taskList;"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":74}},{"path":"src/main/java/mike/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" * A List of Tasks"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     * Creates a taskList from a list of Task Objects"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * @param tasks"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"        this.taskList \u003d new ArrayList();"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        this.taskList.addAll(tasks);"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"     * Creates an empty taskList"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"    public TaskList() {"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        this.taskList \u003d new ArrayList();"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"     * Add a task to the taskList"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"     * @param task the task to be added to the taskList"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    public void add(Task task) {"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        taskList.add(task);"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"     * Deletes the Task at the index of the list"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"     * @param index the index of the Task to be deleted"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"     * @return the Task Object that was removed from the list"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"    public Task delete(int index) {"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"        return taskList.remove(index - 1);"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"     * Mark the Task at the index of the taskList as done"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"     * @param index the index of the Task to be marked as done"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"     * @return the Task Object that was marked as done"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    public Task mark(int index) {"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        Task taskToMark \u003d taskList.get(index - 1);"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        taskToMark.markAsDone();"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"        return taskToMark;"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"    public TaskList find(String keyword) {"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        TaskList matchingResults \u003d new TaskList();"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"            if (taskList.get(i).toString().contains(keyword)) {"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"                matchingResults.add(taskList.get(i));"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":"        return matchingResults;"},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"    public Task get(int index) {"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"        return this.taskList.get(index);"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"    public int size() {"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        return taskList.size();"},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":"    public boolean isEmpty() {"},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"        return taskList.isEmpty();"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":83}},{"path":"src/main/java/mike/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Task;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" * Used by Mike to relay information to the user"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    private final StringBuilder lengthOfChatBox \u003d new StringBuilder();"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"     * Defines the length of the chat box"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    public void setLengthOfChatBox() {"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"        lengthOfChatBox.append(\"\\n\");"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"        for (int i \u003d 0; i \u003c 50; i++) {"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"            lengthOfChatBox.append(\"-\");"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        lengthOfChatBox.append(\"\\n\");"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"     * Formats the string to simulate the chat box of Mike"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"     * @param s the String Object to be formatted"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"    public void formatInChatBox(String s) {"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"        System.out.println(lengthOfChatBox + s + lengthOfChatBox);"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"     * Initializes the Ui Object"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"    public void init() {"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"        setLengthOfChatBox();"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(\"Hello I\u0027m Mike.\\nWhat can I do for you?\\n\");"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"     * Displays when the \"bye\" command is received and exits"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"    public void exit() {"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(\"Bye. Hope to see you again soon!\\n\");"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"     * Lists all the tasks in taskList when the \"list\" command is received"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the TaskList to be listed"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":"    public void showList(TaskList taskList) {"},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"        int numOfText \u003d taskList.size();"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"        StringBuilder output \u003d new StringBuilder();"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        if (taskList.isEmpty()) {"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"            output.append(\"No tasks saved\\n\");"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"            output.append(\"Here are the tasks in your list: \\n\");"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"                Task currentTask \u003d taskList.get(i);"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"                output.append(i + 1).append(\". \").append(currentTask).append(\"\\n\");"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(output.toString());"},{"lineNumber":68,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":70,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"geraldfan"},"content":"     * Informs user that the addition of the task is successful"},{"lineNumber":72,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the list of tasks"},{"lineNumber":74,"author":{"gitId":"geraldfan"},"content":"     * @param task the task to be added to the taskList"},{"lineNumber":75,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"geraldfan"},"content":"    public void showAddSuccess(TaskList taskList, Task task) {"},{"lineNumber":77,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(\"Got it. I\u0027ve added this task:\\n  \" + task + \"\\n Now you have \""},{"lineNumber":78,"author":{"gitId":"geraldfan"},"content":"                + taskList.size() + \" tasks in the list.\");"},{"lineNumber":79,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":81,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"geraldfan"},"content":"     * Informs user that the marking of the task is successful"},{"lineNumber":83,"author":{"gitId":"geraldfan"},"content":"     * @param task the task to be marked asa done"},{"lineNumber":84,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"geraldfan"},"content":"    public void showMarkSuccess(Task task) {"},{"lineNumber":86,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(\"Nice! I\u0027ve marked this task as done: \\n\" + task);"},{"lineNumber":87,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":89,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":90,"author":{"gitId":"geraldfan"},"content":"     * Informs user that the deletion of the task is successful"},{"lineNumber":91,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":92,"author":{"gitId":"geraldfan"},"content":"     * @param taskList the list of tasks"},{"lineNumber":93,"author":{"gitId":"geraldfan"},"content":"     * @param task the task to be deleted"},{"lineNumber":94,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"geraldfan"},"content":"    public void showDeleteSuccess(TaskList taskList, Task task) {"},{"lineNumber":96,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(\"Noted. I\u0027ve removed this task:\\n  \" + task"},{"lineNumber":97,"author":{"gitId":"geraldfan"},"content":"                + \"\\nNow you have \" + taskList.size() + \" tasks in the list.\");"},{"lineNumber":98,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"geraldfan"},"content":"    "},{"lineNumber":100,"author":{"gitId":"geraldfan"},"content":"    public void showError(ParseException e) {"},{"lineNumber":101,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(e.getMessage());"},{"lineNumber":102,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":104,"author":{"gitId":"geraldfan"},"content":"    public void showLoadingError(ParseException e) {"},{"lineNumber":105,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(e.getMessage());"},{"lineNumber":106,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":107,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":108,"author":{"gitId":"geraldfan"},"content":"    public void showMatchingResults(TaskList matchingResults) {"},{"lineNumber":109,"author":{"gitId":"geraldfan"},"content":"        String output \u003d \"\";"},{"lineNumber":110,"author":{"gitId":"geraldfan"},"content":"        if (matchingResults.isEmpty()) {"},{"lineNumber":111,"author":{"gitId":"geraldfan"},"content":"            output +\u003d \"OOP!!! There are no matching tasks in your list\";"},{"lineNumber":112,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":113,"author":{"gitId":"geraldfan"},"content":"            output +\u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":114,"author":{"gitId":"geraldfan"},"content":"            for (int i \u003d 0; i \u003c matchingResults.size(); i++) {"},{"lineNumber":115,"author":{"gitId":"geraldfan"},"content":"                output +\u003d (i + 1) + \".\" + matchingResults.get(i).toString() + \"\\n\";"},{"lineNumber":116,"author":{"gitId":"geraldfan"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":119,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(output);"},{"lineNumber":120,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":122,"author":{"gitId":"geraldfan"},"content":"    public void showIndexOutOfBoundsError(TaskList taskList) {"},{"lineNumber":123,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(\"OOPS!!! You only have \" + taskList.size() + \" tasks, please enter an index within the range\");"},{"lineNumber":124,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":126,"author":{"gitId":"geraldfan"},"content":"    public void showIOError(IOException e) {"},{"lineNumber":127,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(e.getMessage());"},{"lineNumber":128,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":130,"author":{"gitId":"geraldfan"},"content":"    public void showDateTimeParseError(DateTimeParseException e) {"},{"lineNumber":131,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(e.getMessage());"},{"lineNumber":132,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":134,"author":{"gitId":"geraldfan"},"content":"    public void showGeneralError() {"},{"lineNumber":135,"author":{"gitId":"geraldfan"},"content":"        try {"},{"lineNumber":136,"author":{"gitId":"geraldfan"},"content":"            throw new ParseException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");"},{"lineNumber":137,"author":{"gitId":"geraldfan"},"content":"        } catch (ParseException e) {"},{"lineNumber":138,"author":{"gitId":"geraldfan"},"content":"            formatInChatBox(e.getMessage());"},{"lineNumber":139,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":140,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":142,"author":{"gitId":"geraldfan"},"content":"    public void showListError() {"},{"lineNumber":143,"author":{"gitId":"geraldfan"},"content":"        formatInChatBox(\"OOPS!!! The list is empty.\");"},{"lineNumber":144,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":145}},{"path":"src/main/java/mike/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import java.text.ParseException;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"import java.util.Locale;"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":" * A Task that needs to be completed before a set date"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"public class Deadline extends Task {"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    protected String by;"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    protected LocalDate date;"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     * Creates a deadline object with a description and date of the deadline"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"     * @param description a description of the deadline"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"     * @param by          the date of the deadline"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"        super(description);"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        this.by \u003d by;"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"        if (Character.isDigit(by.charAt(0))) {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"            this.date \u003d LocalDate.parse(by);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\", Locale.ENGLISH);"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"            this.date \u003d LocalDate.parse(by, formatter);"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"        return \"[D]]\" + super.toString() + \" (by: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":38}},{"path":"src/main/java/mike/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import java.util.Locale;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":" * A Task that needs to be completed on the date"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"    protected final String time;"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"    protected LocalDate date;"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"     * Creates an event with a description and time of the event"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"     * @param description a description of the event"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"     * @param time        the time of the event"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    public Event(String description, String time) {"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        super(description);"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        this.time \u003d time;"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"        if (Character.isDigit(time.charAt(0))) {"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"            date \u003d LocalDate.parse(time);"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\", Locale.ENGLISH);"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"            this.date \u003d LocalDate.parse(time, formatter);"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":35}},{"path":"src/main/java/mike/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"     * Creates a Task with a description"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"     * @param description the description of the task"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    public Task(String description) {"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"     * Returns an icon of the status of completion of the task"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"     * @return a string indicating the status of the task"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":"    public String getStatusIcon() {"},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"     * Marks the task as done"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    public void markAsDone() {"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"        this.isDone \u003d true;"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"        return \"[\" + getStatusIcon() + \"]\" + this.description;"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":39}},{"path":"src/main/java/mike/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":" * A Task with no time limit"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":" */"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"public class ToDo extends Task {"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"     * Creates a ToDo Task with description"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"     * @param description a description of the Task"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    public ToDo(String description) {"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":21}},{"path":"src/test/mike/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import mike.task.Deadline;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"import mike.task.Event;"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import mike.task.ToDo;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"import java.time.LocalDate;"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"class ParserTest {"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandToDo() {"},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"todo\");"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.TODO);"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandDeadline() {"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"deadline\");"},{"lineNumber":22,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.DEADLINE);"},{"lineNumber":23,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":25,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandEvent() {"},{"lineNumber":27,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"EVENT\");"},{"lineNumber":28,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.EVENT);"},{"lineNumber":29,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":31,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandByeTest() {"},{"lineNumber":33,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"bye\");"},{"lineNumber":34,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.BYE);"},{"lineNumber":35,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":37,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandDoneTest() {"},{"lineNumber":39,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"done\");"},{"lineNumber":40,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.DONE);"},{"lineNumber":41,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":43,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":44,"author":{"gitId":"geraldfan"},"content":"    public void parseCommandListTest() {"},{"lineNumber":45,"author":{"gitId":"geraldfan"},"content":"        Command c \u003d Parser.parseCommand(\"list\");"},{"lineNumber":46,"author":{"gitId":"geraldfan"},"content":"        assertEquals(c, Command.LIST);"},{"lineNumber":47,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":49,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":50,"author":{"gitId":"geraldfan"},"content":"    public void parseToDoTest() {"},{"lineNumber":51,"author":{"gitId":"geraldfan"},"content":"        ToDo todo \u003d (ToDo) Parser.parseDescription(Command.TODO, \"Read Books\");"},{"lineNumber":52,"author":{"gitId":"geraldfan"},"content":"        assertEquals(todo.toString(), new ToDo(\"Read Books\").toString());"},{"lineNumber":53,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":55,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":56,"author":{"gitId":"geraldfan"},"content":"    public void parseDeadlineTest() {"},{"lineNumber":57,"author":{"gitId":"geraldfan"},"content":"        Deadline deadline \u003d (Deadline) Parser.parseDescription(Command.DEADLINE, \"testing /by 2021-01-25\");"},{"lineNumber":58,"author":{"gitId":"geraldfan"},"content":"        assertEquals(deadline.toString(), new Deadline(\"testing \", LocalDate.parse(\"2021-01-25\").toString()).toString());"},{"lineNumber":59,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"geraldfan"},"content":"    public void parseEventTest() {"},{"lineNumber":62,"author":{"gitId":"geraldfan"},"content":"        Event event \u003d (Event) Parser.parseDescription(Command.EVENT, \"testing /at 2021-01-25\");"},{"lineNumber":63,"author":{"gitId":"geraldfan"},"content":"        assertEquals(event.toString(), new Event(\"testing \", LocalDate.parse(\"2021-01-25\").toString()).toString());"},{"lineNumber":64,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":66,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":67,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":67}},{"path":"src/test/mike/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"package mike.task;"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"class EventTest {"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"    public void eventConstructorTest() {"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"        Event event \u003d new Event(\"project meeting\", \"2021-01-25\");"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"        assertEquals(event.toString(), \"[E][\\u2718]project meeting (at: Jan 25 2021)\");"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":""},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"    public void eventMarkTest() {"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"        Event event \u003d new Event(\"project meeting\", \"2021-01-25\");"},{"lineNumber":18,"author":{"gitId":"geraldfan"},"content":"        event.markAsDone();"},{"lineNumber":19,"author":{"gitId":"geraldfan"},"content":"        assertEquals(event.toString(), \"[E][\\u2713]project meeting (at: Jan 25 2021)\");"},{"lineNumber":20,"author":{"gitId":"geraldfan"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"geraldfan"},"content":"}"}],"authorContributionMap":{"geraldfan":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"geraldfan"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"geraldfan"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"geraldfan"},"content":"done 2"},{"lineNumber":4,"author":{"gitId":"geraldfan"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"geraldfan"},"content":"todo join sports club"},{"lineNumber":6,"author":{"gitId":"geraldfan"},"content":"done 4"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"geraldfan"},"content":"list"},{"lineNumber":9,"author":{"gitId":"geraldfan"},"content":"deadline return book /by Sunday"},{"lineNumber":10,"author":{"gitId":"geraldfan"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":11,"author":{"gitId":"geraldfan"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"geraldfan"},"content":"list"},{"lineNumber":13,"author":{"gitId":"geraldfan"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"geraldfan"},"content":"deadline "},{"lineNumber":15,"author":{"gitId":"geraldfan"},"content":"event"},{"lineNumber":16,"author":{"gitId":"geraldfan"},"content":"blah"},{"lineNumber":17,"author":{"gitId":"geraldfan"},"content":"bye"}],"authorContributionMap":{"geraldfan":17}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"geraldfan"},"content":"del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"geraldfan":1,"-":20}}]
