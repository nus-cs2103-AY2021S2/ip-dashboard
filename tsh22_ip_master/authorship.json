[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"# **Duke**"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"   first)"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    1. Click `Open`."},{"lineNumber":11,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"1. After that, locate the `src/main/java/Launcher.java` file, right-click it, and choose `Run Launcher.main()`."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"--------------------"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"# User Guide"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"Duke is a desktop app for managing tasks (todo, events, deadlines), optimized for use via a Command Line Interface (CLI)"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"management tasks done faster than traditional GUI apps."},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"## Quick Start"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"1. Download the latest duke.jar from [here](https://github.com/tsh22/ip/releases)."},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"1. Copy the file to the folder you want to use as the home folder for your Duke."},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"1. Refer to the Features below for details of each command that can be used."},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"![Image of Duke](https://raw.githubusercontent.com/tsh22/ip/master/docs/Ui.png)"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"## Features"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"### Notes about the command format:"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"* Words in UPPER_CASE are the parameters to be supplied by the user."},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"* Commands are case insensitive."},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"    * E.g. TODO will match todo."},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"* All fields specified in UPPER_CASE must be provided for the command to be valid."},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"### Adding a Todo task: `todo`"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"Adds a todo task to the task list."},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"* `todo read book`"},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"* `TODO have a meal`"},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":"### Adding a Deadline task: `deadline`"},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"Adds a deadline task to the task list."},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":"Format: `deadline DESCRIPTION /by DATE`"},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"* `DATE` must be in the format YYYY-MM-DD."},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"* `deadline return book /by 2021-10-10`"},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"* `Deadline do homework /by 2021-10-12`"},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"### Adding an Event task: `event`"},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"Adds an event task to the task list."},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":"Format: `event DESCRIPTION /at DATE`"},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":79,"author":{"gitId":"tsh22"},"content":"* `DATE` must be in the format YYYY-MM-DD."},{"lineNumber":80,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":81,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":82,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":83,"author":{"gitId":"tsh22"},"content":"* `event return book /at 2021-10-10`"},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":"* `EVENT do homework /at 2021-10-12`"},{"lineNumber":85,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":86,"author":{"gitId":"tsh22"},"content":"### Updating a task description: `update`"},{"lineNumber":87,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":88,"author":{"gitId":"tsh22"},"content":"Updates the description of an existing task in the task list."},{"lineNumber":89,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":90,"author":{"gitId":"tsh22"},"content":"Format: `update NUMBER DESCRIPTION`"},{"lineNumber":91,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":92,"author":{"gitId":"tsh22"},"content":"* `NUMBER` must be a valid task number."},{"lineNumber":93,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":94,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":95,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":96,"author":{"gitId":"tsh22"},"content":"* `update 2 return book`"},{"lineNumber":97,"author":{"gitId":"tsh22"},"content":"* `update 6 do homework`"},{"lineNumber":98,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":99,"author":{"gitId":"tsh22"},"content":"### Find a task using keywords: `find`"},{"lineNumber":100,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":101,"author":{"gitId":"tsh22"},"content":"Finds an existing task that matches the keyword(s)."},{"lineNumber":102,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":103,"author":{"gitId":"tsh22"},"content":"Format: `find KEYWORD`"},{"lineNumber":104,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":105,"author":{"gitId":"tsh22"},"content":"* `KEYWORD` can be a single term or multiple words."},{"lineNumber":106,"author":{"gitId":"tsh22"},"content":"* `KEYWORD` is case sensitive."},{"lineNumber":107,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":108,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":109,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":110,"author":{"gitId":"tsh22"},"content":"* `find return book`"},{"lineNumber":111,"author":{"gitId":"tsh22"},"content":"* `find book`"},{"lineNumber":112,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":113,"author":{"gitId":"tsh22"},"content":"### Lists all current tasks: `list`"},{"lineNumber":114,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":115,"author":{"gitId":"tsh22"},"content":"Lists all existing tasks in the task list."},{"lineNumber":116,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":117,"author":{"gitId":"tsh22"},"content":"Format: `list`"},{"lineNumber":118,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":119,"author":{"gitId":"tsh22"},"content":"### Mark a task as done: `done`"},{"lineNumber":120,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":121,"author":{"gitId":"tsh22"},"content":"Marks one of the tasks as done."},{"lineNumber":122,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":123,"author":{"gitId":"tsh22"},"content":"Format: `done NUMBER`"},{"lineNumber":124,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":125,"author":{"gitId":"tsh22"},"content":"* `NUMBER` must be a valid task number."},{"lineNumber":126,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":127,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":128,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":129,"author":{"gitId":"tsh22"},"content":"* `done 3`"},{"lineNumber":130,"author":{"gitId":"tsh22"},"content":"* `DONE 2`"},{"lineNumber":131,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":132,"author":{"gitId":"tsh22"},"content":"### Delete an existing task: `delete`"},{"lineNumber":133,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":134,"author":{"gitId":"tsh22"},"content":"Deletes an existing task in the task list."},{"lineNumber":135,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":136,"author":{"gitId":"tsh22"},"content":"Format: `delete NUMBER`"},{"lineNumber":137,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":138,"author":{"gitId":"tsh22"},"content":"* `NUMBER` must be a valid task number."},{"lineNumber":139,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":140,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":141,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":142,"author":{"gitId":"tsh22"},"content":"* `delete 3`"},{"lineNumber":143,"author":{"gitId":"tsh22"},"content":"* `Delete 1`"},{"lineNumber":144,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":145,"author":{"gitId":"tsh22"},"content":"### Exiting: `bye`"},{"lineNumber":146,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":147,"author":{"gitId":"tsh22"},"content":"Ends the program and closes the window."},{"lineNumber":148,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":149,"author":{"gitId":"tsh22"},"content":"Format: `bye`"},{"lineNumber":150,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":151,"author":{"gitId":"tsh22"},"content":"### Saving the data"},{"lineNumber":152,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":153,"author":{"gitId":"tsh22"},"content":"Duke data are saved in the hard disk automatically after any command that changes the data. There is no need to save"},{"lineNumber":154,"author":{"gitId":"tsh22"},"content":"manually."},{"lineNumber":155,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":156,"author":{"gitId":"tsh22"},"content":"## Command Summary"},{"lineNumber":157,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":158,"author":{"gitId":"tsh22"},"content":"Action | Format, Examples"},{"lineNumber":159,"author":{"gitId":"tsh22"},"content":"------- | ----------------"},{"lineNumber":160,"author":{"gitId":"tsh22"},"content":"todo | `todo DESCRIPTION` e.g. `todo read book`, `TODO have a meal`"},{"lineNumber":161,"author":{"gitId":"tsh22"},"content":"deadline | `deadline DESCRIPTION /by DATE` e.g. `deadline return book /by 2021-10-10`, `Deadline do homework /by 2021-10-12`"},{"lineNumber":162,"author":{"gitId":"tsh22"},"content":"event | `event DESCRIPTION /at DATE` e.g. `event return book /at 2021-10-10`, `EVENT do homework /at 2021-10-12`"},{"lineNumber":163,"author":{"gitId":"tsh22"},"content":"update | `update NUMBER DESCRIPTION` e.g. `update 2 return book`, `update 6 do homework`"},{"lineNumber":164,"author":{"gitId":"tsh22"},"content":"find | `find KEYWORD` e.g. `find return book`, `find book`"},{"lineNumber":165,"author":{"gitId":"tsh22"},"content":"list | `list`"},{"lineNumber":166,"author":{"gitId":"tsh22"},"content":"done | `done NUMBER` e.g. `done 3`, `DONE 2`"},{"lineNumber":167,"author":{"gitId":"tsh22"},"content":"delete | `delete NUMBER` e.g. `delete 3`, `Delete 1`"},{"lineNumber":168,"author":{"gitId":"tsh22"},"content":"bye | `bye`"},{"lineNumber":169,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":170,"author":{"gitId":"tsh22"},"content":"## Acknowledgement"},{"lineNumber":171,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":172,"author":{"gitId":"tsh22"},"content":"* Background image: [link](https://i.pinimg.com/564x/4b/78/f2/4b78f244924f21ba1fc5d150d2c05c35.jpg)"},{"lineNumber":173,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":174,"author":{"gitId":"tsh22"},"content":"* User"},{"lineNumber":175,"author":{"gitId":"tsh22"},"content":"image: [link](https://static.wikia.nocookie.net/undertale-au-fanon/images/1/1e/Undertale_frisk_Sprite.png/revision/latest?cb\u003d20200624132041)"},{"lineNumber":176,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":177,"author":{"gitId":"tsh22"},"content":"* Duke"},{"lineNumber":178,"author":{"gitId":"tsh22"},"content":"image: [link](https://www.google.com/url?sa\u003di\u0026url\u003dhttps%3A%2F%2Fdebatesjungle.fandom.com%2Fwiki%2FMettaton\u0026psig\u003dAOvVaw3srOl5r0-3p2tt80THoApY\u0026ust\u003d1613828616339000\u0026source\u003dimages\u0026cd\u003dvfe\u0026ved\u003d0CAIQjRxqFwoTCJipup2K9u4CFQAAAAAdAAAAABAD)"},{"lineNumber":179,"author":{"gitId":"tsh22"},"content":""}],"authorContributionMap":{"tsh22":170,"-":9}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":""}],"authorContributionMap":{"tsh22":18,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"# Duke"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"### Setting up in Intellij"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"   first)"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    1. Click `Open`."},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    1. Select the project directory, and click `OK`."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    1. If there are any further prompts, accept the defaults."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"1. Configure the project to use JDK 11 (not other versions) as explained"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"1. After that, locate the `src/main/java/Launcher.java` file, right-click it, and choose `Run Launcher.main()`."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"Duke is a desktop app for managing tasks (todo, events, deadlines), optimized for use via a Command Line Interface (CLI)"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"while still having the benefits of a Graphical User Interface (GUI). If you can type fast, AB3 can get your contact"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"management tasks done faster than traditional GUI apps."},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"## Quick Start"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"1. Download the latest duke.jar from [here](https://github.com/tsh22/ip/releases)."},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"1. Copy the file to the folder you want to use as the home folder for your Duke."},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"1. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds."},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"1. Refer to the Features below for details of each command that can be used."},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"![Image of Duke](https://raw.githubusercontent.com/tsh22/ip/master/docs/Ui.png)"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"## Features"},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"### Notes about the command format:"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"* Words in UPPER_CASE are the parameters to be supplied by the user."},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"* Commands are case-insensitive."},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"   * E.g. TODO will match todo."},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"* All fields specified in UPPER_CASE must be provided for the command to be valid."},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"### Adding a Todo task: `todo`"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"Adds a todo task to the task list."},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"Format: `todo DESCRIPTION`"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"* `todo read book`"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"* `TODO have a meal`"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"### Adding a Deadline task: `deadline`"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"Adds a deadline task to the task list."},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"Format: `deadline DESCRIPTION /by DATE`"},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"* `DATE` must be in the format YYYY-MM-DD."},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"* `deadline return book /by 2021-10-10`"},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":"* `Deadline do homework /by 2021-10-12`"},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":"### Adding an Event task: `event`"},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"Adds an event task to the task list."},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":"Format: `event DESCRIPTION /at DATE`"},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"* `DATE` must be in the format YYYY-MM-DD."},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"* `event return book /at 2021-10-10`"},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"* `EVENT do homework /at 2021-10-12`"},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"### Updating a task description: `update`"},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"Updates the description of an existing task in the task list."},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":"Format: `update NUMBER DESCRIPTION`"},{"lineNumber":79,"author":{"gitId":"tsh22"},"content":"* `NUMBER` must be a valid task number."},{"lineNumber":80,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":81,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":82,"author":{"gitId":"tsh22"},"content":"* `update 2 return book`"},{"lineNumber":83,"author":{"gitId":"tsh22"},"content":"* `update 6 do homework`"},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":85,"author":{"gitId":"tsh22"},"content":"### Find a task using keywords: `find`"},{"lineNumber":86,"author":{"gitId":"tsh22"},"content":"Finds an existing task that matches the keyword(s)."},{"lineNumber":87,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":88,"author":{"gitId":"tsh22"},"content":"Format: `find KEYWORD`"},{"lineNumber":89,"author":{"gitId":"tsh22"},"content":"* `KEYWORD` can be a single term or multiple words."},{"lineNumber":90,"author":{"gitId":"tsh22"},"content":"* `KEYWORD` is case sensitive."},{"lineNumber":91,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":92,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":93,"author":{"gitId":"tsh22"},"content":"* `find return book`"},{"lineNumber":94,"author":{"gitId":"tsh22"},"content":"* `find book`"},{"lineNumber":95,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":96,"author":{"gitId":"tsh22"},"content":"### Lists all current tasks: `list`"},{"lineNumber":97,"author":{"gitId":"tsh22"},"content":"Lists all existing tasks in the task list."},{"lineNumber":98,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":99,"author":{"gitId":"tsh22"},"content":"Format: `list`"},{"lineNumber":100,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":101,"author":{"gitId":"tsh22"},"content":"### Mark a task as done: `done`"},{"lineNumber":102,"author":{"gitId":"tsh22"},"content":"Marks one of the tasks as done."},{"lineNumber":103,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":104,"author":{"gitId":"tsh22"},"content":"Format: `done NUMBER`"},{"lineNumber":105,"author":{"gitId":"tsh22"},"content":"* `NUMBER` must be a valid task number."},{"lineNumber":106,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":107,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":108,"author":{"gitId":"tsh22"},"content":"* `done 3`"},{"lineNumber":109,"author":{"gitId":"tsh22"},"content":"* `DONE 2`"},{"lineNumber":110,"author":{"gitId":"-"},"content":""},{"lineNumber":111,"author":{"gitId":"tsh22"},"content":"### Delete an existing task: `delete`"},{"lineNumber":112,"author":{"gitId":"tsh22"},"content":"Deletes an existing task in the task list."},{"lineNumber":113,"author":{"gitId":"-"},"content":""},{"lineNumber":114,"author":{"gitId":"tsh22"},"content":"Format: `delete NUMBER`"},{"lineNumber":115,"author":{"gitId":"tsh22"},"content":"* `NUMBER` must be a valid task number."},{"lineNumber":116,"author":{"gitId":"-"},"content":""},{"lineNumber":117,"author":{"gitId":"tsh22"},"content":"Examples:"},{"lineNumber":118,"author":{"gitId":"tsh22"},"content":"* `delete 3 `"},{"lineNumber":119,"author":{"gitId":"tsh22"},"content":"* `Delete 1`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"tsh22"},"content":"### Exiting: `bye`"},{"lineNumber":122,"author":{"gitId":"tsh22"},"content":"Ends the program and closes the window."},{"lineNumber":123,"author":{"gitId":"-"},"content":""},{"lineNumber":124,"author":{"gitId":"tsh22"},"content":"Format: `bye`"},{"lineNumber":125,"author":{"gitId":"-"},"content":""},{"lineNumber":126,"author":{"gitId":"tsh22"},"content":"### Saving the data"},{"lineNumber":127,"author":{"gitId":"tsh22"},"content":"Duke data are saved in the hard disk automatically after any command that changes the data. There is no need to save manually."},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"tsh22"},"content":"## Command Summary"},{"lineNumber":130,"author":{"gitId":"-"},"content":""},{"lineNumber":131,"author":{"gitId":"-"},"content":""},{"lineNumber":132,"author":{"gitId":"tsh22"},"content":"Action | Format, Examples "},{"lineNumber":133,"author":{"gitId":"tsh22"},"content":"------ | ----------------"},{"lineNumber":134,"author":{"gitId":"tsh22"},"content":"todo | `todo DESCRIPTION` e.g. `todo read book`, `TODO have a meal`"},{"lineNumber":135,"author":{"gitId":"tsh22"},"content":"deadline | `deadline DESCRIPTION /by DATE` e.g. `deadline return book /by 2021-10-10`, `Deadline do homework /by 2021-10-12`"},{"lineNumber":136,"author":{"gitId":"tsh22"},"content":"event | `event DESCRIPTION /at DATE` e.g. `event return book /at 2021-10-10`, `EVENT do homework /at 2021-10-12`"},{"lineNumber":137,"author":{"gitId":"tsh22"},"content":"update | `update NUMBER DESCRIPTION` e.g. `update 2 return book`, `update 6 do homework`"},{"lineNumber":138,"author":{"gitId":"tsh22"},"content":"find | `find KEYWORD` e.g. `find return book`, `find book`"},{"lineNumber":139,"author":{"gitId":"tsh22"},"content":"list | `list`"},{"lineNumber":140,"author":{"gitId":"tsh22"},"content":"done | `done NUMBER` e.g. `done 3`, `DONE 2`"},{"lineNumber":141,"author":{"gitId":"tsh22"},"content":"delete | `delete NUMBER` e.g. `delete 3 `, `Delete 1`"},{"lineNumber":142,"author":{"gitId":"tsh22"},"content":"bye | `bye`"},{"lineNumber":143,"author":{"gitId":"-"},"content":""},{"lineNumber":144,"author":{"gitId":"tsh22"},"content":"### Acknowledgement"},{"lineNumber":145,"author":{"gitId":"tsh22"},"content":"* Background image: [link](https://i.pinimg.com/564x/4b/78/f2/4b78f244924f21ba1fc5d150d2c05c35.jpg)"},{"lineNumber":146,"author":{"gitId":"-"},"content":""},{"lineNumber":147,"author":{"gitId":"tsh22"},"content":"* User image: [link](https://static.wikia.nocookie.net/undertale-au-fanon/images/1/1e/Undertale_frisk_Sprite.png/revision/latest?cb\u003d20200624132041)"},{"lineNumber":148,"author":{"gitId":"-"},"content":""},{"lineNumber":149,"author":{"gitId":"tsh22"},"content":"* Duke image: [link](https://www.google.com/url?sa\u003di\u0026url\u003dhttps%3A%2F%2Fdebatesjungle.fandom.com%2Fwiki%2FMettaton\u0026psig\u003dAOvVaw3srOl5r0-3p2tt80THoApY\u0026ust\u003d1613828616339000\u0026source\u003dimages\u0026cd\u003dvfe\u0026ved\u003d0CAIQjRxqFwoTCJipup2K9u4CFQAAAAAdAAAAABAD)"}],"authorContributionMap":{"tsh22":133,"-":16}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Provides abstract class for types of commands."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public abstract class Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"     * Provides abstract method that executes command."},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if command cannot be executed."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":17}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" * Allows users to specify a deadline task. The user is able to specify the"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":" * description and by due date."},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"public class Deadline extends Task {"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    private LocalDate by;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * Initialises Deadline object."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     * @param description the description of the task."},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     * @param by the due date of the task, in the format YYYY-MM-DD"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        super(description, \"Deadline\");"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"        this.by \u003d LocalDate.parse(by);"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     * Returns the due date of the task."},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"     * @return a String object of the due date."},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"    public String getBy() {"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"        return by.toString();"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     * Returns a String of the Deadline task object in a standardised format."},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     * @return a String object of the Deadline task."},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        String formatBy \u003d by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"        return \"[D]\" + super.toString() + \"(by: \" + formatBy + \")\";"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":43}},{"path":"src/main/java/duke/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":" * Specifies the command for deadline command type."},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    private String by;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    private String description;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     * Initialises DeadlineCommand object and parses description to description and by."},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * @param description the entire description of the deadline task."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    public DeadlineCommand(String description) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"        String[] descriptionArr \u003d description.split(\"(?i)/by \");"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"            this.description \u003d descriptionArr[0];"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"            this.by \u003d descriptionArr[1];"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Please provide a \u0027by\u0027 date! E.g. /by 2021-01-01\");"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     * Executes the command by adding the deadline task to the existing taskList,"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"     * writing the updated taskList into storage and responding with relevant message."},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if the date entered is invalid or in the wrong format."},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"            Deadline deadline \u003d new Deadline(description, by);"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"            taskList.addDeadlineTask(deadline);"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"            storage.writeToFile(taskList.getList());"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"            return ui.showTaskAdded(deadline);"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Invalid date entered! Please type in valid yyyy-mm-dd format!\");"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":53}},{"path":"src/main/java/duke/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Specifies the command for delete command type."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    private int index;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     * Initialises DeleteCommand object."},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     * @param index the index of the task to be deleted."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"        this.index \u003d index;"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     * Executes the command by removing the task to the existing taskList,"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * writing the updated taskList into storage and responding with relevant message."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"            Task task \u003d taskList.deleteTask(index);"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"            storage.writeToFile(taskList.getList());"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"            return ui.showTaskDeleted(task);"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"This task number does not exist! Try again?\");"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":42}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"     * Initiates the DialogBox object."},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"     * @param text text being displayed in the dialog box."},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"     * @param img avatar of either duke or user."},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"    DialogBox(String text, Image img) {"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"            fxmlLoader.load();"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        } catch (IOException e) {"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"            e.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"        dialog.setText(text);"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"        displayPicture.setImage(img);"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"    private void flip() {"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"        Collections.reverse(tmp);"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"     * Returns user\u0027s dialog box."},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"     * @param text user\u0027s text entered."},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":"     * @param img user\u0027s avatar."},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"     * @return user\u0027s dialog box."},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":"        return new DialogBox(text, img);"},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":"     * Returns Duke\u0027s dialog box."},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"     * @param text duke\u0027s response message."},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"     * @param img duke\u0027s avatar."},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"     * @return duke\u0027s dialog box."},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"        db.flip();"},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"        return db;"},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":78}},{"path":"src/main/java/duke/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Specifies the command for deadline command type."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class DoneCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    private int index;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     * Initialises the DoneCommand object."},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     * @param index the index of the task to be marked as done."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    public DoneCommand(int index) {"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"        this.index \u003d index;"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     * Executes the command by marking the task as done in the existing taskList,"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * writing the updated taskList into storage and responding with relevant message."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"            Task task \u003d taskList.markTaskDone(index);"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"            storage.writeToFile(taskList.getList());"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"            return ui.showTaskDone(task);"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"This task number does not exist! Try again?\");"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":42}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":" * Contains the main method to be run."},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":8,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    private TaskList taskList;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * Initialises the Duke object and loads hard disk data to current taskList."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     * @param filePath the file path that specifies location in hard disk for storage."},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    public Duke(String filePath) {"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"        ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"            taskList \u003d new TaskList(storage.loadData());"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"            e.getMessage();"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    public Ui getUi() {"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        return ui;"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     * Reads user input and provides the logic for handling each user input."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     * @param duke the initialised Duke object."},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     * @param userInput refers to user input from text field."},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"    public String getResponse(Duke duke, String userInput) {"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        assert duke !\u003d null;"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"            Command command \u003d Parser.parseCommand(userInput);"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"            String message \u003d command.execute(duke.taskList, duke.ui, duke.storage);"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"            if (message.equals(duke.ui.showGoodbyeMessage())) {"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"                System.exit(0);"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"            return message;"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"            return e.getMessage();"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":""}],"authorContributionMap":{"tsh22":51,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Handles exceptions that are specific to Duke."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":10}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" * Allows users to specify an event task. The user is able to specify the"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":" * description and at due date."},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    private LocalDate at;"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * Initialises Event object."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     * @param description the description of the task."},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     * @param at the date of the task, in the format YYYY-MM-DD"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    public Event(String description, String at) {"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        super(description, \"Event\");"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"        this.at \u003d LocalDate.parse(at);"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     * Returns the date of the task"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"     * @return a String object of the date."},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"    public String getAt() {"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"        return at.toString();"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     * Returns a String of the Event task object in a standardised format."},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     * @return a String object of the Event task."},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        String formatAt \u003d at.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"        return \"[E]\" + super.toString() + \"(at: \" + formatAt + \")\";"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":43}},{"path":"src/main/java/duke/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":" * Specifies the command for event command type."},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"public class EventCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    private String at;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    private String description;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     * Initialises EventCommand object and parses description to description and at."},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * @param description the entire description of the task."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    public EventCommand(String description) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"        String[] descriptionArr \u003d description.split(\"(?i)/at \");"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"            this.description \u003d descriptionArr[0];"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"            this.at \u003d descriptionArr[1];"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Please provide an \u0027at\u0027 date! E.g. /at 2021-01-01\");"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     * Executes the command by adding the event task to the existing taskList,"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"     * writing the updated taskList into storage and responding with relevant message."},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if the date entered is invalid or in the wrong format."},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"            Event event \u003d new Event(description, at);"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"            taskList.addEventTask(event);"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"            storage.writeToFile(taskList.getList());"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"            return ui.showTaskAdded(event);"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Invalid date entered! Please type in valid yyyy-mm-dd format!\");"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":53}},{"path":"src/main/java/duke/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Specifies the command for deadline command type."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class ExitCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"     * Initialises ExitCommand object."},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    public ExitCommand() {"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * Executes the command by writing the taskList into storage and showing goodbye message."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     * @param ui      the Ui object that provides responses to the user according to status of their input."},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"            storage.writeToFile(taskList.getList());"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"            return ui.showGoodbyeMessage();"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":33}},{"path":"src/main/java/duke/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":" * Specifies the command for find command type."},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"public class FindCommand extends Command {"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    private String keyword;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     * Initialises FindCommand object."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * @param keyword refers to the keyword provided by user"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    public FindCommand(String keyword) {"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     * Executes the command by finding a list of tasks that contain the keyword and"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"     * responding with message that lists the matching tasks."},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d taskList.findTasks(keyword);"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"        return ui.showMatchingTasks(matchingTasks);"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":37}},{"path":"src/main/java/duke/InvalidTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Specifies the command for if a command type is not recognised."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class InvalidTaskCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"     * Initialises InvalidTaskCommand object."},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    public InvalidTaskCommand() {"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * Executes the command by showing message that the task is not recognised."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"        return ui.showInvalidTaskMessage();"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":29}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":12}},{"path":"src/main/java/duke/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Specifies the command for list command type."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class ListCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"     * Initialises ListCommand object."},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    public ListCommand() {"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * Executes the command by responding with message that handles listing of the taskList."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"        return ui.showTaskList(taskList.getList());"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":29}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":" * Provides a GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"    final String PATH \u003d \"./data/duke.txt\";"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    private Duke duke \u003d new Duke(PATH);"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import javafx.scene.image.Image;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/User.png\"));"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Duke.png\"));"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     * Initialises duke gui to interact with user."},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"                DialogBox.getDukeDialog(\"Hey, I\u0027m Duke!\\nHow can I help you?\", dukeImage));"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"    private void handleUserInput() {"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"        String response \u003d duke.getResponse(duke, input);"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"        );"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"        userInput.clear();"},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":56}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Provides the static method for parsing user input."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class Parser {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"     * Handles the logic of parsing user input to determine type of command."},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     * The rest of the user input is parsed according to command type to pass"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     * correct arguments to create a command to execute."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     * @param userInput the input given by the user to Duke."},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * @return the command to be executed."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if user input is invalid or if description of tasks is empty."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    public static Command parseCommand(String userInput) throws DukeException {"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"        assert userInput !\u003d null;"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"        String[] commandArr \u003d userInput.split(\" \", 2);"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        String commandType \u003d commandArr[0].toLowerCase();"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"        if (commandType.equals(\"bye\")) {"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"            return new ExitCommand();"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"list\")) {"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"            return new ListCommand();"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"done\")) {"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"            int taskIndex \u003d Integer.parseInt(commandArr[1]) - 1;"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"            return new DoneCommand(taskIndex);"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"delete\")) {"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"            int taskIndex \u003d Integer.parseInt(commandArr[1]) - 1;"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"            return new DeleteCommand(taskIndex);"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"find\")) {"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"            if (commandArr.length \u003d\u003d 1) {"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"                throw new DukeException(\"Oops! Please provide a keyword you want to find!\");"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"            } else {"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"                String keyword \u003d commandArr[1];"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"                return new FindCommand(keyword);"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"update\")) {"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"            String commandDescription \u003d commandArr[1];"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"            return new UpdateCommand(commandDescription);"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"deadline\")) {"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"            if (commandArr.length \u003d\u003d 1) {"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"                throw new DukeException(\"Oops! The description of deadline cannot be empty!\");"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"                String commandDescription \u003d commandArr[1];"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"                return new DeadlineCommand(commandDescription);"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"event\")) {"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"            if (commandArr.length \u003d\u003d 1) {"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"                throw new DukeException(\"Oops! The description of event cannot be empty!\");"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"            } else {"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"                String commandDescription \u003d commandArr[1];"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"                return new EventCommand(commandDescription);"},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"        } else if (commandType.equals(\"todo\")) {"},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"            if (commandArr.length \u003d\u003d 1) {"},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"                throw new DukeException(\"Oops! The description of todo cannot be empty!\");"},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"            } else {"},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":"                String commandDescription \u003d commandArr[1];"},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"                return new TodoCommand(commandDescription);"},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":"            return new InvalidTaskCommand();"},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":67}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import java.util.Scanner;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"//Solution below adapted from https://github.com/vevek/ip/blob/master/src/main/java/duke/util/Storage.java"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":" * Provides the methods to create a storage object and relevant methods to interact with storage."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"public class Storage {"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"    private final String filePath;"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     * Initialises Storage object."},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * @param filePath the file path that specifies location in hard disk for storage."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    public Storage(String filePath) {"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"     * Loads the data in the hard disk location specified by file path."},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"     * @return an array list of the tasks saved in the hard disk."},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if task type is not recognised or file or directory cannot be created."},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    public ArrayList\u003cTask\u003e loadData() throws DukeException {"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"            File file \u003d new File(filePath);"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"            File directory \u003d file.getParentFile();"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"            if (!directory.exists()) {"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"                directory.mkdir();"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"            if (!file.exists()) {"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"                file.createNewFile();"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"            Scanner scan \u003d new Scanner(file);"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"            while (scan.hasNext()) {"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"                String input \u003d scan.nextLine();"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"                taskList.add(stringToTask(input));"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"        } catch (IOException e) {"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Oops sorry, unable to create a new file.\");"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"        } catch (SecurityException e) {"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Oops sorry, unable to create a new directory.\");"},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"        return taskList;"},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"     * Writes the specified taskList into the specified file in the hard disk."},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":"     * @param taskList the list of tasks to be written into file."},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if task type is not recognised or unable to write to file."},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e taskList) throws DukeException {"},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"                Task task \u003d taskList.get(i);"},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"                fw.write(taskToString(task) + System.lineSeparator());"},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":"            fw.close();"},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"        } catch (IOException e) {"},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Oops, unable to write to file!\");"},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":79,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":82,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"tsh22"},"content":"     * Converts the data being stored as strings in the hard disk into Task objects."},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"tsh22"},"content":"     * @param input each individual string task data from the file in the hard disk."},{"lineNumber":86,"author":{"gitId":"tsh22"},"content":"     * @return the Task object of the String description."},{"lineNumber":87,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if task type is not recognised."},{"lineNumber":88,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"tsh22"},"content":"    public Task stringToTask(String input) throws DukeException {"},{"lineNumber":90,"author":{"gitId":"tsh22"},"content":"        assert input !\u003d null;"},{"lineNumber":91,"author":{"gitId":"tsh22"},"content":"        String[] splitTask \u003d input.split(\" \\\\| \");"},{"lineNumber":92,"author":{"gitId":"tsh22"},"content":"        String taskType \u003d splitTask[0];"},{"lineNumber":93,"author":{"gitId":"tsh22"},"content":"        String isDone \u003d splitTask[1];"},{"lineNumber":94,"author":{"gitId":"tsh22"},"content":"        String description \u003d splitTask[2];"},{"lineNumber":95,"author":{"gitId":"tsh22"},"content":"        Task task;"},{"lineNumber":96,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":97,"author":{"gitId":"tsh22"},"content":"        switch(taskType) {"},{"lineNumber":98,"author":{"gitId":"tsh22"},"content":"        case \"D\":"},{"lineNumber":99,"author":{"gitId":"tsh22"},"content":"            String by \u003d splitTask[3];"},{"lineNumber":100,"author":{"gitId":"tsh22"},"content":"            task \u003d new Deadline(description, by);"},{"lineNumber":101,"author":{"gitId":"tsh22"},"content":"            break;"},{"lineNumber":102,"author":{"gitId":"tsh22"},"content":"        case \"E\":"},{"lineNumber":103,"author":{"gitId":"tsh22"},"content":"            String at \u003d splitTask[3];"},{"lineNumber":104,"author":{"gitId":"tsh22"},"content":"            task \u003d new Event(description, at);"},{"lineNumber":105,"author":{"gitId":"tsh22"},"content":"            break;"},{"lineNumber":106,"author":{"gitId":"tsh22"},"content":"        case \"T\":"},{"lineNumber":107,"author":{"gitId":"tsh22"},"content":"            task \u003d new Todo(description);"},{"lineNumber":108,"author":{"gitId":"tsh22"},"content":"            break;"},{"lineNumber":109,"author":{"gitId":"tsh22"},"content":"        default:"},{"lineNumber":110,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"I don\u0027t recognise this task type!\");"},{"lineNumber":111,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":113,"author":{"gitId":"tsh22"},"content":"        if (isDone.equals(\"1\")) {"},{"lineNumber":114,"author":{"gitId":"tsh22"},"content":"            task.markAsDone();"},{"lineNumber":115,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"tsh22"},"content":"        return task;"},{"lineNumber":117,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":119,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"tsh22"},"content":"     * Converts the Task objects into formatted String objects."},{"lineNumber":121,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"tsh22"},"content":"     * @param task the individual tasks from the taskList to be converted."},{"lineNumber":123,"author":{"gitId":"tsh22"},"content":"     * @return a String object of the task."},{"lineNumber":124,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if task type is not recognised."},{"lineNumber":125,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"tsh22"},"content":"    public String taskToString(Task task) throws DukeException {"},{"lineNumber":127,"author":{"gitId":"tsh22"},"content":"        assert task !\u003d null;"},{"lineNumber":128,"author":{"gitId":"tsh22"},"content":"        int isDone;"},{"lineNumber":129,"author":{"gitId":"tsh22"},"content":"        String converted \u003d \" \";"},{"lineNumber":130,"author":{"gitId":"tsh22"},"content":"        String taskType \u003d task.getTaskType();"},{"lineNumber":131,"author":{"gitId":"tsh22"},"content":"        String description \u003d task.getDescription();"},{"lineNumber":132,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":133,"author":{"gitId":"tsh22"},"content":"        if (task.isDone()) {"},{"lineNumber":134,"author":{"gitId":"tsh22"},"content":"            isDone \u003d 1;"},{"lineNumber":135,"author":{"gitId":"tsh22"},"content":"        } else {"},{"lineNumber":136,"author":{"gitId":"tsh22"},"content":"            isDone \u003d 0;"},{"lineNumber":137,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":139,"author":{"gitId":"tsh22"},"content":"        switch (taskType) {"},{"lineNumber":140,"author":{"gitId":"tsh22"},"content":"        case \"Deadline\":"},{"lineNumber":141,"author":{"gitId":"tsh22"},"content":"            String by \u003d ((Deadline) task).getBy();"},{"lineNumber":142,"author":{"gitId":"tsh22"},"content":"            converted \u003d String.format(\"D | %d | %s | %s\", isDone, description, by);"},{"lineNumber":143,"author":{"gitId":"tsh22"},"content":"            break;"},{"lineNumber":144,"author":{"gitId":"tsh22"},"content":"        case \"Event\":"},{"lineNumber":145,"author":{"gitId":"tsh22"},"content":"            String at \u003d ((Event) task).getAt();"},{"lineNumber":146,"author":{"gitId":"tsh22"},"content":"            converted \u003d String.format(\"E | %d | %s | %s\", isDone, description, at);"},{"lineNumber":147,"author":{"gitId":"tsh22"},"content":"            break;"},{"lineNumber":148,"author":{"gitId":"tsh22"},"content":"        case \"Todo\":"},{"lineNumber":149,"author":{"gitId":"tsh22"},"content":"            converted \u003d String.format(\"T | %d | %s\", isDone, description);"},{"lineNumber":150,"author":{"gitId":"tsh22"},"content":"            break;"},{"lineNumber":151,"author":{"gitId":"tsh22"},"content":"        default:"},{"lineNumber":152,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"I don\u0027t recognise this task type!\");"},{"lineNumber":153,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"tsh22"},"content":"        return converted;"},{"lineNumber":155,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":156}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Provides super class for types of tasks."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    private String description;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    private boolean isDone;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    private String taskType;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     * Initialises Task objects."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     * @param description the description of the task."},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"     * @param taskType the string specifying task type."},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    public Task(String description, String taskType) {"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"        this.description \u003d description;"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"        this.isDone \u003d false;"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     * Returns String specifying if task is done or not."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     * @return String object in the form of a tick if the task is done."},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    public String getStatus() {"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        return (isDone ? \"\\u2713\" : \" \"); //return tick if done"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     * Returns boolean specifying if task is done or not."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     * @return boolean of if task is done or not."},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"    public boolean isDone() {"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"        return isDone;"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"     * Marks task as done."},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"    public void markAsDone() {"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"        isDone \u003d true;"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"     * Returns String specifying task type."},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"     * @return String object of task type."},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"    public String getTaskType() {"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"        return taskType;"},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"     * Returns String specifying description of the task."},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":"     * @return String object of task description."},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"    public String getDescription() {"},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":"        return description;"},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":"     * Updates description of the task."},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"     * @param newDescription new description user wants to edit."},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"    public void updateDescription(String newDescription) {"},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"        this.description \u003d newDescription;"},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"     * Returns a String of the Event task object in a standardised format."},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":"     * @return a String object of the Task."},{"lineNumber":79,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":81,"author":{"gitId":"tsh22"},"content":"    public String toString() {"},{"lineNumber":82,"author":{"gitId":"tsh22"},"content":"        return \"[\" + this.getStatus() + \"] \" + description;"},{"lineNumber":83,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":84}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":" * Provides class that supports methods to interact with the taskList"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    public static int taskListSize;"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     * Initialises TaskList object."},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * Adds todo task to the current taskList and updates taskListSize."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"     * @param task todo task to be added into taskList."},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"     * @return Todo task object of the added task."},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    public Task addTodoTask(Todo task) {"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"        taskList.add(task);"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"        taskListSize \u003d taskList.size();"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"        return task;"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"     * Adds deadline task to the current taskList and updates taskListSize."},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     * @param task deadline task to be added into taskList."},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     * @return Deadline task object of the added task."},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"    public Task addDeadlineTask(Deadline task) {"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"        taskList.add(task);"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        taskListSize \u003d taskList.size();"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        return task;"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"     * Adds event task to the current taskList and updates taskListSize."},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"     * @param task event task to be added into taskList."},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"     * @return Event task object of the added task."},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"    public Task addEventTask(Event task) {"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"        taskList.add(task);"},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"        taskListSize \u003d taskList.size();"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"        return task;"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"     * Deletes task at specified index from the current taskList and updates taskListSize."},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"     * @param index the index of the task to be removed."},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"     * @return Task object that was deleted."},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"    public Task deleteTask(int index) {"},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"        assert index \u003e\u003d 0;"},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":"        Task task \u003d taskList.get(index);"},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":"        taskList.remove(index);"},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":"        taskListSize \u003d taskList.size();"},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"        return task;"},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"     * Marks task as done at the specified index from the current taskList."},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"     * @param index the index of the task to be marked as done."},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"     * @return Task object that was marked as done."},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"    public Task markTaskDone(int index) {"},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"        assert index \u003e\u003d 0;"},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":"        Task task \u003d taskList.get(index);"},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":"        task.markAsDone();"},{"lineNumber":79,"author":{"gitId":"tsh22"},"content":"        return task;"},{"lineNumber":80,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":82,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"tsh22"},"content":"     * Updates the task at specified index by changing description to new one."},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"tsh22"},"content":"     * @param index index of task."},{"lineNumber":86,"author":{"gitId":"tsh22"},"content":"     * @param newDescription new description user wants to change to."},{"lineNumber":87,"author":{"gitId":"tsh22"},"content":"     * @return updated Task object."},{"lineNumber":88,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"tsh22"},"content":"    public Task updateTask(int index, String newDescription) {"},{"lineNumber":90,"author":{"gitId":"tsh22"},"content":"        assert index \u003e\u003d 0;"},{"lineNumber":91,"author":{"gitId":"tsh22"},"content":"        assert newDescription !\u003d null;"},{"lineNumber":92,"author":{"gitId":"tsh22"},"content":"        Task task \u003d taskList.get(index);"},{"lineNumber":93,"author":{"gitId":"tsh22"},"content":"        taskList.remove(index);"},{"lineNumber":94,"author":{"gitId":"tsh22"},"content":"        task.updateDescription(newDescription);"},{"lineNumber":95,"author":{"gitId":"tsh22"},"content":"        taskList.add(index, task);"},{"lineNumber":96,"author":{"gitId":"tsh22"},"content":"        return task;"},{"lineNumber":97,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":99,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"tsh22"},"content":"     * Finds a list of tasks from the current taskList that contains the specified keyword."},{"lineNumber":101,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"tsh22"},"content":"     * @param keyword the keyword provided by the user to search for specific tasks."},{"lineNumber":103,"author":{"gitId":"tsh22"},"content":"     * @return an array list of tasks that contains the keyword."},{"lineNumber":104,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"tsh22"},"content":"    public ArrayList\u003cTask\u003e findTasks(String keyword) {"},{"lineNumber":106,"author":{"gitId":"tsh22"},"content":"        assert keyword !\u003d null;"},{"lineNumber":107,"author":{"gitId":"tsh22"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":108,"author":{"gitId":"tsh22"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":109,"author":{"gitId":"tsh22"},"content":"            Task task \u003d taskList.get(i);"},{"lineNumber":110,"author":{"gitId":"tsh22"},"content":"            String taskDescription \u003d task.getDescription();"},{"lineNumber":111,"author":{"gitId":"tsh22"},"content":"            if (taskDescription.contains(keyword)) {"},{"lineNumber":112,"author":{"gitId":"tsh22"},"content":"                matchingTasks.add(task);"},{"lineNumber":113,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"tsh22"},"content":"        return matchingTasks;"},{"lineNumber":116,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":118,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"tsh22"},"content":"     * Returns the current taskList as an array list object."},{"lineNumber":120,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":121,"author":{"gitId":"tsh22"},"content":"     * @return Array list object of all current tasks in the task list."},{"lineNumber":122,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"tsh22"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":124,"author":{"gitId":"tsh22"},"content":"        return taskList;"},{"lineNumber":125,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":126}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Allows users to specify a todo task. The user is able to specify the description."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"     * Initialises Todo object."},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     * @param description the description of the task."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"        super(description, \"Todo\");"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     * Returns a String of the Todo task object in a standardised format."},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * @return a String object of the Todo task."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    public String toString() {"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":26}},{"path":"src/main/java/duke/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Specifies the command for todo command type."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class TodoCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    private String description;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"     * Initialises the TodoCommand object."},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     * @param description the description of the deadline task."},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    public TodoCommand(String description) {"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"        this.description \u003d description;"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     * Executes the command by adding the todo task to the existing taskList,"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     * writing the updated taskList into storage and responding with relevant message."},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"     * @param ui       the Ui object that provides responses to the user according to status of their input."},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"     * @param storage  the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"            Todo todo \u003d new Todo(description);"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"            taskList.addTodoTask(todo);"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"            storage.writeToFile(taskList.getList());"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"            return ui.showTaskAdded(todo);"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":41}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":" * Provides the responses to the user for each command case."},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     * Initialises the Ui object."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"    public Ui() {"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"     * Returns string of the goodbye message to be shown when the user types \u0027bye\u0027 command."},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    public String showGoodbyeMessage() {"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"        return \"Aw. It was nice chatting with you! Don\u0027t forget me! :)\";"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     * Returns string of a response to an unrecognised command."},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"    public String showInvalidTaskMessage() {"},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"        return \"Oops! I don\u0027t know what this means! :(\";"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"     * Returns string of the task the user just added and the current size of the task list."},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"     * @param task the task the user added."},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"    public String showTaskAdded(Task task) {"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"        return \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"                + task.toString() + \"\\nNow you have \""},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"                + TaskList.taskListSize + \" task(s) in the list.\";"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"     * Returns string of the task the user just deleted and the current size of the task list."},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"     * @param task the task the user deleted."},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":51,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"tsh22"},"content":"    public String showTaskDeleted(Task task) {"},{"lineNumber":53,"author":{"gitId":"tsh22"},"content":"        return \"Gotcha. I\u0027ve removed this task:\\n\""},{"lineNumber":54,"author":{"gitId":"tsh22"},"content":"                + task.toString() + \"\\nNow you have \""},{"lineNumber":55,"author":{"gitId":"tsh22"},"content":"                + TaskList.taskListSize + \" task(s) in the list.\";"},{"lineNumber":56,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":58,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"tsh22"},"content":"     * Returns string of updated task."},{"lineNumber":60,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"tsh22"},"content":"     * @param task the task the user updated."},{"lineNumber":62,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":63,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"tsh22"},"content":"    public String showTaskUpdated(Task task) {"},{"lineNumber":65,"author":{"gitId":"tsh22"},"content":"        return \"Noted. I\u0027ve updated this task:\\n\" + task.toString();"},{"lineNumber":66,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":68,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"tsh22"},"content":"     * Returns string of the task marked as done."},{"lineNumber":70,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"tsh22"},"content":"     * @param task the task the user marked as done."},{"lineNumber":72,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":73,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"tsh22"},"content":"    public String showTaskDone(Task task) {"},{"lineNumber":75,"author":{"gitId":"tsh22"},"content":"        return \"Nice job! I\u0027ve marked this task as done:\\n\" + task.toString();"},{"lineNumber":76,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":78,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"tsh22"},"content":"     * Returns string of the current list of tasks. If there are no tasks, Ui will provide a different prompt."},{"lineNumber":80,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":81,"author":{"gitId":"tsh22"},"content":"     * @param taskList the current list of tasks."},{"lineNumber":82,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":83,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"tsh22"},"content":"    public String showTaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":85,"author":{"gitId":"tsh22"},"content":"        if (taskList.size() \u003d\u003d 0) {"},{"lineNumber":86,"author":{"gitId":"tsh22"},"content":"            return \"Looks like you have no tasks currently. Add some tasks!\";"},{"lineNumber":87,"author":{"gitId":"tsh22"},"content":"        } else {"},{"lineNumber":88,"author":{"gitId":"tsh22"},"content":"            String message \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":89,"author":{"gitId":"tsh22"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":90,"author":{"gitId":"tsh22"},"content":"                Task item \u003d taskList.get(i);"},{"lineNumber":91,"author":{"gitId":"tsh22"},"content":"                message +\u003d (i + 1) + \".\" + item.toString() + \"\\n\";"},{"lineNumber":92,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"tsh22"},"content":"            return message;"},{"lineNumber":94,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":97,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"tsh22"},"content":"     * Returns string of matching tasks. If there are no tasks, Ui will provide a different prompt."},{"lineNumber":99,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":100,"author":{"gitId":"tsh22"},"content":"     * @param matchingTasks the list of tasks that has matching keyword."},{"lineNumber":101,"author":{"gitId":"tsh22"},"content":"     * @return response message."},{"lineNumber":102,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"tsh22"},"content":"    public String showMatchingTasks(ArrayList\u003cTask\u003e matchingTasks) {"},{"lineNumber":104,"author":{"gitId":"tsh22"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {"},{"lineNumber":105,"author":{"gitId":"tsh22"},"content":"            return \"Looks like there were no tasks matching your search, try again?\";"},{"lineNumber":106,"author":{"gitId":"tsh22"},"content":"        } else {"},{"lineNumber":107,"author":{"gitId":"tsh22"},"content":"            String message \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":108,"author":{"gitId":"tsh22"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {"},{"lineNumber":109,"author":{"gitId":"tsh22"},"content":"                Task item \u003d matchingTasks.get(i);"},{"lineNumber":110,"author":{"gitId":"tsh22"},"content":"                message +\u003d (i + 1) + \".\" + item.toString() + \"\\n\";"},{"lineNumber":111,"author":{"gitId":"tsh22"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"tsh22"},"content":"            return message;"},{"lineNumber":113,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":115}},{"path":"src/main/java/duke/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":" * Specifies the command for update command type."},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":" */"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"public class UpdateCommand extends Command {"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"    private int index;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"    private String newDescription;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"     * Initialise UpdateCommand object and parses description to index of task and description."},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"     * @param newDescription new description to be updated, including index of task."},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"    public UpdateCommand(String newDescription) throws DukeException {"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"        String[] descriptionArr \u003d newDescription.split(\" \", 2);"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"            this.index \u003d Integer.parseInt(descriptionArr[0]) - 1;"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"            this.newDescription \u003d descriptionArr[1];"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"Please describe what you want to update!\");"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"     * Executes the command by updating existing task in the taskList,"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"     * writing the updated taskList into storage and responding with relevant message."},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"     * @param taskList the TaskList object that contains all tasks added by user."},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":"     * @param ui the Ui object that provides responses to the user according to status of their input."},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"     * @param storage the Storage object that contains the tasks saved in computer\u0027s hard disk."},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"     * @return Ui of response to user request."},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"     * @throws DukeException if the specified index of task does not exist."},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"        assert taskList !\u003d null;"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"        assert ui !\u003d null;"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"        assert storage !\u003d null;"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"tsh22"},"content":"            Task task \u003d taskList.updateTask(index, newDescription);"},{"lineNumber":42,"author":{"gitId":"tsh22"},"content":"            storage.writeToFile(taskList.getList());"},{"lineNumber":43,"author":{"gitId":"tsh22"},"content":"            return ui.showTaskUpdated(task);"},{"lineNumber":44,"author":{"gitId":"tsh22"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":45,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(\"This task number does not exist! Try again?\");"},{"lineNumber":46,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"tsh22"},"content":"            throw new DukeException(e.getMessage());"},{"lineNumber":48,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":50}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"        \u003cLabel fx:id\u003d\"dialog\" style\u003d\"-fx-background-radius: 7; -fx-border-radius: 7; -fx-background-color: #708090; -fx-text-fill: white;\" text\u003d\"Label\" wrapText\u003d\"true\" minHeight\u003d\"-Infinity\"\u003e"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"            \u003cHBox.margin\u003e"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"                \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"            \u003c/HBox.margin\u003e"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"            \u003cfont\u003e"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"                \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"            \u003c/font\u003e"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"         \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"         \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"        \u003c/Label\u003e"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"    \u003c/children\u003e"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"    \u003cpadding\u003e"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"    \u003c/padding\u003e"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"tsh22":27}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"  vvalue\u003d\"1.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"            \u003ccontent\u003e"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-image: url(\u0027/images/background.jpg\u0027); -fx-background-size: stretch;\" /\u003e"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"            \u003c/content\u003e"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"tsh22":20}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"import duke.Parser;"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"public class DukeTest {"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"    public void parseTodo_noDescription_exceptionThrown() {"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"            Parser.parseCommand(\"todo\");"},{"lineNumber":15,"author":{"gitId":"tsh22"},"content":"            fail();"},{"lineNumber":16,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":17,"author":{"gitId":"tsh22"},"content":"            assertEquals(\"Oops! The description of todo cannot be empty!\", e.getMessage());"},{"lineNumber":18,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":21,"author":{"gitId":"tsh22"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"tsh22"},"content":"    public void parseDeadline_noDescription_exceptionThrown() {"},{"lineNumber":23,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"tsh22"},"content":"            Parser.parseCommand(\"deadline\");"},{"lineNumber":25,"author":{"gitId":"tsh22"},"content":"            fail();"},{"lineNumber":26,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":27,"author":{"gitId":"tsh22"},"content":"            assertEquals(\"Oops! The description of deadline cannot be empty!\", e.getMessage());"},{"lineNumber":28,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tsh22"},"content":""},{"lineNumber":31,"author":{"gitId":"tsh22"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"tsh22"},"content":"    public void parseEvent_noDescription_exceptionThrown() {"},{"lineNumber":33,"author":{"gitId":"tsh22"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"tsh22"},"content":"            Parser.parseCommand(\"event\");"},{"lineNumber":35,"author":{"gitId":"tsh22"},"content":"            fail();"},{"lineNumber":36,"author":{"gitId":"tsh22"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"tsh22"},"content":"            assertEquals(\"Oops! The description of event cannot be empty!\", e.getMessage());"},{"lineNumber":38,"author":{"gitId":"tsh22"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"tsh22"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tsh22"},"content":"}"}],"authorContributionMap":{"tsh22":40}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tsh22"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"tsh22"},"content":"todo join sports club"},{"lineNumber":3,"author":{"gitId":"tsh22"},"content":"deadline return book /by June 6th"},{"lineNumber":4,"author":{"gitId":"tsh22"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":5,"author":{"gitId":"tsh22"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"tsh22"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"tsh22"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":8,"author":{"gitId":"tsh22"},"content":"list"},{"lineNumber":9,"author":{"gitId":"tsh22"},"content":"blah"},{"lineNumber":10,"author":{"gitId":"tsh22"},"content":"todo"},{"lineNumber":11,"author":{"gitId":"tsh22"},"content":"deadline"},{"lineNumber":12,"author":{"gitId":"tsh22"},"content":"event"},{"lineNumber":13,"author":{"gitId":"tsh22"},"content":"delete 3"},{"lineNumber":14,"author":{"gitId":"tsh22"},"content":"list"}],"authorContributionMap":{"tsh22":14}}]
