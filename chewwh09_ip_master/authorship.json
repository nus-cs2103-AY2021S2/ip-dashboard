[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"chewwh09":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"    archiveVersion \u003d \"v0.1.2\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chewwh09":17,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"# Introduction"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"Welcome to RoboBot. This is an application for you to record your tasks into a list."},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"![Image of RoboBot](./Ui.png)"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"## Features and Usage"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"### 1. `ToDo` task"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"Add a Todo task into Robobot."},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"- todo [task description]"},{"lineNumber":12,"author":{"gitId":"-"},"content":"  "},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"- todo read book"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"- [T][ ] read book"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"### 2. `Event` task"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"Add an event task that has date and time allocated to it into Robobot."},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"- event [task description] /at [date]"},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"- event project 1 /at 2020-02-11"},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"- [E][ ] project 1 (at: Feb 11 2020)"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"### 3. `Deadline` task"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"Add a deadline task that has date and time allocated to it into Robobot."},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"- deadline [task description] /by [date]"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"- event project 1 /by 2020-02-11"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"- [D][ ] project 1 (by: Feb 11 2020)"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"### `Delete` task"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"Delete an existing task from the RoboBot task list."},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"- delete [index]"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"- delete 1"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"- deleted the first task in the list."},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"- error if the list is empty."},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"- error if index \u003e the size of the list."},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"### `Done` task"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"Check an existing task from the RoboBot task list as completed."},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"- done [index]"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":"- done 1"},{"lineNumber":64,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":65,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":66,"author":{"gitId":"chewwh09"},"content":"- complete the first task in the list."},{"lineNumber":67,"author":{"gitId":"chewwh09"},"content":"- error if the list is empty."},{"lineNumber":68,"author":{"gitId":"chewwh09"},"content":"- error if index \u003e the size of the list."},{"lineNumber":69,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":70,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":71,"author":{"gitId":"chewwh09"},"content":"### `Find` task"},{"lineNumber":72,"author":{"gitId":"chewwh09"},"content":"Find task(s) that has a certain keyword associated to it."},{"lineNumber":73,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":74,"author":{"gitId":"chewwh09"},"content":"- Find [keyword]"},{"lineNumber":75,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":76,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":77,"author":{"gitId":"chewwh09"},"content":"- find book"},{"lineNumber":78,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":79,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":80,"author":{"gitId":"chewwh09"},"content":"- display the task that has description containing \"book\"."},{"lineNumber":81,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":82,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":83,"author":{"gitId":"chewwh09"},"content":"### `Schedule` Task"},{"lineNumber":84,"author":{"gitId":"chewwh09"},"content":"Find task(s) that has a certain date and time associated to it."},{"lineNumber":85,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":86,"author":{"gitId":"chewwh09"},"content":"- schedule /on [date]"},{"lineNumber":87,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":88,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":89,"author":{"gitId":"chewwh09"},"content":"- schedule /on 2020-02-11"},{"lineNumber":90,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":91,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":92,"author":{"gitId":"chewwh09"},"content":"- display the task that has the date time associated to \"2020-02-11\""},{"lineNumber":93,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":94,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":95,"author":{"gitId":"chewwh09"},"content":"### `List` task"},{"lineNumber":96,"author":{"gitId":"chewwh09"},"content":"List down all the task(s) that RoboBot are currently recording."},{"lineNumber":97,"author":{"gitId":"chewwh09"},"content":"#### Format:"},{"lineNumber":98,"author":{"gitId":"chewwh09"},"content":"- list"},{"lineNumber":99,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":100,"author":{"gitId":"chewwh09"},"content":"#### Example of usage:"},{"lineNumber":101,"author":{"gitId":"chewwh09"},"content":"- list"},{"lineNumber":102,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":103,"author":{"gitId":"chewwh09"},"content":"#### Expected Outcome:"},{"lineNumber":104,"author":{"gitId":"chewwh09"},"content":"- List down all the task(s) recorded in Robobot."}],"authorContributionMap":{"chewwh09":93,"-":11}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.command.Command;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Parser;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":" * A personal chat bot that helps a person keep track of various things."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    private final Storage storage;"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    private TaskList tasks \u003d new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    private final Ui ui;"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"     * Construct a RoBoBot chat bot"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     * @param filePath   The file path where the tasks will be stored."},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    public Duke(String filePath) {"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        ui \u003d new Ui();"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"            System.out.println(e.getMessage());"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"     * Execute the Duke chat bot."},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"     * @param input The command string."},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"     * @return      The response string."},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    public String run(String input) {"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"            String message \u003d (command.execute(tasks, ui, storage));"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"            System.out.println(message); // For CLI"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"            return message;"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"        } catch (Exception e) {"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"            return e.getMessage();"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"     * Get response from running the Duke program."},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"     * @param input  The command string."},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"     * @return       The response string."},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"    public String getResponse(String input) {"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"        return new Duke(\"data/duke.txt\").run(input);"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"chewwh09":56,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":9}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    private Duke duke \u003d new Duke(\"data\\\\duke.txt\");"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"            stage.setTitle(\"RoboBot\");"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"import java.util.concurrent.Executors;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"import java.util.concurrent.ScheduledExecutorService;"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"import java.util.concurrent.TimeUnit;"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    private VBox dialogContainer;"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"    private TextField userInput;"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    private Button sendButton;"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    private Duke duke;"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/SchoolBoy.png\"));"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/robot.png\"));"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"    public void initialize() {"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        duke \u003d d;"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"            ScheduledExecutorService executorService \u003d Executors.newSingleThreadScheduledExecutor();"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"            executorService.schedule(() -\u003e {"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"                Platform.exit();"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"                System.exit(0);"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"            }, 1, TimeUnit.SECONDS);"},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":64,"author":{"gitId":"chewwh09"},"content":"        userInput.clear();"},{"lineNumber":65,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":66}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":" * The AddCommand class denotes an add command to the RoboBot chat bot."},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"public class AddCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"    private final String type;"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"     * Constructs an AddCommand."},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"     * @param type              The type of task to be added into the list."},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription   The description of the task."},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    public AddCommand(String type, String taskDescription) {"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"        this.type \u003d type;"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"            ArrayList\u003cTask\u003e tasks \u003d taskList.addTask(type, taskDescription, storage);"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"            return ui.addCommandInteraction(tasks.get(tasks.size() - 1), tasks);"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"            return \"     The date time format is wrong. \""},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"                    + \"It supposed to be yyyy-MM-dd or yyyy/MM/dd\";"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"        } catch (Exception e) {"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"            return \"     \" + e.getMessage();"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":46}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":" * The ByeCommand class denotes an bye command to the RoboBot chat bot."},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"public class ByeCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"     * Constructs an DeleteCommand."},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription The description of the task."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"    public ByeCommand(String taskDescription) {"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"        return ui.byeCommandInteraction();"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":30}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":" * The Command class denotes a command to the RoboBot chat bot."},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    protected final String taskDescription;"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * Constructs a command"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription The description of the task."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    public Command(String taskDescription) {"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"        this.taskDescription \u003d taskDescription;"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage);"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":29}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.exception.InvalidDescriptionException;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":" * The DeleteCommand class denotes a delete command to the RoboBot chat bot."},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * Constructs an DeleteCommand."},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription   The description of the task."},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    public DeleteCommand(String taskDescription) {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"            if (taskDescription.isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"                throw new InvalidDescriptionException(\"Description cannot be empty\");"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"            int index \u003d Integer.parseInt(taskDescription.substring(0, 1)) - 1;"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"            Task task \u003d taskList.getTask(index);"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"            ArrayList\u003cTask\u003e tasks \u003d taskList.delete(index, storage);"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"            return ui.deleteCommandInteraction(task, tasks);"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        } catch (Exception ex) {"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"            return \"     \" + ex.getMessage();"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":44}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import duke.exception.InvalidDescriptionException;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":" * The DoneCommand class denotes a done command to the RoboBot chat bot."},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * Constructs an DoneCommand."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription   The description of the task."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    public DoneCommand(String taskDescription) {"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"            if (taskDescription.isEmpty()) {"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"                throw new InvalidDescriptionException(\"Description cannot be empty\");"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"            int index \u003d Integer.parseInt(taskDescription.substring(0, 1)) - 1;"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"            Task task \u003d taskList.getTask(index);"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"            taskList.done(index, storage);"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"            return ui.doneCommandInteraction(task);"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        } catch (Exception ex) {"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"            return \"     \" + ex.getMessage();"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":42}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.exception.InvalidDescriptionException;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":" * The FindCommand class denotes a find command to the RoboBot chat bot."},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"public class FindCommand extends Command {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * Constructs a FindCommand"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription    The description of the task."},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    public FindCommand(String taskDescription) {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"            ArrayList\u003cTask\u003e matchingTasks \u003d taskList.find(taskDescription);"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"            return ui.findCommandInteraction(matchingTasks);"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        } catch (InvalidDescriptionException ex) {"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"            return \"     \" + ex.getMessage();"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":39}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":" * The ListCommand class denotes a list command to the RoboBot chat bot."},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"public class ListCommand extends Command {"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"     * Constructs an ListCommand."},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription   The description of the task."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"    public ListCommand(String taskDescription) {"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"        return taskList.list();"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":30}},{"path":"src/main/java/duke/command/ScheduleCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":" * The ScheduleCommand class denotes a schedule command to the RoboBot chat bot."},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"public class ScheduleCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * Construct a ScheduleCommand."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription      The description of the task."},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    public ScheduleCommand(String taskDescription) {"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"            ArrayList\u003cTask\u003e scheduledTasks \u003d taskList.filterSchedule(taskDescription);"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"            return ui.scheduleCommandInteraction(scheduledTasks);"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"        } catch (Exception ex) {"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"            return ex.getMessage();"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":37}},{"path":"src/main/java/duke/command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Storage;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.logging.TaskList;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.logging.Ui;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":" * The UnknownCommand class denotes an unknown command to the RoboBot chat bot."},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"public class UnknownCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     * Constructs an UnknownCommand."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription   The description of the task."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    public UnknownCommand(String taskDescription) {"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"        super(taskDescription);"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"     * Executing the command"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     * @param taskList The list of recorded tasks."},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * @param ui       The user interface."},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * @param storage  The list of recorded user inputs data."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"            return ui.unknownCommandInteraction();"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"        } catch (InvalidInputException ex) {"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"            return ex.getMessage();"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":35}},{"path":"src/main/java/duke/exception/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":" * An exception raised when user inputs a command format that doesn\u0027t correspond to our commands."},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"public class InvalidDescriptionException extends Exception {"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"     * Constructs an InvalidDescriotionException."},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"     * @param message   A message that can be displayed when this exception is thrown."},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    public InvalidDescriptionException(String message) {"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":14}},{"path":"src/main/java/duke/exception/InvalidInputException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":" *  An exception raised when user inputs a command that doesn\u0027t exist in RoboBot chat bot."},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"public class InvalidInputException extends Exception {"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"     * Constructs a InvalidInputException"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"     * @param message  A message that can be displayed when this exception is thrown."},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    public InvalidInputException(String message) {"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"        super(message);"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":14}},{"path":"src/main/java/duke/logging/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.logging;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import duke.command.AddCommand;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import duke.command.ByeCommand;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.command.Command;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import duke.command.DoneCommand;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import duke.command.FindCommand;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import duke.command.ListCommand;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import duke.command.ScheduleCommand;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"import duke.command.UnknownCommand;"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":" * The Parser class denotes a parser."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"     * Parse a certain string and determine which command is being called."},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"     * @param fullCommand   The string to be parsed."},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"     * @return              A command to be executed."},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    public static Command parse(String fullCommand) {"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"        String type;"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        String taskDescription;"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        if (fullCommand.contains(\" \")) {"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"            int commandStrLength \u003d fullCommand.indexOf(\" \");"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"            type \u003d fullCommand.substring(0, commandStrLength);"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"            taskDescription \u003d fullCommand.substring(commandStrLength + 1, fullCommand.length());"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"            type \u003d fullCommand;"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"            taskDescription \u003d \"\";"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        switch (type) {"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        case \"list\":"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"            return new ListCommand(taskDescription);"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        case \"bye\":"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"            return new ByeCommand(taskDescription);"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        case \"todo\":"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"        case \"deadline\":"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"        case \"event\":"},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"            return new AddCommand(type, taskDescription);"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"        case \"done\":"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"            return new DoneCommand(taskDescription);"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"        case \"delete\":"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"            return new DeleteCommand(taskDescription);"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"        case \"find\":"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"            return new FindCommand(taskDescription);"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"        case \"schedule\":"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"            return new ScheduleCommand(taskDescription);"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"        default:"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"            return new UnknownCommand(taskDescription);"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":56}},{"path":"src/main/java/duke/logging/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.logging;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import java.io.FileWriter;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"import duke.model.Deadline;"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"import duke.model.Event;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"import duke.model.ToDo;"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":" * A Storage class denotes a file storage."},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"    private final File file;"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * Constructs a storage"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * @param filePath   the filepath where the data are going to be stored at."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"    public Storage(String filePath) {"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"        this.file \u003d new File(filePath);"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"        if (!file.exists()) {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"            try {"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"                File directory \u003d new File(\"data\");"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"                directory.mkdir();"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"                file.createNewFile();"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"            } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"                System.out.println(\"Something gone wrong with file creation\");"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"     * Load the tasks in the file."},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"     * @return                         A list of tasks in the file."},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"     * @throws FileNotFoundException   If file isn\u0027t found."},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"    public ArrayList\u003cTask\u003e load() throws FileNotFoundException {"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"        Scanner sc \u003d new Scanner(file);"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"        while (sc.hasNext()) {"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"            Task task;"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"            String data \u003d sc.nextLine();"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"            String[] strings \u003d data.split(\"// \");"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"            char taskType \u003d strings[0].charAt(0);"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"            boolean isCompleted \u003d Integer.parseInt(strings[1].substring(0, 1)) \u003d\u003d 1;"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"            String taskName \u003d strings[2].strip();"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"            if (taskType \u003d\u003d \u0027T\u0027) {"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"                task \u003d new ToDo(isCompleted, taskName);"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"            } else if (taskType \u003d\u003d \u0027D\u0027) {"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"                task \u003d new Deadline(isCompleted, taskName, LocalDate.parse(strings[3].strip()));"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"            } else {"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"                task \u003d new Event(isCompleted, taskName, LocalDate.parse(strings[3].strip()));"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"            tasks.add(task);"},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":"        return tasks;"},{"lineNumber":64,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":66,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"chewwh09"},"content":"     * Overwrite the entire task\u0027s file content."},{"lineNumber":68,"author":{"gitId":"chewwh09"},"content":"     * @param tasks         A list of tasks."},{"lineNumber":69,"author":{"gitId":"chewwh09"},"content":"     * @throws IOException  If file cannot be written or open."},{"lineNumber":70,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"chewwh09"},"content":"    public void overwrite(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":72,"author":{"gitId":"chewwh09"},"content":"        assert tasks !\u003d null : \"Tasks cannot be null\";"},{"lineNumber":73,"author":{"gitId":"chewwh09"},"content":"        FileWriter fw \u003d new FileWriter(file);"},{"lineNumber":74,"author":{"gitId":"chewwh09"},"content":"        for (Task task : tasks) {"},{"lineNumber":75,"author":{"gitId":"chewwh09"},"content":"            fw.write(task.generateFileFormatString() + \"\\n\");"},{"lineNumber":76,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"chewwh09"},"content":"        fw.close();"},{"lineNumber":78,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":80,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"chewwh09"},"content":"     * Append to the back of the task\u0027s file."},{"lineNumber":82,"author":{"gitId":"chewwh09"},"content":"     * @param task          A list of tasks"},{"lineNumber":83,"author":{"gitId":"chewwh09"},"content":"     * @throws IOException  If file cannot be written or open."},{"lineNumber":84,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"chewwh09"},"content":"    public void append(Task task) throws IOException {"},{"lineNumber":86,"author":{"gitId":"chewwh09"},"content":"        assert task !\u003d null : \"Tasks cannot be null\";"},{"lineNumber":87,"author":{"gitId":"chewwh09"},"content":"        FileWriter fw \u003d new FileWriter(file, true);"},{"lineNumber":88,"author":{"gitId":"chewwh09"},"content":"        fw.write(task.generateFileFormatString() + \"\\n\");"},{"lineNumber":89,"author":{"gitId":"chewwh09"},"content":"        fw.close();"},{"lineNumber":90,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":91}},{"path":"src/main/java/duke/logging/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.logging;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import java.util.stream.Collectors;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"import duke.exception.InvalidDescriptionException;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"import duke.model.Deadline;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"import duke.model.Event;"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"import duke.model.ToDo;"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":" * A TaskList call denotes a system with a list of task and has the ability to make changes to the list."},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"public class TaskList {"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"    private final ArrayList\u003cTask\u003e tasks;"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     * Construct a TaskList."},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"     * @param tasks   A list of tasks."},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"     * Print out all the tasks in the list."},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"     * @return   The entire list of tasks."},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"    public String list() {"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        String message \u003d \"     Here are the tasks in your list:\";"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"            message +\u003d \"\\n\" + \"     \" + (i + 1) + \".\" + tasks.get(i);"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"        return message;"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"     * Add a task into the list of tasks."},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"     * @param type                         The type of task."},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription              The description of the task."},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"     * @param storage                      The storage information containing the list of tasks information."},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"     * @return                             The updated list of tasks."},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"     * @throws InvalidDescriptionException If description format is wrong."},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"     * @throws DateTimeParseException      If datetime format is wrong."},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"     * @throws IOException                 If inputting information into the storage post an error."},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"    public ArrayList\u003cTask\u003e addTask(String type, String taskDescription, Storage storage)"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"            throws InvalidDescriptionException, DateTimeParseException, IOException {"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"        Task task;"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"        if (taskDescription.length() \u003d\u003d 0) {"},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"OOPS!!! The description of \" + type + \" cannot be empty.\");"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"        } else if ((type.equals(\"deadline\") \u0026\u0026 !taskDescription.contains(\"/by\"))"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"                || (type.equals(\"event\")) \u0026\u0026 !taskDescription.contains(\"/at\")) {"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"OOPS!!! The description format of \" + type + \" is wrong.\");"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"        if (type.equals(\"todo\")) {"},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":"            task \u003d new ToDo(false, taskDescription);"},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":"        } else {"},{"lineNumber":64,"author":{"gitId":"chewwh09"},"content":"            int index \u003d type.equals(\"deadline\")"},{"lineNumber":65,"author":{"gitId":"chewwh09"},"content":"                    ? taskDescription.indexOf(\"/by\")"},{"lineNumber":66,"author":{"gitId":"chewwh09"},"content":"                    : taskDescription.indexOf(\"/at\");"},{"lineNumber":67,"author":{"gitId":"chewwh09"},"content":"            String taskName \u003d taskDescription.substring(0, index);"},{"lineNumber":68,"author":{"gitId":"chewwh09"},"content":"            String dateTimeString \u003d taskDescription.substring(index + 4).strip()"},{"lineNumber":69,"author":{"gitId":"chewwh09"},"content":"                    .replace(\"/\", \"-\");"},{"lineNumber":70,"author":{"gitId":"chewwh09"},"content":"            LocalDate dateTime \u003d LocalDate.parse(dateTimeString);"},{"lineNumber":71,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":72,"author":{"gitId":"chewwh09"},"content":"            if (type.equals(\"deadline\")) {"},{"lineNumber":73,"author":{"gitId":"chewwh09"},"content":"                task \u003d new Deadline(false, taskName, dateTime);"},{"lineNumber":74,"author":{"gitId":"chewwh09"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"chewwh09"},"content":"                task \u003d new Event(false, taskName, dateTime);"},{"lineNumber":76,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"chewwh09"},"content":"        tasks.add(task);"},{"lineNumber":79,"author":{"gitId":"chewwh09"},"content":"        storage.append(task);"},{"lineNumber":80,"author":{"gitId":"chewwh09"},"content":"        return tasks;"},{"lineNumber":81,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":83,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"chewwh09"},"content":"     * Get the indicated task."},{"lineNumber":85,"author":{"gitId":"chewwh09"},"content":"     * @param index                          The index of the task."},{"lineNumber":86,"author":{"gitId":"chewwh09"},"content":"     * @return                               The indicated task."},{"lineNumber":87,"author":{"gitId":"chewwh09"},"content":"     * @throws InvalidDescriptionException   If index is more than size of tasks."},{"lineNumber":88,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"chewwh09"},"content":"    public Task getTask(int index) throws InvalidDescriptionException {"},{"lineNumber":90,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"chewwh09"},"content":"            return tasks.get(index);"},{"lineNumber":92,"author":{"gitId":"chewwh09"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":93,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"The index given is incorrect.\");"},{"lineNumber":94,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":96,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":97,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":98,"author":{"gitId":"chewwh09"},"content":"     * Delete a task from the list of tasks."},{"lineNumber":99,"author":{"gitId":"chewwh09"},"content":"     * @param index                           The index of the task."},{"lineNumber":100,"author":{"gitId":"chewwh09"},"content":"     * @param storage                         The storage information containing the list of tasks information."},{"lineNumber":101,"author":{"gitId":"chewwh09"},"content":"     * @return                                The updated list of tasks."},{"lineNumber":102,"author":{"gitId":"chewwh09"},"content":"     * @throws InvalidDescriptionException    If description format is wrong."},{"lineNumber":103,"author":{"gitId":"chewwh09"},"content":"     * @throws IOException                    If inputting information into the storage post an error."},{"lineNumber":104,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"chewwh09"},"content":"    public ArrayList\u003cTask\u003e delete(int index, Storage storage) throws InvalidDescriptionException, IOException {"},{"lineNumber":106,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":107,"author":{"gitId":"chewwh09"},"content":"            tasks.remove(index);"},{"lineNumber":108,"author":{"gitId":"chewwh09"},"content":"            storage.overwrite(tasks);"},{"lineNumber":109,"author":{"gitId":"chewwh09"},"content":"            return tasks;"},{"lineNumber":110,"author":{"gitId":"chewwh09"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":111,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"OOPS!!! The task description is wrong\");"},{"lineNumber":112,"author":{"gitId":"chewwh09"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":113,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"OOPS!!! The number you entered is either too big \""},{"lineNumber":114,"author":{"gitId":"chewwh09"},"content":"                    + \"or smaller than 0. There are currently \" + tasks.size() + \" tasks\");"},{"lineNumber":115,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":117,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":118,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":119,"author":{"gitId":"chewwh09"},"content":"     * Complete a task from the list of tasks."},{"lineNumber":120,"author":{"gitId":"chewwh09"},"content":"     * @param index                          The index of the task."},{"lineNumber":121,"author":{"gitId":"chewwh09"},"content":"     * @param storage                        The storage information containing the list of tasks information."},{"lineNumber":122,"author":{"gitId":"chewwh09"},"content":"     * @return                               The updated list of tasks"},{"lineNumber":123,"author":{"gitId":"chewwh09"},"content":"     * @throws InvalidDescriptionException   If description format is wrong."},{"lineNumber":124,"author":{"gitId":"chewwh09"},"content":"     * @throws IOException                   If inputting information into the storage post an error."},{"lineNumber":125,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"chewwh09"},"content":"    public ArrayList\u003cTask\u003e done(int index, Storage storage) throws InvalidDescriptionException, IOException {"},{"lineNumber":127,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":128,"author":{"gitId":"chewwh09"},"content":"            Task task \u003d this.getTask(index);"},{"lineNumber":129,"author":{"gitId":"chewwh09"},"content":"            task.completeTask();"},{"lineNumber":130,"author":{"gitId":"chewwh09"},"content":"            storage.overwrite(tasks);"},{"lineNumber":131,"author":{"gitId":"chewwh09"},"content":"            return tasks;"},{"lineNumber":132,"author":{"gitId":"chewwh09"},"content":"        } catch (NumberFormatException ex) {"},{"lineNumber":133,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"☹ OOPS!!! The task description is wrong\");"},{"lineNumber":134,"author":{"gitId":"chewwh09"},"content":"        } catch (IndexOutOfBoundsException ex) {"},{"lineNumber":135,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"☹ OOPS!!! The number you entered is either too big \""},{"lineNumber":136,"author":{"gitId":"chewwh09"},"content":"                    + \"or smaller than 0. There are currently \" + tasks.size() + \" tasks\");"},{"lineNumber":137,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":138,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":140,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":141,"author":{"gitId":"chewwh09"},"content":"     * Find a task from the list of tasks."},{"lineNumber":142,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription               The description of the task."},{"lineNumber":143,"author":{"gitId":"chewwh09"},"content":"     * @return                              The list of tasks matching the task description."},{"lineNumber":144,"author":{"gitId":"chewwh09"},"content":"     * @throws InvalidDescriptionException  If the description is empty."},{"lineNumber":145,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":146,"author":{"gitId":"chewwh09"},"content":"    public ArrayList\u003cTask\u003e find(String taskDescription) throws InvalidDescriptionException {"},{"lineNumber":147,"author":{"gitId":"chewwh09"},"content":"        if (taskDescription.length() \u003d\u003d 0) {"},{"lineNumber":148,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"OOPS!!! The description cannot be empty.\");"},{"lineNumber":149,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":150,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":151,"author":{"gitId":"chewwh09"},"content":"        return tasks.stream().filter(task -\u003e task.containSubstring(taskDescription.strip()))"},{"lineNumber":152,"author":{"gitId":"chewwh09"},"content":"                .collect(Collectors.toCollection(ArrayList::new));"},{"lineNumber":153,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":155,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"chewwh09"},"content":"     * Find task(s) with the same date specified in task description."},{"lineNumber":157,"author":{"gitId":"chewwh09"},"content":"     * @param taskDescription                The description of the task that includes the date time."},{"lineNumber":158,"author":{"gitId":"chewwh09"},"content":"     * @return                               The list of tasks matching the date."},{"lineNumber":159,"author":{"gitId":"chewwh09"},"content":"     * @throws InvalidDescriptionException   If the description\u0027s format is invalid."},{"lineNumber":160,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"chewwh09"},"content":"    public ArrayList\u003cTask\u003e filterSchedule(String taskDescription) throws InvalidDescriptionException {"},{"lineNumber":162,"author":{"gitId":"chewwh09"},"content":"        if (!taskDescription.contains(\"/on\")) {"},{"lineNumber":163,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"Your view schedule command should be in this format:\""},{"lineNumber":164,"author":{"gitId":"chewwh09"},"content":"                    + \" schedule /on (data)\");"},{"lineNumber":165,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":166,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":167,"author":{"gitId":"chewwh09"},"content":"        try {"},{"lineNumber":168,"author":{"gitId":"chewwh09"},"content":"            int index \u003d taskDescription.indexOf(\"/on\");"},{"lineNumber":169,"author":{"gitId":"chewwh09"},"content":"            String dateTimeString \u003d taskDescription.substring(index + 3).strip().replace(\"/\", \"-\");"},{"lineNumber":170,"author":{"gitId":"chewwh09"},"content":"            LocalDate userScheduledDate \u003d LocalDate.parse(dateTimeString);"},{"lineNumber":171,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":172,"author":{"gitId":"chewwh09"},"content":"            return tasks.stream().filter(task -\u003e task.checkEqualDate(userScheduledDate))"},{"lineNumber":173,"author":{"gitId":"chewwh09"},"content":"                    .collect(Collectors.toCollection(ArrayList::new));"},{"lineNumber":174,"author":{"gitId":"chewwh09"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":175,"author":{"gitId":"chewwh09"},"content":"            throw new InvalidDescriptionException(\"Your view schedule command should be in this format:\""},{"lineNumber":176,"author":{"gitId":"chewwh09"},"content":"                    + \"schedule /on (data)\");"},{"lineNumber":177,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":178,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":179}},{"path":"src/main/java/duke/logging/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.logging;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import duke.exception.InvalidInputException;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"import duke.model.Task;"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":" * A Ui class denotes a user interface system."},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     * An add command interaction which complements with the add command."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * @param task    The task to be added to the list."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * @param tasks   The list of tasks in RoboBot chat bot."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * @return        The message replied by RoboBot chat bot."},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    public String addCommandInteraction(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        return \"     Got it. I\u0027ve added this task:\\n     \" + task + \"\\n     Now you have \""},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"                + tasks.size() + \" task(s) in the list\";"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * A delete command interaction which complements with the delete command."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @param task     The task to be added to the list."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @param tasks    The list of tasks in RoboBot chat bot."},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"     * @return         The message replied by RoboBot chat bot."},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"    public String deleteCommandInteraction(Task task, ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"        return \"     Noted. I\u0027ve removed this task:\\n     \" + task + \"\\n     Now you have \""},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"                + tasks.size() + \" task(s) in the list\";"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"     * A done command interaction which complements with the done command."},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"     * @param task    The task to be added to the list."},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"     * @return        The message replied by RoboBot chat bot."},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    public String doneCommandInteraction(Task task) {"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        return \"     Nice! I\u0027ve marked this task as done:\\n     \" + task;"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"     * A bye command interaction which complements with the bye command."},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"     * @return   The message replied by RoboBot chat bot."},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"    public String byeCommandInteraction() {"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"        return \"     Bye. Hope to see you again soon!\";"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"     * A unknown command interaction which complements with an unknown command."},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"     * @return                         Nothing."},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":"     * @throws InvalidInputException   Always throws an InvalidInputException."},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"    public String unknownCommandInteraction() throws InvalidInputException {"},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"        throw new InvalidInputException(\"     OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"     * A find command interaction which complements with a find command."},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":"     * @param matchingTasks    All the matching tasks found."},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":"     * @return                 The message replied by RoboBot chat bot."},{"lineNumber":64,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"chewwh09"},"content":"    public String findCommandInteraction(ArrayList\u003cTask\u003e matchingTasks) {"},{"lineNumber":66,"author":{"gitId":"chewwh09"},"content":"        if (matchingTasks.size() \u003d\u003d 0) {"},{"lineNumber":67,"author":{"gitId":"chewwh09"},"content":"            return \"     No match found\";"},{"lineNumber":68,"author":{"gitId":"chewwh09"},"content":"        } else {"},{"lineNumber":69,"author":{"gitId":"chewwh09"},"content":"            String message \u003d \"     Here are the matching tasks in your list:\";"},{"lineNumber":70,"author":{"gitId":"chewwh09"},"content":"            for (Task task: matchingTasks) {"},{"lineNumber":71,"author":{"gitId":"chewwh09"},"content":"                message +\u003d (\"\\n     \" + task);"},{"lineNumber":72,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":73,"author":{"gitId":"chewwh09"},"content":"            return message;"},{"lineNumber":74,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":77,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"chewwh09"},"content":"     * A schedule command interaction which complements with a schedule command."},{"lineNumber":79,"author":{"gitId":"chewwh09"},"content":"     * @param scheduledTasks   All the scheduled tasks found."},{"lineNumber":80,"author":{"gitId":"chewwh09"},"content":"     * @return                 The message replied by RoboBot chat bot."},{"lineNumber":81,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"chewwh09"},"content":"    public String scheduleCommandInteraction(ArrayList\u003cTask\u003e scheduledTasks) {"},{"lineNumber":83,"author":{"gitId":"chewwh09"},"content":"        if (scheduledTasks.size() \u003d\u003d 0) {"},{"lineNumber":84,"author":{"gitId":"chewwh09"},"content":"            return \"     No task scheduled\";"},{"lineNumber":85,"author":{"gitId":"chewwh09"},"content":"        } else {"},{"lineNumber":86,"author":{"gitId":"chewwh09"},"content":"            String message \u003d \"    Here are your scheduled task:\";"},{"lineNumber":87,"author":{"gitId":"chewwh09"},"content":"            for (Task task: scheduledTasks) {"},{"lineNumber":88,"author":{"gitId":"chewwh09"},"content":"                message +\u003d (\"\\n     \" + task);"},{"lineNumber":89,"author":{"gitId":"chewwh09"},"content":"            }"},{"lineNumber":90,"author":{"gitId":"chewwh09"},"content":"            return message;"},{"lineNumber":91,"author":{"gitId":"chewwh09"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":93}},{"path":"src/main/java/duke/model/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":" * A Deadline class denotes a deadline."},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"    private final LocalDate dateTime;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     * Construct a deadline."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * @param isCompleted   Checked if the task is completed."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * @param taskName     The task name."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * @param dateTime     The date and time of the deadline."},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    public Deadline(boolean isCompleted, String taskName, LocalDate dateTime) {"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        super(\u0027D\u0027, isCompleted, taskName);"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * Generate a string to store in a file."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @return   A string that will be store in a file."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    public String generateFileFormatString() {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        return super.generateFileFormatString() + \" // \""},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"                + this.dateTime;"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"     * Check if the given date equals to the task date time."},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"     * @param date   A local date."},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"     * @return       True if the given date equals to the task date time, otherwise false."},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    public boolean checkEqualDate(LocalDate date) {"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        return dateTime.isEqual(date);"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"     * A string representation of a deadline."},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"     * @return  A string representing a deadline."},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"                this.dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":52}},{"path":"src/main/java/duke/model/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":" * An Event class denotes an event."},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"    private final LocalDate dateTime;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     * Constructs an Event."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * @param isCompleted   Checked if the task is completed."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * @param taskName     The task name."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * @param dateTime     The date and time of the event."},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    public Event(boolean isCompleted, String taskName, LocalDate dateTime) {"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        super(\u0027E\u0027, isCompleted, taskName);"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"     * Generate a string to store in a file."},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * @return   A string that will be store in a file."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    public String generateFileFormatString() {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        return super.generateFileFormatString() + \" // \""},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"                + this.dateTime;"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"     * Check if the given date equals to the task date time."},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"     * @param date   A local date."},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"     * @return       True if the given date equals to the task date time, otherwise false."},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    public boolean checkEqualDate(LocalDate date) {"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"        return dateTime.isEqual(date);"},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"     * A string representation of an event."},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"     * @return  A string representing an event."},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"        return String.format(\"[E]%s (at: %s)\", super.toString(),"},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"                this.dateTime.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":52}},{"path":"src/main/java/duke/model/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":" * A task class denotes a task."},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"public abstract class Task {"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"    private final char taskType;"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"    private boolean isCompleted;"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"    private final String taskName;"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     * Construct a task."},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"     * @param taskType    The type of the task."},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"     * @param isCompleted  Checked if the task is completed."},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"     * @param taskName    The task name."},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    public Task(char taskType, boolean isCompleted, String taskName) {"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"        this.taskType \u003d taskType;"},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"        this.isCompleted \u003d isCompleted;"},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"     * Generate a string to store in a file."},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"     * @return   A string that will be store in a file."},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    public String generateFileFormatString() {"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"        return String.format(\"%c // %d // %s\", taskType, isCompleted ? 1 : 0, taskName);"},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"     * Completed the task."},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"    public void completeTask() {"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"        this.isCompleted \u003d true;"},{"lineNumber":37,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":39,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"chewwh09"},"content":"     * Check task name contains the substring str."},{"lineNumber":41,"author":{"gitId":"chewwh09"},"content":"     * @param str  A substring."},{"lineNumber":42,"author":{"gitId":"chewwh09"},"content":"     * @return     True if task name contains str, otherwise false."},{"lineNumber":43,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"chewwh09"},"content":"    public boolean containSubstring(String str) {"},{"lineNumber":45,"author":{"gitId":"chewwh09"},"content":"        return this.taskName.contains(str);"},{"lineNumber":46,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":48,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"chewwh09"},"content":"     * Check if the given date equals to the task date time."},{"lineNumber":50,"author":{"gitId":"chewwh09"},"content":"     * @param date   A local date."},{"lineNumber":51,"author":{"gitId":"chewwh09"},"content":"     * @return       True if the given date equals to the task date time, otherwise false."},{"lineNumber":52,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"chewwh09"},"content":"    public abstract boolean checkEqualDate(LocalDate date);"},{"lineNumber":54,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":55,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"chewwh09"},"content":"     * A string representation of a task."},{"lineNumber":57,"author":{"gitId":"chewwh09"},"content":"     * @return  A string representing a task."},{"lineNumber":58,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"chewwh09"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"chewwh09"},"content":"        return String.format(\"[%c] %s\", isCompleted ? \u0027X\u0027 : \u0027 \u0027, this.taskName);"},{"lineNumber":62,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":63}},{"path":"src/main/java/duke/model/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":" * A ToDo class denotes a to-do item."},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":" */"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"public class ToDo extends Task {"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"     * Constructs a ToDo."},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"     * @param isCompleted   Checked if the task is completed."},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"     * @param taskName     The task name."},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    public ToDo(Boolean isCompleted, String taskName) {"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"        super(\u0027T\u0027, isCompleted, taskName);"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"     * Check if the given date equals to the task date time."},{"lineNumber":20,"author":{"gitId":"chewwh09"},"content":"     * @param date   A local date."},{"lineNumber":21,"author":{"gitId":"chewwh09"},"content":"     * @return       False."},{"lineNumber":22,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"chewwh09"},"content":"    public boolean checkEqualDate(LocalDate date) {"},{"lineNumber":25,"author":{"gitId":"chewwh09"},"content":"        return false;"},{"lineNumber":26,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":28,"author":{"gitId":"chewwh09"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"chewwh09"},"content":"     * A string representation of a to-do item."},{"lineNumber":30,"author":{"gitId":"chewwh09"},"content":"     * @return  A string representing a to-do item."},{"lineNumber":31,"author":{"gitId":"chewwh09"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"chewwh09"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"chewwh09"},"content":"    public String toString() {"},{"lineNumber":34,"author":{"gitId":"chewwh09"},"content":"        return String.format(\"[T]%s\", super.toString());"},{"lineNumber":35,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":36}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: cyan;\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"        \u003cLabel fx:id\u003d\"dialog\" prefWidth\u003d\"289.0\" style\u003d\"-fx-background-color: azure; -fx-background-radius: 30 30 30 30; -fx-label-padding: 20 20 20 20;\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"         \u003copaqueInsets\u003e"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"            \u003cInsets /\u003e"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"         \u003c/opaqueInsets\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"    \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"    \u003cpadding\u003e"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"15.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    \u003c/padding\u003e"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"chewwh09":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"400.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"chewwh09"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"chewwh09"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"chewwh09"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"chewwh09"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"chewwh09":19}},{"path":"src/test/java/duke/model/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    public void testGenerateFileFormatString() {"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"        assertEquals(\"D // 0 // project1 // 2019-12-01\","},{"lineNumber":13,"author":{"gitId":"chewwh09"},"content":"                new Deadline(false, \"project1\", LocalDate.parse(\"2019-12-01\")).generateFileFormatString());"},{"lineNumber":14,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":15}},{"path":"src/test/java/duke/model/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"package duke.model;"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":""},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"    public void createNewEvent() {"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"        assertEquals(\"[T][X] read book\", (new ToDo(true, \"read book\")).toString());"},{"lineNumber":11,"author":{"gitId":"chewwh09"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"chewwh09"},"content":"}"}],"authorContributionMap":{"chewwh09":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"chewwh09"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"chewwh09"},"content":"deadline return book /by June 6th"},{"lineNumber":3,"author":{"gitId":"chewwh09"},"content":"event project meeting /at Aug 6th 2-4pm"},{"lineNumber":4,"author":{"gitId":"chewwh09"},"content":"todo join sports club"},{"lineNumber":5,"author":{"gitId":"chewwh09"},"content":"todo borrow book"},{"lineNumber":6,"author":{"gitId":"chewwh09"},"content":"list"},{"lineNumber":7,"author":{"gitId":"chewwh09"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"chewwh09"},"content":"done 4"},{"lineNumber":9,"author":{"gitId":"chewwh09"},"content":"list"},{"lineNumber":10,"author":{"gitId":"chewwh09"},"content":"bye"}],"authorContributionMap":{"chewwh09":10}}]
