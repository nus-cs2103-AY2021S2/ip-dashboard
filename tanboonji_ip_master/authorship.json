[{"path":"src/main/java/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class ByeCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"bye\";"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"    private final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"    public ByeCommand() {"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldExit() {"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"    public String execute() {"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        return EXIT_MESSAGE;"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":23}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public abstract class Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    protected TaskList taskList;"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    public Command() {"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    public void addTaskList(TaskList taskList) {"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"     * Returns boolean value indicating if command causes Duke to exit."},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"     * @return True if Duke exits, else false."},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldExit() {"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"        return false;"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"     * Returns boolean value indicating if any tasks are updated."},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"     * @return True if tasks are updated, else false."},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"    public abstract boolean shouldSave();"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"     * Executes command."},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"     * @return String result of output after command is executed."},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"     * @throws DukeException If any error occurs during command execution."},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"    public abstract String execute() throws DukeException;"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":35}},{"path":"src/main/java/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.util.regex.Matcher;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"import java.util.regex.Pattern;"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"public class CommandParser {"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"\\\\W*(\\\\S+)\\\\W*(.*)\");"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"     * Parses input from String class to Command class."},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"     * @param input User string input"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"     * @return Command object with respective details."},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    public static Command parse(String input) {"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"        Matcher matcher \u003d COMMAND_FORMAT.matcher(input);"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        if (!matcher.matches()) {"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"            return new HelpCommand(true);"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"        String command \u003d matcher.group(1).trim();"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        String arguments \u003d matcher.group(2).trim();"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"            switch (command.toLowerCase()) {"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"            case ToDoCommand.COMMAND:"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"                return ToDoCommand.parseArguments(arguments);"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"            case EventCommand.COMMAND:"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"                return EventCommand.parseArguments(arguments);"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"            case DeadlineCommand.COMMAND:"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"                return DeadlineCommand.parseArguments(arguments);"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"            case ListCommand.COMMAND:"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"                return new ListCommand();"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"            case DoneCommand.COMMAND:"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"                return DoneCommand.parseArguments(arguments);"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"            case DeleteCommand.COMMAND:"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"                return DeleteCommand.parseArguments(arguments);"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"            case HelpCommand.COMMAND:"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"                return new HelpCommand(false);"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"            case ByeCommand.COMMAND:"},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":"                return new ByeCommand();"},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"            case FindCommand.COMMAND:"},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"                return FindCommand.parseArguments(arguments);"},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":"            default:"},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"                return new HelpCommand(true);"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"        } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":"            return new InvalidCommand(e.getMessage());"},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":50}},{"path":"src/main/java/DateParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalTime;"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"import java.time.format.DateTimeFormatterBuilder;"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"public class DateParser {"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    private static final String DATE_FORMAT \u003d \"[dd/MM/yyyy][dd-MM-yyyy][dd.MM.yyyy]\";"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"    private static final String TIME_FORMAT \u003d \"[HHmm][mmHH]\";"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    private static final String OUTPUT_FORMAT \u003d \"dd MMM yyyy HHmm\";"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    private static final DateTimeFormatter DATE_FORMATTER \u003d new DateTimeFormatterBuilder()"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"            .parseCaseInsensitive()"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"            .appendPattern(DATE_FORMAT)"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"            .toFormatter();"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"    private static final DateTimeFormatter TIME_FORMATTER \u003d new DateTimeFormatterBuilder()"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"            .parseCaseInsensitive()"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"            .appendPattern(TIME_FORMAT)"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"            .toFormatter();"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(OUTPUT_FORMAT);"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ Sorry, please enter a valid time format.\";"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"     * Parses input from String class to LocalDateTime class."},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"     * @param input User string input"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"     * @return LocalDateTime object."},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"    public static LocalDateTime parseDateTime(String input) throws DukeException {"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"        String[] tokenizedInput \u003d input.trim().split(\" \", 2);"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"        LocalDate date;"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"        LocalTime time;"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"            date \u003d parseDate(tokenizedInput[0].trim());"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"        } catch (DukeException e) {"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"            throw e;"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"        if (tokenizedInput.length \u003d\u003d 1) {"},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"            time \u003d LocalTime.MAX;"},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"            try {"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"                time \u003d parseTime(tokenizedInput[1].trim());"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"            } catch (DukeException e) {"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":"                throw e;"},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":"            }"},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":51,"author":{"gitId":"tanboonji"},"content":"        return LocalDateTime.of(date, time);"},{"lineNumber":52,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":54,"author":{"gitId":"tanboonji"},"content":"    public static LocalDate parseDate(String input) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"tanboonji"},"content":"            return LocalDate.parse(input, DATE_FORMATTER);"},{"lineNumber":57,"author":{"gitId":"tanboonji"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":58,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":59,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":62,"author":{"gitId":"tanboonji"},"content":"    public static LocalTime parseTime(String input) throws DukeException {"},{"lineNumber":63,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":64,"author":{"gitId":"tanboonji"},"content":"            return LocalTime.parse(input, TIME_FORMATTER);"},{"lineNumber":65,"author":{"gitId":"tanboonji"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":66,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":67,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":70,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"tanboonji"},"content":"     * Returns datetime in a standard format."},{"lineNumber":72,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"tanboonji"},"content":"     * @param dateTime LocalDateTime object to be formatted."},{"lineNumber":74,"author":{"gitId":"tanboonji"},"content":"     * @return String of datetime in standard format."},{"lineNumber":75,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"tanboonji"},"content":"    public static String toString(LocalDateTime dateTime) {"},{"lineNumber":77,"author":{"gitId":"tanboonji"},"content":"        return OUTPUT_FORMATTER.format(dateTime);"},{"lineNumber":78,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":79}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    protected LocalDateTime by;"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    public Deadline(String description, LocalDateTime by) {"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        this.by \u003d by;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + DateParser.toString(by) + \")\";"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":16}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"import java.util.regex.Matcher;"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"deadline\";"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(.*)\\\\W(?\u003d/by)/by\\\\W(.*)\");"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    private static final String ERROR_MESSAGE \u003d"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"            \"☹ Sorry, please enter a valid description and datetime for the deadline\\n\\t\" +"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"            \"Command: deadline [description] /by [deadline]\";"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    private final String description;"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    private final LocalDateTime by;"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    private DeadlineCommand(String description, LocalDateTime by) {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        this.by \u003d by;"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    public String execute() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"        Task newTask \u003d new Deadline(description, by);"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"        taskList.addTask(newTask);"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        builder.append(\"Got it. I\u0027ve added this task:\\n\\t\").append(newTask).append(\"\\nNow you have \")"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"                .append(taskList.getSize());"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"        if (taskList.getSize() \u003d\u003d 1) {"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"            builder.append(\" task\");"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"            builder.append(\" tasks\");"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"        return builder.toString();"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"    public static DeadlineCommand parseArguments(String input) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"        Matcher matcher \u003d COMMAND_FORMAT.matcher(input);"},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"        if (!matcher.matches()) {"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":"        String description \u003d matcher.group(1);"},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"        LocalDateTime by \u003d DateParser.parseDateTime(matcher.group(2));"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":51,"author":{"gitId":"tanboonji"},"content":"        return new DeadlineCommand(description, by);"},{"lineNumber":52,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":53}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"delete\";"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"    private final String HEADER \u003d \"Noted! I\u0027ve removed this task:\\n\\t\";"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ Sorry, please enter a valid task number.\" +"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"            \"\\n\\tCommand: delete [task number]\";"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    private int taskIndex;"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    private DeleteCommand(int taskIndex) {"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    public String execute() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"            Task task \u003d taskList.deleteTask(taskIndex);"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"            return HEADER + task;"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"    public static DeleteCommand parseArguments(String input) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        int taskIndex;"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"            taskIndex \u003d Integer.parseInt(input) - 1;"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"            return new DeleteCommand(taskIndex);"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":38}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class DoneCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"done\";"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"    private final String HEADER \u003d \"Nice! I\u0027ve marked this task as done:\\n\\t\";"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ Sorry, please enter a valid task number.\" +"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"            \"\\n\\tCommand: done [task number]\";"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    private final int taskIndex;"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    private DoneCommand(int taskIndex) {"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"        this.taskIndex \u003d taskIndex;"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    public String execute() throws DukeException {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"            Task task \u003d taskList.markAsDone(taskIndex);"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"            return HEADER + task;"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"    public static DoneCommand parseArguments(String input) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        int taskIndex;"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"            taskIndex \u003d Integer.parseInt(input) - 1;"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"            return new DoneCommand(taskIndex);"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":38}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    private static final String FILE_DIR \u003d \"duke.txt\";"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    private TaskList taskList;"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    private Ui ui;"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    private Storage storage;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"    private void run() {"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"        storage \u003d new Storage(FILE_DIR);"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"        ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"            taskList \u003d storage.load();"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        } catch (DukeException e) {"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"            ui.print(e.getMessage());"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        ui.greet();"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"        Scanner scanner \u003d new Scanner(System.in);"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"        boolean continueDuke \u003d true;"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        while (continueDuke) {"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"            String input \u003d scanner.nextLine().trim();"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"            continueDuke \u003d processInput(input);"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"    private boolean processInput(String input) {"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"        Command command;"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"            command \u003d CommandParser.parse(input);"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"            command.addTaskList(taskList);"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"            String result \u003d command.execute();"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"            ui.print(result);"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":"            if (command.shouldSave()) {"},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"                storage.save(taskList);"},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"            if (command.shouldExit()) {"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"                return false;"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"            ui.print(HelpCommand.ERROR_MESSAGE + HelpCommand.COMMAND_LIST);"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":"        } catch (DukeException e) {"},{"lineNumber":51,"author":{"gitId":"tanboonji"},"content":"            ui.print(e.getMessage());"},{"lineNumber":52,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":54,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":55,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":58,"author":{"gitId":"tanboonji"},"content":"        new Duke().run();"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"tanboonji":56,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public DukeException(String message) {"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"        super(message);"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":6}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"public class Event extends Task {"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    protected LocalDateTime at;"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    public Event(String description, LocalDateTime at) {"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"        super(description);"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        this.at \u003d at;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + DateParser.toString(at) + \")\";"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":16}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"import java.util.regex.Matcher;"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"import java.util.regex.Pattern;"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"public class EventCommand extends Command {"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    private static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(.*)\\\\W(?\u003d\\\\/at)\\\\/at\\\\W(.*)\");"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    private static Matcher matcher;"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"event\";"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    private String description;"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    private LocalDateTime at;"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    private EventCommand(String description, LocalDateTime at) {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        this.at \u003d at;"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    public String execute() throws DukeException {"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"        Task newTask \u003d new Event(description, at);"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"        taskList.addTask(newTask);"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        builder.append(\"Got it. I\u0027ve added this task:\\n\\t\").append(newTask).append(\"\\nNow you have \")"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"                .append(taskList.getSize());"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"        if (taskList.getSize() \u003d\u003d 1) {"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"            builder.append(\" task\");"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        } else {"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"            builder.append(\" tasks\");"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"        return builder.toString();"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"    public static EventCommand parseArguments(String input) throws DukeException {"},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"        matcher \u003d COMMAND_FORMAT.matcher(input);"},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"        if (!matcher.matches()) {"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(\"☹ Sorry, please enter a valid  and datetime for the event.\\n\\t\" +"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"                    \"Command: event [description] /at [datetime]\");"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"        String description \u003d matcher.group(1);"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":"        LocalDateTime at \u003d DateParser.parseDateTime(matcher.group(2));"},{"lineNumber":51,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":52,"author":{"gitId":"tanboonji"},"content":"        return new EventCommand(description, at);"},{"lineNumber":53,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":54}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class FindCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"find\";"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"    private final String keyword;"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ Sorry, please enter a keyword to search for.\\n\\tCommand: find [keyword]\";"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    private FindCommand(String keyword) {"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"        this.keyword \u003d keyword;"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"        return false;"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"    public String execute() {"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"        builder.append(\"Here are the matching tasks in your list:\\n\");"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"        int numbering \u003d 1;"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        for (Task task: taskList.getList()) {"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"            if (task.containsText(keyword)) {"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"                builder.append(\"\\t\").append(numbering++).append(\".\").append(task).append(\"\\n\");"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"        if (numbering \u003d\u003d 1) {"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"            builder.append(\"\\tYou currently have 0 tasks.\");"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        return builder.toString().trim();"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"    public static FindCommand parseArguments(String input) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"        if (input.trim().equals(\"\")) {"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"        return new FindCommand(input);"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":39}},{"path":"src/main/java/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class HelpCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"help\";"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"    public static final String ERROR_MESSAGE \u003d \"☹ Sorry, please enter a valid command.\\n\";"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND_LIST \u003d \"\\tCommands available:\\n\\t\\t\" +"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"            \"- list\\n\\t\\t- done [task number]\\n\\t\\t- todo [description]\\n\\t\\t\" +"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"            \"- deadline [description] /by [deadline]\\n\\t\\t- event [description] /at [datetime]\\n\\t\\t- help\\n\\t\\t\" +"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"            \"- delete [task number]\\n\\t\\t- bye\\n\\t\\t- find [keyword]\";"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    private boolean showError;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"    public HelpCommand(boolean showError) {"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"        this.showError \u003d showError;"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    public String execute() {"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"        if (showError) {"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"            return ERROR_MESSAGE + COMMAND_LIST;"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"            return COMMAND_LIST;"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":28}},{"path":"src/main/java/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class InvalidCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    String errorMessage;"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    public InvalidCommand(String errorMessage) {"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"        this.errorMessage \u003d errorMessage;"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldExit() {"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"        return false;"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        return false;"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"    public String execute() {"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        return errorMessage;"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":23}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class ListCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"list\";"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"    public ListCommand() {"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        return false;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    public String execute() {"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"        builder.append(\"Here are the tasks in your list:\\n\");"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"        int numbering \u003d 1;"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        for (Task task: taskList.getList()) {"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"            builder.append(\"\\t\").append(numbering++).append(\".\").append(task).append(\"\\n\");"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        if (numbering \u003d\u003d 1) {"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"            builder.append(\"\\tYou currently have 0 tasks.\");"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"        return builder.toString().trim();"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":26}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"public class Storage {"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"    private final String fileDir;"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    private final String LOAD_ERROR_MESSAGE \u003d"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"            \"☹ Sorry, something went wrong while I was loading saved data from file.\";"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    private final String SAVE_ERROR_MESSAGE \u003d \"☹ Sorry, something went wrong while I was saving data to file.\";"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"    public Storage(String fileDir) {"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"        this.fileDir \u003d fileDir;"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"     * Loads TaskList saved on disk."},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"     * If TaskList does not exist, initialise an empty TaskList."},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"     * @return TaskList saved on disk, if it does not exist, an empty TaskList is returned instead."},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"     * @throws DukeException If any error occurs while loading TaskList from disk."},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    public TaskList load() throws DukeException {"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"            FileInputStream fileIn \u003d new FileInputStream(fileDir);"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"            ObjectInputStream input \u003d new ObjectInputStream(fileIn);"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"            TaskList taskList \u003d (TaskList) input.readObject();"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"            input.close();"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"            fileIn.close();"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"            return taskList;"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        } catch (FileNotFoundException e) {"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"            // expected exception: file not found therefore no tasks loaded"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"            return new TaskList(new ArrayList\u003c\u003e());"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"        } catch (IOException | ClassNotFoundException e) {"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(LOAD_ERROR_MESSAGE);"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"     * Saves TaskList saved to disk."},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"     * @param taskList TaskList to be stored to disk."},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"     * @throws DukeException If any error occurs while saving TaskList to disk."},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"    public void save(TaskList taskList) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"            FileOutputStream fileOut \u003d new FileOutputStream(fileDir);"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":"            ObjectOutputStream output \u003d new ObjectOutputStream(fileOut);"},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":"            output.writeObject(taskList);"},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"            output.close();"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":"            fileOut.close();"},{"lineNumber":51,"author":{"gitId":"tanboonji"},"content":"        } catch (IOException e) {"},{"lineNumber":52,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(SAVE_ERROR_MESSAGE);"},{"lineNumber":53,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":55}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.io.Serializable;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"import java.util.Locale;"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"public class Task implements Serializable {"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"    protected String description;"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    protected boolean isDone;"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    public Task(String description) {"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"        this.description \u003d description;"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    public String getStatusIcon() {"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"        return (isDone ? \"✓\" : \" \");"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"    public Task markAsDone() {"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"        this.isDone \u003d true;"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"        return this;"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"    public boolean containsText(String keyword) {"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"        return description.toLowerCase().contains(keyword.toLowerCase());"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":31}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import java.io.Serializable;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"public class TaskList implements Serializable {"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"    private final ArrayList\u003cTask\u003e taskList;"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"        return this.taskList;"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"    public int getSize() {"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        return taskList.size();"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"    public void addTask(Task task) {"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        taskList.add(task);"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"    public Task markAsDone(int index) {"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"        Task task \u003d this.taskList.get(index);"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        return task.markAsDone();"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"    public Task deleteTask(int index) {"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        return this.taskList.remove(index);"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":32}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public ToDo(String description) {"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"        super(description);"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    public String toString() {"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":11}},{"path":"src/main/java/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class ToDoCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    public static final String COMMAND \u003d \"todo\";"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"    private final String description;"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"    private static final String ERROR_MESSAGE \u003d \"☹ Sorry, please enter a description for the todo.\\n\\t\" +"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"            \"Command: todo [description]\";"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    private ToDoCommand(String description) {"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        this.description \u003d description;"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    public String execute() throws DukeException {"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"        Task newTask \u003d new ToDo(description);"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"        taskList.addTask(newTask);"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"        builder.append(\"Got it. I\u0027ve added this task:\\n\\t\").append(newTask).append(\"\\nNow you have \")"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"                .append(taskList.getSize());"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"        if (taskList.getSize() \u003d\u003d 1) {"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"            builder.append(\" task\");"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"            builder.append(\" tasks\");"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"        return builder.toString();"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"    public boolean shouldSave() {"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        return true;"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"    public static ToDoCommand parseArguments(String input) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"        if (input.trim().equals(\"\")) {"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"            throw new DukeException(ERROR_MESSAGE);"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"        return new ToDoCommand(input);"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":39}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"public class Ui {"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"    private final String DUKE_LOGO \u003d \" ____        _\\n\""},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"            + \"|  _ \\\\ _   _| | _ ___\\n\""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    private final String WELCOME_MESSAGE \u003d \"Hello! I\u0027m Duke.\\nWhat can I do for you today?\";"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    private final String EXIT_MESSAGE \u003d \"Bye. Hope to see you again soon!\";"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    private final String REPLY_TOP_OUTLINE \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"    private final String REPLY_BOTTOM_OUTLINE \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\\n\";"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    public Ui() {"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"    public void greet() {"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        System.out.println(DUKE_LOGO);"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"        echo(WELCOME_MESSAGE);"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    public void print(String output) {"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"        echo(output);"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"    private void echo(String output) {"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        System.out.println(REPLY_TOP_OUTLINE);"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"        System.out.println(output);"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"        System.out.println(REPLY_BOTTOM_OUTLINE);"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":30}},{"path":"src/test/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"class CommandParserTest {"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"    void parse_toDoCommand_success() {"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"todo read book\", \" todo  read another book\", \"todo  more books \"};"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(ToDoCommand.class));"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"    void parse_eventCommand_success() {"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"event book reading /at 01-02-2021 0000\", \" event  book reading /at 01/02/2021\","},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"                \"event  book reading /at 01.02.2021 2359 \"};"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(EventCommand.class));"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"    void parse_listCommand_success() {"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"list\", \" list  all\", \"list  everything \"};"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(ListCommand.class));"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"    void parse_doneCommand_success() {"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"done 0\", \" done  1\", \"done  2 \"};"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(DoneCommand.class));"},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"    void parse_errorHelpCommand_success() {"},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"blah\", \"  unknown\", \"invalid  \"};"},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(HelpCommand.class));"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":49,"author":{"gitId":"tanboonji"},"content":"    void parse_invalidToDoCommand_DukeException() {"},{"lineNumber":50,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"todo\", \"  todo\", \"todo  \"};"},{"lineNumber":51,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":52,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(InvalidCommand.class));"},{"lineNumber":53,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":56,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"tanboonji"},"content":"    void parse_invalidEventCommand_DukeException() {"},{"lineNumber":58,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"event\", \" event  book reading\", \"event  book reading /by 01.01.2021 0000 \"};"},{"lineNumber":59,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":60,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(InvalidCommand.class));"},{"lineNumber":61,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":64,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":65,"author":{"gitId":"tanboonji"},"content":"    void parse_invalidDoneCommand_DukeException() {"},{"lineNumber":66,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"done\", \" done  one\", \"done  two \"};"},{"lineNumber":67,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":68,"author":{"gitId":"tanboonji"},"content":"            assertTrue(CommandParser.parse(input).getClass().isAssignableFrom(InvalidCommand.class));"},{"lineNumber":69,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":71}},{"path":"src/test/DateParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"class DateParserTest {"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"    void parseDateTime_validDateTime_success() {"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"01/01/2021\", \" 01/01/2021  0000\", \"01/01/2021  0000 \","},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"                \"01.01.2021\", \" 01.01.2021  0000\", \"01.01.2021  0000 \","},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"                \"01-01-2021\", \" 01-01-2021  0000\", \"01-01-2021  0000 \"};"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"            try {"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"                DateParser.parseDateTime(input);"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"            } catch (Exception e) {"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"                fail();"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"            };"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"    void testToString_validDateTime_success() {"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"        LocalDateTime dateTime \u003d LocalDateTime.now();"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"            DateParser.toString(dateTime);"},{"lineNumber":28,"author":{"gitId":"tanboonji"},"content":"        } catch (Exception e) {"},{"lineNumber":29,"author":{"gitId":"tanboonji"},"content":"            fail();"},{"lineNumber":30,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"tanboonji"},"content":""},{"lineNumber":33,"author":{"gitId":"tanboonji"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"tanboonji"},"content":"    void parseDateTime_invalidDateTime_exceptionThrown() {"},{"lineNumber":35,"author":{"gitId":"tanboonji"},"content":"        String[] inputs \u003d {\"01/13/2021\", \" 01/01/  0000\", \"/01/2021  0000 \","},{"lineNumber":36,"author":{"gitId":"tanboonji"},"content":"                \"01..2021\", \" 01.01.2021  -0000\", \"01.01.2021  2500 \","},{"lineNumber":37,"author":{"gitId":"tanboonji"},"content":"                \"01-01-20211\", \" 101-01-2021  0000\", \"01-101-2021  0000 \","},{"lineNumber":38,"author":{"gitId":"tanboonji"},"content":"                \"01012021\"};"},{"lineNumber":39,"author":{"gitId":"tanboonji"},"content":"        for (String input: inputs) {"},{"lineNumber":40,"author":{"gitId":"tanboonji"},"content":"            try {"},{"lineNumber":41,"author":{"gitId":"tanboonji"},"content":"                DateParser.parseDateTime(input);"},{"lineNumber":42,"author":{"gitId":"tanboonji"},"content":"                fail();"},{"lineNumber":43,"author":{"gitId":"tanboonji"},"content":"            } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"tanboonji"},"content":"                // pass test case, no action required"},{"lineNumber":45,"author":{"gitId":"tanboonji"},"content":"            };"},{"lineNumber":46,"author":{"gitId":"tanboonji"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"tanboonji"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"tanboonji"},"content":"}"}],"authorContributionMap":{"tanboonji":48}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"tanboonji"},"content":"list"},{"lineNumber":2,"author":{"gitId":"tanboonji"},"content":"todo borrow book"},{"lineNumber":3,"author":{"gitId":"tanboonji"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"tanboonji"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"tanboonji"},"content":"list"},{"lineNumber":6,"author":{"gitId":"tanboonji"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"tanboonji"},"content":"done 2"},{"lineNumber":8,"author":{"gitId":"tanboonji"},"content":"done 3"},{"lineNumber":9,"author":{"gitId":"tanboonji"},"content":"list"},{"lineNumber":10,"author":{"gitId":"tanboonji"},"content":"blah"},{"lineNumber":11,"author":{"gitId":"tanboonji"},"content":"done"},{"lineNumber":12,"author":{"gitId":"tanboonji"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"tanboonji"},"content":"deadline"},{"lineNumber":14,"author":{"gitId":"tanboonji"},"content":"deadline return book"},{"lineNumber":15,"author":{"gitId":"tanboonji"},"content":"deadline return book /by"},{"lineNumber":16,"author":{"gitId":"tanboonji"},"content":"event"},{"lineNumber":17,"author":{"gitId":"tanboonji"},"content":"event project meeting"},{"lineNumber":18,"author":{"gitId":"tanboonji"},"content":"event project meeting /at"},{"lineNumber":19,"author":{"gitId":"tanboonji"},"content":"list"},{"lineNumber":20,"author":{"gitId":"tanboonji"},"content":"delete 1"},{"lineNumber":21,"author":{"gitId":"tanboonji"},"content":"delete 1"},{"lineNumber":22,"author":{"gitId":"tanboonji"},"content":"list"},{"lineNumber":23,"author":{"gitId":"tanboonji"},"content":"delete 1"},{"lineNumber":24,"author":{"gitId":"tanboonji"},"content":"delete"},{"lineNumber":25,"author":{"gitId":"tanboonji"},"content":"delete 1"},{"lineNumber":26,"author":{"gitId":"tanboonji"},"content":"list"},{"lineNumber":27,"author":{"gitId":"tanboonji"},"content":"bye"}],"authorContributionMap":{"tanboonji":27}}]
