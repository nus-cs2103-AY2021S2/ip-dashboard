[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"    archiveBaseName \u003d \"marvin\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"    enableAssertions \u003d true;"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuheem":18,"-":44}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"T/1/buy milk"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":"E/0/birthday party/2021-02-20"},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"D/0/finish project/2021-02-10 1400"}],"authorContributionMap":{"yuheem":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"#  Marvin User Guide"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"By: `yuheem`"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"Marvin is a personal task assistant."},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"It\u0027s great for managing and tracking tasks using an interface that supports fast typists."},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"* [Quick start](#quick-start)"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"* [Features](#features)"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"    * [Add a todo](#add-a-todo)"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    * [Add an event](#add-an-event)"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    * [Add a deadline](#add-a-deadline)"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    * [Mark a task as done](#mark-a-task-as-done)"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    * [Delete a task](#delete-a-task)"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    * [List all tasks](#list-all-tasks)"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    * [Find tasks](#find-tasks)"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    * [Bye](#bye)"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"## Quick start"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"1. Ensure you have Java 11 or above installed in your Computer."},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"2. Download the latest marvin.jar from [here](https://github.com/yuheem/ip/releases)."},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"3. Copy the file to the folder you want to use as the home folder."},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"4. Double-click the file to start the app. The GUI that appears should look similar to what\u0027s shown below."},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"![Ui](Ui.png)"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"### Add a `todo`"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"Adds a todo to Marvin. "},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"Format: "},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"`todo description`"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"Examples: "},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"`todo buy milk`"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"`todo wipe table`"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"### Add an `event`"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"Adds an event to Marvin."},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"Format:"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"`event description /at yyyy-MM-dd`"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"Examples:"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"`event birthday party /at 2020-12-12`"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"### Add a `deadline`"},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"Adds a deadline to Marvin."},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"Format:"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"`deadline description /by yyyy-MM-dd HHmm`"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"Examples:"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"`deadline finish tutorial /by 2020-12-12 1400`"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":"### Mark a task as `done`"},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"Asks Marvin to mark a task as done."},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"Format:"},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":"`done index`"},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"Examples:"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":"`done 1`"},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"`done 3`"},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"### `delete` a task"},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"Delete a task from Marvin."},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":"Format:"},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"`delete index`"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":80,"author":{"gitId":"yuheem"},"content":"Examples:"},{"lineNumber":81,"author":{"gitId":"yuheem"},"content":"`delete 1`"},{"lineNumber":82,"author":{"gitId":"yuheem"},"content":"`delete 3`"},{"lineNumber":83,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":84,"author":{"gitId":"yuheem"},"content":"### `list` all tasks"},{"lineNumber":85,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":86,"author":{"gitId":"yuheem"},"content":"List all the tasks in Marvin."},{"lineNumber":87,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":88,"author":{"gitId":"yuheem"},"content":"Example: "},{"lineNumber":89,"author":{"gitId":"yuheem"},"content":"`list`"},{"lineNumber":90,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":91,"author":{"gitId":"yuheem"},"content":"### `find` tasks"},{"lineNumber":92,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":93,"author":{"gitId":"yuheem"},"content":"Find tasks in Marvin which match keywords."},{"lineNumber":94,"author":{"gitId":"-"},"content":""},{"lineNumber":95,"author":{"gitId":"yuheem"},"content":"Format:"},{"lineNumber":96,"author":{"gitId":"yuheem"},"content":"`find keywords`"},{"lineNumber":97,"author":{"gitId":"-"},"content":""},{"lineNumber":98,"author":{"gitId":"yuheem"},"content":"Examples:"},{"lineNumber":99,"author":{"gitId":"yuheem"},"content":"`find milk`"},{"lineNumber":100,"author":{"gitId":"yuheem"},"content":"`find table`"},{"lineNumber":101,"author":{"gitId":"-"},"content":""},{"lineNumber":102,"author":{"gitId":"yuheem"},"content":"### `bye`"},{"lineNumber":103,"author":{"gitId":"-"},"content":""},{"lineNumber":104,"author":{"gitId":"yuheem"},"content":"Exits Marvin."},{"lineNumber":105,"author":{"gitId":"-"},"content":""},{"lineNumber":106,"author":{"gitId":"yuheem"},"content":"## Credits"},{"lineNumber":107,"author":{"gitId":"-"},"content":""},{"lineNumber":108,"author":{"gitId":"yuheem"},"content":"* User guide adapted from [AB3 User Guide](https://se-education.org/addressbook-level3/UserGuide.html#quick-start)"},{"lineNumber":109,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"yuheem":99,"-":10}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"    public static DialogBox getMarvinDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":59}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":" * Entry point to launch the application."},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.Marvin;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":" * A GUI for Duke using FXML."},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    private Marvin marvin \u003d new Marvin();"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"        assert marvin !\u003d null;"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"            stage.setTitle(\"Marvin\");"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setMarvin(marvin);"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"            stage.show();"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":32}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.Marvin;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    private Marvin duke;"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"    private Image marvinImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaMarvin.png\"));"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"    public void setMarvin(Marvin d) {"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"        showGreeting();"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"    private void showGreeting() {"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"                DialogBox.getMarvinDialog(Messages.MESSAGE_WELCOME, marvinImage)"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"        );"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"    private void handleUserInput() {"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"                DialogBox.getMarvinDialog(response, marvinImage)"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"        );"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"        userInput.clear();"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":59}},{"path":"src/main/java/marvin/Marvin.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.commands.Command;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.parser.Parser;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":" * Represents the Duke CLI personal task assistant."},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"public class Marvin {"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    private TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"     * Constructor. Starts an instance of Duke."},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    public Marvin() {"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"            storage \u003d new Storage();"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"            tasks \u003d storage.load();"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"        } catch (DukeException e) {"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     * Returns a response to be displayed to"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"     * the user based on input from the user."},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"     * @param input The user input."},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"     * @return Response to be displayed to user."},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    public String getResponse(String input) {"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"            Command command \u003d Parser.parseCommand(input);"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"            String response \u003d command.execute(tasks, storage);"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"            return response;"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"        } catch (DukeException e) {"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"            return \"Oops \" + e.getMessage();"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuheem":46,"-":2}},{"path":"src/main/java/marvin/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":" * Represents a user command which can be executed."},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"public abstract class Command {"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"    protected boolean isExit;"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"     * Constructor."},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"     * Default exit status of program is false."},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    public Command() {"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"        this.isExit \u003d false;"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"     * Returns the exit status of the program."},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"     * @return Exit status of program."},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    public boolean isExit() {"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"        return isExit;"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    public abstract String execute(TaskList tasks, Storage storage) throws DukeException;"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":37}},{"path":"src/main/java/marvin/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.Deadline;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.task.Task;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":" * Represents a user command which adds a deadline to the task list."},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"public class DeadlineCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    private String description;"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    private String dateTime;"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the description of a deadline and"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"     * the date and time it is due by."},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the deadline."},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"     * @param dateTime The date and time the description is due by."},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    public DeadlineCommand(String description, String dateTime) {"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"        super();"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"        this.description \u003d description;"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"        this.dateTime \u003d dateTime;"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"        assert dateTime !\u003d null;"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"        Task newTask \u003d new Deadline(description, dateTime);"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"        tasks.add(newTask);"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        storage.save(tasks);"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"        return Messages.getAddTaskMessage(newTask, tasks.size());"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":49}},{"path":"src/main/java/marvin/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.Task;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":" * Represents a user command to delete tasks in the task list."},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    private int index;"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the index of the task to be deleted from the task list."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     * @param index The 0-based index of the task to be deleted."},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"    public DeleteCommand(int index) {"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"        super();"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"        this.index \u003d index;"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"        Task deletedTask \u003d tasks.remove(index);"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"        storage.save(tasks);"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"        return Messages.getDeleteTaskMessage(deletedTask, tasks.size());"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":41}},{"path":"src/main/java/marvin/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.Task;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":" * Represents a user command to mark a task as done in the task list."},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"public class DoneCommand extends Command {"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"done\";"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    private int index;"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the index of the task to be marked as done in the task list."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     * @param index The 0-based index of the task to be marked as done."},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"    public DoneCommand(int index) {"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"        super();"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"        this.index \u003d index;"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"        Task doneTask \u003d tasks.get(index);"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"        doneTask.setDone(true);"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"        storage.save(tasks);"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        return Messages.getDoneTaskMessage(doneTask);"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":42}},{"path":"src/main/java/marvin/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.Event;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.task.Task;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":" * Represents a user command which adds an event to the task list."},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"public class EventCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"event\";"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    private String description;"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    private String date;"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the description of an event and the date which it occurs at."},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the event."},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"     * @param date The date which the event occurs at."},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    public EventCommand(String description, String date) {"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"        this.description \u003d description;"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"        this.date \u003d date;"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        assert date !\u003d null;"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"        Task newTask \u003d new Event(description, date);"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"        tasks.add(newTask);"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"        storage.save(tasks);"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"        return Messages.getAddTaskMessage(newTask, tasks.size());"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":47}},{"path":"src/main/java/marvin/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":" * Represents a user command which terminates the program."},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"public class ExitCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    /*"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"     * Constructor. By default, exit status is true."},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    public ExitCommand() {"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"        this.isExit \u003d true;"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"        storage.save(tasks);"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        return Messages.MESSAGE_EXIT;"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":36}},{"path":"src/main/java/marvin/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":" * Represent a user command to find tasks in the task list that match keywords."},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"public class FindCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    private String keywords;"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the keywords to match."},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"     * @param keywords The keywords to match."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    public FindCommand(String keywords) {"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"        super();"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"        return Messages.getFindTaskMessage(tasks.filter(keywords));"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":38}},{"path":"src/main/java/marvin/commands/IncorrectCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":" * Represents an incorrect user command. It will produce a feedback message to the user."},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"public class IncorrectCommand extends Command {"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"    private String message;"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the feedback message to the user."},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"     * @param message The feedback message to the user."},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    public IncorrectCommand(String message) {"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"        super();"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"        this.message \u003d message;"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) {"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"        assert message !\u003d null;"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        return message;"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":36}},{"path":"src/main/java/marvin/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":" * Represents a user command to list all tasks in the task list."},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"public class ListCommand extends Command {"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"     * Constructor."},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    public ListCommand() {"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"        super();"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"        return Messages.getListTaskMessage(tasks);"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":35}},{"path":"src/main/java/marvin/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.commands;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import marvin.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.Task;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.task.Todo;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":" * Represents a user command which adds a to-do to the task list."},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"public class TodoCommand extends Command {"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    private String description;"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the description of a to-do."},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the to-do."},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    public TodoCommand(String description) {"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * Executes the user command and returns a response message"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     * @param tasks The state of the current task list."},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * @param storage The storage used by the program."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @return Response message."},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"        assert storage !\u003d null;"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"        Task newTask \u003d new Todo(description);"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"        tasks.add(newTask);"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        storage.save(tasks);"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"        return Messages.getAddTaskMessage(newTask, tasks.size());"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":43}},{"path":"src/main/java/marvin/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.exception;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":" * The DukeException class is a wrapper for checked exceptions"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":" * encountered when an instance of Duke is running."},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the message to be shown to the user."},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"     * @param message The message to be shown to the user."},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    public DukeException(String message) {"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"        super(message);"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":15}},{"path":"src/main/java/marvin/message/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.message;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import marvin.task.Task;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":" * Container for user visible messages;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"public class Messages {"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"    public static final String MESSAGE_WELCOME \u003d \"Hello! I\u0027m Marvin what can I do for you today?\\n\";"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"    public static final String MESSAGE_EXIT \u003d \"Bye bye!!!\\n\";"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n\";"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    public static final String MESSAGE_INVALID_ENCODED_FORMAT \u003d \"Task encoded in invalid format\";"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    public static final String MESSAGE_INVALID_ENCODED_TODO_FORMAT \u003d \"Todo encoded in invalid format\";"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    public static final String MESSAGE_INVALID_ENCODED_DEADLINE_FORMAT \u003d \"Deadline encoded in invalid format\";"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    public static final String MESSAGE_INVALID_ENCODED_EVENT_FORMAT \u003d \"Event encoded in invalid format\";"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    private static final String MESSAGE_ADD_TASK \u003d"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"            \"Got it I\u0027ve added this task:\\n\" + \"%s\\n\" + \"You now have %d tasks in the list\\n\";"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    private static final String MESSAGE_DELETE_TASK \u003d"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"            \"Noted I\u0027ve removed this task:\\n\" + \"%s\\n\" + \"You now have %d tasks in the list\\n\";"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    private static final String MESSAGE_DONE_TASK \u003d \"Nice! I\u0027ve marked this task as done:\\n\" + \"%s\";"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    private static final String MESSAGE_NO_TASKS \u003d \"You currently have no tasks added!\\n\";"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    private static final String MESSAGE_LIST_TASKS \u003d \"Here is a list of all your tasks:\\n\" + \"%s\";"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    private static final String MESSAGE_UNABLE_TO_FIND_TASKS \u003d \"No found tasks matching your query.\\n\";"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    private static final String MESSAGE_FIND_TASKS \u003d \"Here are the matching tasks in your list:\\n\" + \"%s\";"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * Returns the message to be shown to the user when a task has been added to the task list."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @param task The task added to the task list."},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * @param numberOfTasks The updated number of tasks in the task list."},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     * @return Message to be shown to user."},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"    public static String getAddTaskMessage(Task task, int numberOfTasks) {"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        return String.format(MESSAGE_ADD_TASK, task, numberOfTasks);"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"     * Returns the message to be shown to the user when a task has been deleted from the task list."},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"     * @param task The task deleted from the task list."},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"     * @param numberOfTasks The updated number of tasks in the task list."},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"     * @return Message to be shown to user."},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"    public static String getDeleteTaskMessage(Task task, int numberOfTasks) {"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"        return String.format(MESSAGE_DELETE_TASK, task, numberOfTasks);"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"     * Returns the message to be shown to the user when a task has been marked done in the task list."},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"     * @param task The task marked done."},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"     * @return Message to be shown to user."},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"    public static String getDoneTaskMessage(Task task) {"},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"        return String.format(MESSAGE_DONE_TASK, task);"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"     * Returns the message to be shown to the user when a request to list all tasks in the task list is made."},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"     * If no task are in the task list, the appropriate message is also shown to the user."},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"     * @param tasks The task list."},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"     * @return Message to be shown."},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":"    public static String getListTaskMessage(TaskList tasks) {"},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"        int numberOfTasks \u003d tasks.size();"},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"        if (numberOfTasks \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":"            return MESSAGE_NO_TASKS;"},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":"        return String.format(MESSAGE_LIST_TASKS, tasks);"},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"     * Returns the message to be shown to to the user when a request to find tasks in the task list is made."},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"     * If no matching tasks are found in the task list, the appropriate message is also shown to the user."},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":"     * @param foundTasks The matching tasks found in the task list."},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"     * @return Message to be shown."},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":"    public static String getFindTaskMessage(TaskList foundTasks) {"},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"        int numberOfFoundTasks \u003d foundTasks.size();"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":"        if (numberOfFoundTasks \u003d\u003d 0) {"},{"lineNumber":80,"author":{"gitId":"yuheem"},"content":"            return MESSAGE_UNABLE_TO_FIND_TASKS;"},{"lineNumber":81,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":83,"author":{"gitId":"yuheem"},"content":"        return String.format(MESSAGE_FIND_TASKS, foundTasks);"},{"lineNumber":84,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":85}},{"path":"src/main/java/marvin/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.parser;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.util.regex.Matcher;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.util.regex.Pattern;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.commands.Command;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.commands.DeadlineCommand;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.commands.DeleteCommand;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"import marvin.commands.DoneCommand;"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"import marvin.commands.EventCommand;"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"import marvin.commands.ExitCommand;"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"import marvin.commands.FindCommand;"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"import marvin.commands.IncorrectCommand;"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"import marvin.commands.ListCommand;"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"import marvin.commands.TodoCommand;"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":" * Parses user input into an executable command."},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"public class Parser {"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    public static final Pattern COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    public static final Pattern TODO_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+)\");"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    public static final Pattern DEADLINE_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+) /by (?\u003cdate\u003e[^/]+)\");"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    public static final Pattern EVENT_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cdescription\u003e[^/]+) /at (?\u003cdateTime\u003e[^/]+)\");"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"    public static final Pattern INDEX_ARGS_FORMAT \u003d Pattern.compile(\"(?\u003cindex\u003e.+)\");"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    public static final Pattern KEYWORDS_ARGS_FORMAT \u003d"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"            Pattern.compile(\"(?\u003ckeywords\u003e\\\\S+(?:\\\\s+\\\\S+)*)\"); // one or more keywords separated by whitespace"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"     * Parses user input into an executable command."},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"     * @param userInput The raw string user input."},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"     * @return The corresponding executable command."},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if user input is not in an appropriate format."},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"    public static Command parseCommand(String userInput) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"            return new IncorrectCommand(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        switch (commandWord) {"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"        case TodoCommand.COMMAND_WORD:"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"            return prepareTodo(arguments);"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"        case DeadlineCommand.COMMAND_WORD:"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"            return prepareDeadline(arguments);"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"        case EventCommand.COMMAND_WORD:"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"            return prepareEvent(arguments);"},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"            return new ExitCommand();"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"            return new ListCommand();"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"        case DoneCommand.COMMAND_WORD:"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"            return prepareDone(arguments);"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"        case DeleteCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"            return prepareDelete(arguments);"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":"            return prepareFind(arguments);"},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"        default:"},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":"     * Parses arguments in the context of the to-do command."},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"     * @param arguments The raw string arguments of the to-do command."},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"     * @return The prepared to-do command."},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":"    private static Command prepareTodo(String arguments) {"},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d TODO_ARGS_FORMAT.matcher(arguments.trim());"},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":"            return new IncorrectCommand(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":"        return new TodoCommand(matcher.group(\"description\"));"},{"lineNumber":80,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":82,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"yuheem"},"content":"     * Parses the arguments in the context of the deadline command."},{"lineNumber":84,"author":{"gitId":"yuheem"},"content":"     * @param arguments The raw string arguments of the deadline command."},{"lineNumber":85,"author":{"gitId":"yuheem"},"content":"     * @return The prepared deadline command."},{"lineNumber":86,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"yuheem"},"content":"    private static Command prepareDeadline(String arguments) {"},{"lineNumber":88,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d DEADLINE_ARGS_FORMAT.matcher(arguments.trim());"},{"lineNumber":89,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":90,"author":{"gitId":"yuheem"},"content":"            return new IncorrectCommand(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":91,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":93,"author":{"gitId":"yuheem"},"content":"        final String description \u003d matcher.group(\"description\");"},{"lineNumber":94,"author":{"gitId":"yuheem"},"content":"        final String date \u003d matcher.group(\"date\");"},{"lineNumber":95,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":96,"author":{"gitId":"yuheem"},"content":"        return new DeadlineCommand(description, date);"},{"lineNumber":97,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":99,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"yuheem"},"content":"     * Parses arguments in the context of the event command."},{"lineNumber":101,"author":{"gitId":"yuheem"},"content":"     * @param arguments The raw string arguments of the event command."},{"lineNumber":102,"author":{"gitId":"yuheem"},"content":"     * @return The prepared event command."},{"lineNumber":103,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"yuheem"},"content":"    private static Command prepareEvent(String arguments) {"},{"lineNumber":105,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d EVENT_ARGS_FORMAT.matcher(arguments.trim());"},{"lineNumber":106,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":107,"author":{"gitId":"yuheem"},"content":"            return new IncorrectCommand(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":109,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":110,"author":{"gitId":"yuheem"},"content":"        final String description \u003d matcher.group(\"description\");"},{"lineNumber":111,"author":{"gitId":"yuheem"},"content":"        final String dateTime \u003d matcher.group(\"dateTime\");"},{"lineNumber":112,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":113,"author":{"gitId":"yuheem"},"content":"        return new EventCommand(description, dateTime);"},{"lineNumber":114,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":116,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":117,"author":{"gitId":"yuheem"},"content":"     * Parses the given raw string arguments as an index integer."},{"lineNumber":118,"author":{"gitId":"yuheem"},"content":"     * @param arguments The raw string arguments."},{"lineNumber":119,"author":{"gitId":"yuheem"},"content":"     * @return The index integer"},{"lineNumber":120,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if the raw string arguments cannot be found."},{"lineNumber":121,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"yuheem"},"content":"    private static int parseArgsAsIndex(String arguments) throws DukeException {"},{"lineNumber":123,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d INDEX_ARGS_FORMAT.matcher(arguments.trim());"},{"lineNumber":124,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":125,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(\"Could not find index number to parse\");"},{"lineNumber":126,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"yuheem"},"content":"        return Integer.parseInt(matcher.group(\"index\")) - 1;"},{"lineNumber":128,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":129,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":130,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":131,"author":{"gitId":"yuheem"},"content":"     * Parses the arguments in the context of the done command."},{"lineNumber":132,"author":{"gitId":"yuheem"},"content":"     * @param arguments The raw string arguments of the done command."},{"lineNumber":133,"author":{"gitId":"yuheem"},"content":"     * @return The prepared done command."},{"lineNumber":134,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":135,"author":{"gitId":"yuheem"},"content":"    private static Command prepareDone(String arguments) {"},{"lineNumber":136,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":137,"author":{"gitId":"yuheem"},"content":"            int index \u003d parseArgsAsIndex(arguments);"},{"lineNumber":138,"author":{"gitId":"yuheem"},"content":"            return new DoneCommand(index);"},{"lineNumber":139,"author":{"gitId":"yuheem"},"content":"        } catch (DukeException e) {"},{"lineNumber":140,"author":{"gitId":"yuheem"},"content":"            return new IncorrectCommand(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":141,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":144,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":145,"author":{"gitId":"yuheem"},"content":"     * Parses the arguments in the context of the delete command."},{"lineNumber":146,"author":{"gitId":"yuheem"},"content":"     * @param arguments The raw string arguments of delete the command."},{"lineNumber":147,"author":{"gitId":"yuheem"},"content":"     * @return The prepared delete command."},{"lineNumber":148,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":149,"author":{"gitId":"yuheem"},"content":"    private static Command prepareDelete(String arguments) {"},{"lineNumber":150,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":151,"author":{"gitId":"yuheem"},"content":"            int index \u003d parseArgsAsIndex(arguments);"},{"lineNumber":152,"author":{"gitId":"yuheem"},"content":"            return new DeleteCommand(index);"},{"lineNumber":153,"author":{"gitId":"yuheem"},"content":"        } catch (DukeException e) {"},{"lineNumber":154,"author":{"gitId":"yuheem"},"content":"            return new IncorrectCommand(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":155,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":158,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":159,"author":{"gitId":"yuheem"},"content":"     * Parses the arguments in the context of the find command."},{"lineNumber":160,"author":{"gitId":"yuheem"},"content":"     * @param arguments The raw string arguments of the find command."},{"lineNumber":161,"author":{"gitId":"yuheem"},"content":"     * @return The prepared find command."},{"lineNumber":162,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"yuheem"},"content":"    private static Command prepareFind(String arguments) {"},{"lineNumber":164,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d KEYWORDS_ARGS_FORMAT.matcher(arguments.trim());"},{"lineNumber":165,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":166,"author":{"gitId":"yuheem"},"content":"            return new IncorrectCommand(Messages.MESSAGE_INVALID_COMMAND_FORMAT);"},{"lineNumber":167,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":169,"author":{"gitId":"yuheem"},"content":"        return new FindCommand(matcher.group(\"keywords\"));"},{"lineNumber":170,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":171}},{"path":"src/main/java/marvin/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.storage;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import java.nio.file.Files;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import java.nio.file.Path;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":" * The Storage class manages loading tasks from a file"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":" * when a new instance of Duke is created and saving tasks"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":" * to a file when a running instance of Duke is closed."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":" *"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":" * Credits to AB Level 2:"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":" * https://github.com/se-edu/addressbook-level2/blob/master/src/seedu/addressbook/storage/StorageFile.java"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"public class Storage {"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"data/tasks.txt\";"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    public final Path path;"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     * Constructor. Uses the default storage filepath."},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if invalid file path."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"    public Storage() throws DukeException {"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"        this(DEFAULT_STORAGE_FILEPATH);"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the path of the file."},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"     * @param filePath The path of the file."},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"    public Storage(String filePath) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"        path \u003d Paths.get(filePath);"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        if (!isValidPath(path)) {"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(\"Storage file should end with \u0027.txt\u0027\");"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"    private static boolean isValidPath(Path filePath) {"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        return filePath.toString().endsWith(\".txt\");"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"     * Saves the task list to storage."},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"     * @param tasks The task list."},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if cannot write to file."},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"    public void save(TaskList tasks) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"            List\u003cString\u003e encodedTasks \u003d TaskListEncoder.encodeTaskList(tasks);"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"            Files.write(path, encodedTasks);"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"        } catch (IOException ioe) {"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(\"Error writing to file: \" + path);"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"     * Loads the task list from storage."},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":"     * @return The task list."},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if cannot read from file."},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":"    public TaskList load() throws DukeException {"},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"        try {"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":"            if (!Files.exists(path) || !Files.isRegularFile(path)) {"},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"                Files.createDirectory(path.getParent());"},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"                Files.createFile(path);"},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"                return new TaskList();"},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"            return TaskListDecoder.decodeTaskList(Files.readAllLines(path));"},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":"        } catch (FileNotFoundException fnfe) {"},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":"            throw new AssertionError(\"A non-existent file scenario is already handled earlier.\");"},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"        } catch (IOException ioe) {"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(\"Error writing to file: \" + path);"},{"lineNumber":80,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":82}},{"path":"src/main/java/marvin/storage/TaskListDecoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.storage;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"import marvin.message.Messages;"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"import marvin.task.Deadline;"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"import marvin.task.Event;"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"import marvin.task.Task;"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"import marvin.task.Todo;"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":" * Decodes a storage data file into a {@code TaskList} object."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"public class TaskListDecoder {"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"    private static final Pattern ENCODED_TASK_FORMAT \u003d"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"            Pattern.compile(\"(?\u003cencodedTaskType\u003e[A-Z]{1})/(?\u003cencodedTaskData\u003e.*)\");"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    private static final Pattern ENCODED_TODO_DATA_FORMAT \u003d"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"            Pattern.compile(\"(?\u003cstatus\u003e[0-1]{1})/(?\u003cdescription\u003e[^/]+)\");"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    private static final Pattern ENCODED_DEADLINE_DATA_FORMAT \u003d"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"            Pattern.compile(\"(?\u003cstatus\u003e[0-1]{1})/(?\u003cdescription\u003e[^/]+)/(?\u003cdateTime\u003e[^/]+)\");"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    private static final Pattern ENCODED_EVENT_DATA_FORMAT \u003d"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"            Pattern.compile(\"(?\u003cstatus\u003e[0-1]{1})/(?\u003cdescription\u003e[^/]+)/(?\u003cdate\u003e[^/]+)\");"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    private static final String DONE_STATUS \u003d \"1\";"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     * Decodes {@code encodedTaskList} into a {@code TaskList} containing decoded tasks."},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"     * @param encodedTaskList The encoded task list."},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"     * @return The decoded task list."},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error while decoding the encoded task list."},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    public static TaskList decodeTaskList(List\u003cString\u003e encodedTaskList) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"        List\u003cTask\u003e decodedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"        for (String encodedTask : encodedTaskList) {"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"            decodedTasks.add(decodeTaskFromString(encodedTask));"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"        return new TaskList(decodedTasks);"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"    private static Task decodeTaskFromString(String encodedTask) throws DukeException {"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d ENCODED_TASK_FORMAT.matcher(encodedTask.trim());"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(String.format(encodedTask, Messages.MESSAGE_INVALID_ENCODED_FORMAT));"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"        String encodedTaskType \u003d matcher.group(\"encodedTaskType\");"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"        String encodedTaskData \u003d matcher.group(\"encodedTaskData\");"},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"        Task decodedTask \u003d null;"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"        switch(encodedTaskType) {"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"        case(Todo.ENCODED_TYPE):"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"            decodedTask \u003d decodeTodo(encodedTaskData);"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"            break;"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"        case(Deadline.ENCODED_TYPE):"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"            decodedTask \u003d decodeDeadline(encodedTaskData);"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"            break;"},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":"        case(Event.ENCODED_TYPE):"},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"            decodedTask \u003d decodeEvent(encodedTaskData);"},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"            break;"},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":"        default:"},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":"        return decodedTask;"},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"    private static boolean decodeStatus(String status) {"},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"        return status.equals(DONE_STATUS);"},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"    private static Todo decodeTodo(String encodedTodoData) throws DukeException {"},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d ENCODED_TODO_DATA_FORMAT.matcher(encodedTodoData.trim());"},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(String.format(encodedTodoData, Messages.MESSAGE_INVALID_ENCODED_TODO_FORMAT));"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":81,"author":{"gitId":"yuheem"},"content":"        String status \u003d matcher.group(\"status\");"},{"lineNumber":82,"author":{"gitId":"yuheem"},"content":"        String description \u003d matcher.group(\"description\");"},{"lineNumber":83,"author":{"gitId":"yuheem"},"content":"        return new Todo(decodeStatus(status), description);"},{"lineNumber":84,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":86,"author":{"gitId":"yuheem"},"content":"    private static Deadline decodeDeadline(String encodedDeadlineData) throws DukeException {"},{"lineNumber":87,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d ENCODED_DEADLINE_DATA_FORMAT.matcher(encodedDeadlineData.trim());"},{"lineNumber":88,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":89,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(String.format(encodedDeadlineData,"},{"lineNumber":90,"author":{"gitId":"yuheem"},"content":"                    Messages.MESSAGE_INVALID_ENCODED_DEADLINE_FORMAT));"},{"lineNumber":91,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":93,"author":{"gitId":"yuheem"},"content":"        String status \u003d matcher.group(\"status\");"},{"lineNumber":94,"author":{"gitId":"yuheem"},"content":"        String description \u003d matcher.group(\"description\");"},{"lineNumber":95,"author":{"gitId":"yuheem"},"content":"        String dateTime \u003d matcher.group(\"dateTime\");"},{"lineNumber":96,"author":{"gitId":"yuheem"},"content":"        return new Deadline(decodeStatus(status), description, dateTime);"},{"lineNumber":97,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":99,"author":{"gitId":"yuheem"},"content":"    private static Event decodeEvent(String encodedEventData) throws DukeException {"},{"lineNumber":100,"author":{"gitId":"yuheem"},"content":"        final Matcher matcher \u003d ENCODED_EVENT_DATA_FORMAT.matcher(encodedEventData.trim());"},{"lineNumber":101,"author":{"gitId":"yuheem"},"content":"        if (!matcher.matches()) {"},{"lineNumber":102,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(String.format(encodedEventData,"},{"lineNumber":103,"author":{"gitId":"yuheem"},"content":"                    Messages.MESSAGE_INVALID_ENCODED_EVENT_FORMAT));"},{"lineNumber":104,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":106,"author":{"gitId":"yuheem"},"content":"        String status \u003d matcher.group(\"status\");"},{"lineNumber":107,"author":{"gitId":"yuheem"},"content":"        String description \u003d matcher.group(\"description\");"},{"lineNumber":108,"author":{"gitId":"yuheem"},"content":"        String date \u003d matcher.group(\"date\");"},{"lineNumber":109,"author":{"gitId":"yuheem"},"content":"        return new Event(decodeStatus(status), description, date);"},{"lineNumber":110,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":111}},{"path":"src/main/java/marvin/storage/TaskListEncoder.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.storage;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import marvin.task.TaskList;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":" * Encodes the {@code TaskList} object into a data file for storage."},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"public class TaskListEncoder {"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"     * Encodes the {@code TaskList} into a decodable"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"     * string representation of the task list."},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"     * @param toSave The task list to encode."},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"     * @return The decodable string representation of the task list."},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    public static List\u003cString\u003e encodeTaskList(TaskList toSave) {"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"        final List\u003cString\u003e encodedTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"        toSave.forEach(task -\u003e encodedTasks.add(task.encode()));"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"        return encodedTasks;"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":24}},{"path":"src/main/java/marvin/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":" * Represents a deadline."},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"    public static final String ENCODED_TYPE \u003d \"D\";"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"    protected LocalDateTime dateTime;"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the description of a deadline"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"     * and the date and time it is due by."},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the deadline."},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"     * @param dateTime The date and time the deadline is due by."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    public Deadline(String description, String dateTime) {"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"        this.dateTime \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\"));"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in whether a deadline is done,"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * its description, and the date and time it is due by."},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     * @param isDone True if the deadline is done, false otherwise."},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the deadline."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @param dateTime The date and time the deadline is due by."},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"    public Deadline(boolean isDone, String description, String dateTime) {"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"        this(description, dateTime);"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"     * Checks if a task is the same as the task to check with."},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"     * @param toCheck The task to check with"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"     * @return True if the tasks are the same, false otherwise."},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"    public boolean isSameTask(Task toCheck) {"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"        if (toCheck instanceof Deadline) {"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"            return description.equals(toCheck.description)"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"                    \u0026\u0026 dateTime.equals(((Deadline) toCheck).dateTime);"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"     * Encodes a deadline into a decodable string representation of the deadline."},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"     * @return The encoded string representation of the deadline."},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"    public String encode() {"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"        assert dateTime !\u003d null;"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"        String status \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"        return String.format(\"%s/%s/%s/%s\","},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"                ENCODED_TYPE,"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"                status,"},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":"                description,"},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"                dateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd Hmm\")));"},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":"     * Converts a deadline to the format to be displayed to the user by the Ui."},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":"     * @return The deadline in display format."},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"        assert dateTime !\u003d null;"},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":"        return String.format(\"[D][%s] %s (by: %s)\","},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"                getStatusIcon(),"},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":"                description,"},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":"                dateTime.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh:mm a\")));"},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":79}},{"path":"src/main/java/marvin/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":" * Represents an event."},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"public class Event extends Task {"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"    public static final String ENCODED_TYPE \u003d \"E\";"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"    protected LocalDate date;"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the description of an"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"     * event task and the date it occurs at."},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the event."},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"     * @param date The date the event occurs at."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    public Event(String description, String date) {"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"        super(description);"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"        this.date \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in whether an event is done,"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * its description, and the date it occurs at."},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     * @param isDone True if the event is done, false otherwise."},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the event."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @param date The date the event occurs at."},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"    public Event(boolean isDone, String description, String date) {"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"        this(description, date);"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"     * Checks if a task is the same as the task to check with."},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"     * @param toCheck The task to check with"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"     * @return True if the tasks are the same, false otherwise."},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"    public boolean isSameTask(Task toCheck) {"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"        if (toCheck instanceof Event) {"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"            return description.equals(toCheck.description)"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"                    \u0026\u0026 date.equals(((Event) toCheck).date);"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"        return false;"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"     * Encodes an event into a decodable string representation of the event."},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"     * @return The encoded string representation of the event."},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"    public String encode() {"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"        assert date !\u003d null;"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"        String status \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"        return String.format(\"%s/%s/%s/%s\", ENCODED_TYPE, status, description, date);"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"     * Converts an event to the format to be displayed to the user by the Ui."},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"     * @return The event in display format."},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":"    public String toString() {"},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"        assert date !\u003d null;"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":"        return String.format(\"[E][%s] %s (at: %s)\","},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"                getStatusIcon(),"},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"                description,"},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"                date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")));"},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":75}},{"path":"src/main/java/marvin/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":" * Represents a task. A base class for other types of tasks to inherit from."},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the description of the task."},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"     * A task by default is not done."},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the task."},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"     * Setter to update whether a task is done."},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"     * @param isDone True if the task is done and false otherwise."},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    public void setDone(boolean isDone) {"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * Getter to check whether a task is done."},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * @return True if the task is done and false otherwise."},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    public boolean isDone() {"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"        return isDone;"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"     * Returns the description of the task."},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"     * @return The description of the task."},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"    public String getDescription() {"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"        return description;"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"     * Returns a string-based representation of an icon of whether a task is done."},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"     * @return A tick icon if the task is done, otherwise a cross icon."},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"    public String getStatusIcon() {"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"     * Checks if a task is the same as the task to check with."},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"     * Method must be implemented by subclasses."},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"     * @param toCheck The task to check with"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"     * @return True if the tasks are the same, false otherwise."},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"    public boolean isSameTask(Task toCheck) {"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"        throw new UnsupportedOperationException(\"Method must be implemented by child classes\");"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"     * Encodes a task into a decodable string representation of the task."},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":"     * @return The encoded string representation of the task."},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":"    public String encode() {"},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":"        throw new UnsupportedOperationException(\"Method must be implemented by child classes\");"},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"     * Converts a task to the format to be displayed to the user by the Ui."},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"     * @return The task in display format."},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":80}},{"path":"src/main/java/marvin/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.util.Iterator;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"import marvin.exception.DukeException;"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import marvin.util.Utils;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":" * Represents a list of tasks."},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"public class TaskList implements Iterable\u003cTask\u003e {"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    private List\u003cTask\u003e tasks;"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"     * Constructor. Defaults to an empty list of tasks."},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    public TaskList() {"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in a list of tasks."},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"     * @param tasks The list of tasks."},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if the list of tasks contains any duplicates."},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    public TaskList(List\u003cTask\u003e tasks) throws DukeException {"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"        if (!Utils.elementsAreUnique(tasks)) {"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(\"Tasks contains a duplicate!\");"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"        this.tasks \u003d tasks;"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"     * Returns a task from the list of tasks"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"     * using a 0-based index."},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"     * @param index The 0-based index of the task."},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":"     * @return The task at the 0-based index of the list of tasks."},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"    public Task get(int index) {"},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"        return this.tasks.get(index);"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"     * Returns the number of tasks in the list of tasks."},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"     * @return The number of tasks in the list of tasks."},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":"    public int size() {"},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"        return this.tasks.size();"},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"     * Adds a task to the list of tasks."},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"     * @param task The task to be added."},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if the task to be added is a duplicate."},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"    public void add(Task task) throws DukeException {"},{"lineNumber":61,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":62,"author":{"gitId":"yuheem"},"content":"        if (contains(task)) {"},{"lineNumber":63,"author":{"gitId":"yuheem"},"content":"            throw new DukeException(\"Cannot add duplicate task!\");"},{"lineNumber":64,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"yuheem"},"content":"        this.tasks.add(task);"},{"lineNumber":66,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":68,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"yuheem"},"content":"     * Removes a task from the list of tasks using a 0-based index."},{"lineNumber":70,"author":{"gitId":"yuheem"},"content":"     * @param index The 0-based index of the task."},{"lineNumber":71,"author":{"gitId":"yuheem"},"content":"     * @return The task which was removed."},{"lineNumber":72,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"yuheem"},"content":"    public Task remove(int index) {"},{"lineNumber":74,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":75,"author":{"gitId":"yuheem"},"content":"        return this.tasks.remove(index);"},{"lineNumber":76,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":78,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":79,"author":{"gitId":"yuheem"},"content":"     * Reference from github.com/se-edu/addressbook-level2"},{"lineNumber":80,"author":{"gitId":"yuheem"},"content":"     * Checks if the list contains an equivalent task as the given argument."},{"lineNumber":81,"author":{"gitId":"yuheem"},"content":"     * The {@link Task#isSameTask} method is used for this comparison, which"},{"lineNumber":82,"author":{"gitId":"yuheem"},"content":"     * defines a weaker notion of equality."},{"lineNumber":83,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"yuheem"},"content":"    public boolean contains(Task toCheck) {"},{"lineNumber":85,"author":{"gitId":"yuheem"},"content":"        for (Task task : tasks) {"},{"lineNumber":86,"author":{"gitId":"yuheem"},"content":"            if (task.isSameTask(toCheck)) {"},{"lineNumber":87,"author":{"gitId":"yuheem"},"content":"                return true;"},{"lineNumber":88,"author":{"gitId":"yuheem"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"yuheem"},"content":"        return false;"},{"lineNumber":91,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":93,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"yuheem"},"content":"     * Returns an iterator over the list of tasks."},{"lineNumber":95,"author":{"gitId":"yuheem"},"content":"     * @return The iterator over the list of tasks in proper sequence."},{"lineNumber":96,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"yuheem"},"content":"    public Iterator\u003cTask\u003e iterator() {"},{"lineNumber":99,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":100,"author":{"gitId":"yuheem"},"content":"        return tasks.iterator();"},{"lineNumber":101,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":103,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"yuheem"},"content":"     * Returns a list of tasks that contains the keywords."},{"lineNumber":105,"author":{"gitId":"yuheem"},"content":"     * @param keywords The keywords to match."},{"lineNumber":106,"author":{"gitId":"yuheem"},"content":"     * @return The list of tasks that contain the keywords."},{"lineNumber":107,"author":{"gitId":"yuheem"},"content":"     * @throws DukeException Error if the list of tasks contains any duplicates."},{"lineNumber":108,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"yuheem"},"content":"    public TaskList filter(String keywords) throws DukeException {"},{"lineNumber":110,"author":{"gitId":"yuheem"},"content":"        List\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":111,"author":{"gitId":"yuheem"},"content":"        for (Task task : tasks) {"},{"lineNumber":112,"author":{"gitId":"yuheem"},"content":"            if (task.description.contains(keywords)) {"},{"lineNumber":113,"author":{"gitId":"yuheem"},"content":"                foundTasks.add(task);"},{"lineNumber":114,"author":{"gitId":"yuheem"},"content":"            }"},{"lineNumber":115,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"yuheem"},"content":"        return new TaskList(foundTasks);"},{"lineNumber":117,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":119,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"yuheem"},"content":"     * Returns a string representation of the tasks in the TaskList."},{"lineNumber":121,"author":{"gitId":"yuheem"},"content":"     * @return The string representation of the tasks in the TaskList."},{"lineNumber":122,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":123,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":124,"author":{"gitId":"yuheem"},"content":"    public String toString() {"},{"lineNumber":125,"author":{"gitId":"yuheem"},"content":"        assert tasks !\u003d null;"},{"lineNumber":126,"author":{"gitId":"yuheem"},"content":"        StringBuilder tasksString \u003d new StringBuilder();"},{"lineNumber":127,"author":{"gitId":"yuheem"},"content":"        int count \u003d 1;"},{"lineNumber":128,"author":{"gitId":"yuheem"},"content":"        for (Task task : tasks) {"},{"lineNumber":129,"author":{"gitId":"yuheem"},"content":"            tasksString.append(String.format(\"%d.%s\\n\", count, task));"},{"lineNumber":130,"author":{"gitId":"yuheem"},"content":"            count++;"},{"lineNumber":131,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":132,"author":{"gitId":"yuheem"},"content":"        return tasksString.toString();"},{"lineNumber":133,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":134}},{"path":"src/main/java/marvin/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":" * Represents a to-do."},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"    public static final String ENCODED_TYPE \u003d \"T\";"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in the description of a to-do."},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"     * @param description The description of the to-do."},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"     * Constructor takes in whether a to-do is done, and its description."},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"     * @param isDone True if the to-do is done, false otherwise."},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"     * @param description The to-do of the deadline."},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    public Todo(boolean isDone, String description) {"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"        this(description);"},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"     * Checks if a task is the same as the task to check with."},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":"     * @param toCheck The task to check with"},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"     * @return True if the tasks are the same, false otherwise."},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"    public boolean isSameTask(Task toCheck) {"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        if (toCheck instanceof Todo) {"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"            return description.equals(toCheck.description);"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"        return false;"},{"lineNumber":38,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":40,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"yuheem"},"content":"     * Encodes a to-do into a decodable string representation of the to-do."},{"lineNumber":42,"author":{"gitId":"yuheem"},"content":"     * @return The encoded string representation of the to-do."},{"lineNumber":43,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":45,"author":{"gitId":"yuheem"},"content":"    public String encode() {"},{"lineNumber":46,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":47,"author":{"gitId":"yuheem"},"content":"        String status \u003d isDone ? \"1\" : \"0\";"},{"lineNumber":48,"author":{"gitId":"yuheem"},"content":"        return String.format(\"%s/%s/%s\", ENCODED_TYPE, status, description);"},{"lineNumber":49,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":51,"author":{"gitId":"yuheem"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"yuheem"},"content":"     * Converts a to-do to the format to be displayed to the user by the Ui."},{"lineNumber":53,"author":{"gitId":"yuheem"},"content":"     * @return The to-do in display format."},{"lineNumber":54,"author":{"gitId":"yuheem"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"yuheem"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"yuheem"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"yuheem"},"content":"        assert description !\u003d null;"},{"lineNumber":58,"author":{"gitId":"yuheem"},"content":"        return String.format(\"[T][%s] %s\", getStatusIcon(), description);"},{"lineNumber":59,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":60}},{"path":"src/main/java/marvin/util/Utils.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.util;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import java.util.Collection;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import java.util.Set;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"-"},"content":" * @@author damithc -reused"},{"lineNumber":9,"author":{"gitId":"-"},"content":" * https://github.com/se-edu/addressbook-level2"},{"lineNumber":10,"author":{"gitId":"-"},"content":" *"},{"lineNumber":11,"author":{"gitId":"-"},"content":" * Utility methods"},{"lineNumber":12,"author":{"gitId":"-"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Utils {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"-"},"content":"     * Checks if every element in a collection are unique by {@link Object#equals(Object)}."},{"lineNumber":16,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    public static boolean elementsAreUnique(Collection\u003c?\u003e items) {"},{"lineNumber":18,"author":{"gitId":"-"},"content":"        final Set\u003cObject\u003e testSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"-"},"content":"        for (Object item : items) {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"            final boolean itemAlreadyExists \u003d !testSet.add(item); // see Set documentation"},{"lineNumber":21,"author":{"gitId":"-"},"content":"            if (itemAlreadyExists) {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"                return false;"},{"lineNumber":23,"author":{"gitId":"-"},"content":"            }"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        return true;"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"yuheem":7,"-":20}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.geometry.Rectangle2D?\u003e"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"         \u003c/HBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"         \u003cviewport\u003e"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"            \u003cRectangle2D /\u003e"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"         \u003c/viewport\u003e\u003c/ImageView\u003e"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"    \u003c/children\u003e"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"    \u003cpadding\u003e"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    \u003c/padding\u003e"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"yuheem":23}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"yuheem":19}},{"path":"src/test/java/marvin/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"public class DeadlineTest {"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"    public void testEncode() {"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"        Deadline deadline \u003d new Deadline(\"deadline\", \"2020-12-12 1200\");"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"        assertEquals(\"D/0/deadline/2020-12-12 1200\", deadline.encode());"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    public void testToString() {"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"        Deadline deadline \u003d new Deadline(\"deadline\", \"2020-12-12 1200\");"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"        assertEquals(\"[D][\\u2718] deadline (by: Dec 12 2020 12:00 PM)\", deadline.toString());"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":19}},{"path":"src/test/java/marvin/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"public class EventTest {"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"    public void testEncode() {"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"        Event event \u003d new Event(\"event\", \"2020-12-12\");"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"        assertEquals(event.encode(), \"E/0/event/2020-12-12\");"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    public void testToString() {"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"        Event event \u003d new Event(\"event\", \"2020-12-12\");"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"        assertEquals(event.toString(), \"[E][\\u2718] event (at: Dec 12 2020)\");"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":19}},{"path":"src/test/java/marvin/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"public class TaskListTest {"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":4}},{"path":"src/test/java/marvin/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"public class TaskTest {"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    public void isDone_newTask_false() {"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"        assertFalse(task.isDone());"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    public void setDone_true_true() {"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":20,"author":{"gitId":"yuheem"},"content":"        task.setDone(true);"},{"lineNumber":21,"author":{"gitId":"yuheem"},"content":"        assertTrue(task.isDone());"},{"lineNumber":22,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":24,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"yuheem"},"content":"    public void getDescriptionTest() {"},{"lineNumber":26,"author":{"gitId":"yuheem"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":27,"author":{"gitId":"yuheem"},"content":"        assertEquals(\"test\", task.getDescription());"},{"lineNumber":28,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":30,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"yuheem"},"content":"    public void getStatusIconTest() {"},{"lineNumber":32,"author":{"gitId":"yuheem"},"content":"        Task task \u003d new Task(\"test\");"},{"lineNumber":33,"author":{"gitId":"yuheem"},"content":"        assertEquals(\"\\u2718\", task.getStatusIcon());"},{"lineNumber":34,"author":{"gitId":"yuheem"},"content":"        task.setDone(true);"},{"lineNumber":35,"author":{"gitId":"yuheem"},"content":"        assertEquals(\"\\u2713\", task.getStatusIcon());"},{"lineNumber":36,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":37}},{"path":"src/test/java/marvin/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"package marvin.task;"},{"lineNumber":2,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":3,"author":{"gitId":"yuheem"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":5,"author":{"gitId":"yuheem"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":7,"author":{"gitId":"yuheem"},"content":"public class TodoTest {"},{"lineNumber":8,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"yuheem"},"content":"    public void testEncode() {"},{"lineNumber":10,"author":{"gitId":"yuheem"},"content":"        Todo todo \u003d new Todo(\"todo\");"},{"lineNumber":11,"author":{"gitId":"yuheem"},"content":"        assertEquals(\"T/0/todo\", todo.encode());"},{"lineNumber":12,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"yuheem"},"content":""},{"lineNumber":14,"author":{"gitId":"yuheem"},"content":"    @Test"},{"lineNumber":15,"author":{"gitId":"yuheem"},"content":"    public void testToString() {"},{"lineNumber":16,"author":{"gitId":"yuheem"},"content":"        Todo todo \u003d new Todo(\"todo\");"},{"lineNumber":17,"author":{"gitId":"yuheem"},"content":"        assertEquals(\"[T][\\u2718] todo\", todo.toString());"},{"lineNumber":18,"author":{"gitId":"yuheem"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yuheem"},"content":"}"}],"authorContributionMap":{"yuheem":19}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yuheem"},"content":"T|0|borrow book"}],"authorContributionMap":{"yuheem":1}}]
