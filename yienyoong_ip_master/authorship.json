[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"repositories {"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"    mavenCentral()"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"}"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":""}],"authorContributionMap":{"yienyoong":27,"-":45}},{"path":"data/saved_task_list.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"TODO|1|abc"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":"TODO|1|123"},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"DEADLINE|0|2103T|2021-02-02 2359"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"EVENT|0|cny|2021-02-12 1200"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"DEADLINE|0|cs2101 op1|2021-02-08 1500"}],"authorContributionMap":{"yienyoong":5}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import javafx.geometry.Insets;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.text.TextAlignment;"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":" * An example of a custom control using FXML."},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":" * containing text from the speaker."},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"public class DialogBox extends HBox {"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    public static final int CHAR_LINE_LIMIT \u003d 36;"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    private Label dialog;"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    private ImageView displayPicture;"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"            fxmlLoader.load();"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        } catch (IOException e) {"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"            e.printStackTrace();"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"        // dialog.setMinHeight(Region.USE_PREF_SIZE);"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        dialog.setText(text);"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"        dialog.setTextAlignment(TextAlignment.LEFT);"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"        displayPicture.setImage(img);"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"        final Circle clip \u003d new Circle(30, 30, 30);"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"    private void flip() {"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"        Collections.reverse(tmp);"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"        db.dialog.setBackground(new Background(new BackgroundFill(Color.web(\"#add8e6\"), new CornerRadii(10.0),"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"                new Insets(0, 8, 0, 0))));"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"        db.dialog.setPadding(new Insets(10, 18, 10, 10));"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"        if (text.length() \u003e CHAR_LINE_LIMIT) {"},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"            db.dialog.setMaxWidth(280.0);"},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":"        return db;"},{"lineNumber":73,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":"        db.flip();"},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"        db.dialog.setBackground(new Background(new BackgroundFill(Color.web(\"#dcedc8\"), new CornerRadii(10.0),"},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"                new Insets(0, 0, 0, 8))));"},{"lineNumber":80,"author":{"gitId":"yienyoong"},"content":"        db.dialog.setPadding(new Insets(10, 10, 10, 18));"},{"lineNumber":81,"author":{"gitId":"yienyoong"},"content":"        db.dialog.setMaxWidth(290.0);"},{"lineNumber":82,"author":{"gitId":"yienyoong"},"content":"        return db;"},{"lineNumber":83,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":84}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.command.Command;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":" * The Duke class is the entry point into the chatbot program."},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":" * It scans in user input and adds/deletes/lists tasks based on the user input."},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":" * It prints the action reply to the CLI."},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    private Storage storage;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    private TaskList taskList \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private Parser parser \u003d new Parser();"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Duke object that initializes the storage and ui."},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"     * @param filePath Relative file path to the saved data file of tasks."},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public Duke(String filePath) {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        ui \u003d new Ui();"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"     * Initializes the Chatbot when the program is just opened. Greets user and populates tasklist."},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"     * @return Greeting message if successfully launched, error message otherwise."},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    public String initializeStart() {"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"            storage.initializeTaskList(taskList);"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"            return ui.returnGreeting();"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        } catch (DukeException e) {"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"            return ui.returnDukeExceptionMsg(e);"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"     * Handles Chatbot\u0027s response to a user input."},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"     * @param input User input."},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"     * @return Chatbot\u0027s response as String."},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"    public String getResponse(String input) {"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"            Command toRun \u003d parser.parse(input);"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"            return toRun.run(storage, taskList);"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"        } catch (DukeException e) {"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"            return ui.returnDukeExceptionMsg(e);"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"}"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":""}],"authorContributionMap":{"yienyoong":56,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":" *  DukeException class encapsulates information about a custom exception for Duke"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":" *  and inherits functionality from the Exception class"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"public class DukeException extends Exception {"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"    private static final String TOP_BORDER \u003d \"_____________________________________________________________________\";"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    private static final String BTM_BORDER \u003d \"---------------------------------------------------------------------\";"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"    private static final String PADDING \u003d \"  \";"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"     * Create a new DukeException to be thrown"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"     * @param msg The error message"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    public DukeException(String msg) {"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"        super(msg);"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"     * Returns a string representation of the DukeException"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"     * @return Error message in chat box"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"        return super.getMessage();"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":29}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import javafx.animation.PauseTransition;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import javafx.application.Application;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import javafx.util.Duration;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    private static final String PATH_NAME \u003d \"./data/saved_task_list.txt\";"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    private Duke duke \u003d new Duke(PATH_NAME);"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    public void start(Stage stage) {"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"            stage.setScene(scene);"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"            // fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().initialize(duke);"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     * Pauses for 2 seconds then exits the program if no other threads are running."},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    public static void exit() {"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        PauseTransition pause \u003d new PauseTransition(Duration.seconds(2));"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        pause.setOnFinished(event -\u003e {"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"            Platform.exit();"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        });"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        pause.play();"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":44}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/joey.jpg\"));"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/chandler.jpg\"));"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"     * Initialize the UI elements in the MainWindow."},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     * @param duke The Duke object handling all the logic."},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    public void initialize(Duke duke) {"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"        this.duke \u003d duke;"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        String greeting \u003d duke.initializeStart();"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"                DialogBox.getDukeDialog(greeting, dukeImage)"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        );"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"        userInput.clear();"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":57}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.command.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.command.Command;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.command.CommandName;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import duke.command.DeadlineCommand;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import duke.command.DeleteCommand;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import duke.command.DoneCommand;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import duke.command.EventCommand;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import duke.command.FindCommand;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import duke.command.ListCommand;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import duke.command.TodoCommand;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":" *  The Parser class encapsulates methods to handle user commands."},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"public class Parser {"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    private Ui ui \u003d new Ui();"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"     * Returns a Command corresponding to the command the user input."},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input string."},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"     * @return Command corresponding to user input."},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the user input a command with invalid format."},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    public Command parse(String fullCmd) throws DukeException {"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        String[] fullCmdStrArray \u003d fullCmd.split(\" \");"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"        Command toRun \u003d null;"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        CommandName cmd;"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"            cmd \u003d CommandName.valueOf(fullCmdStrArray[0].toUpperCase());"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Sorry human, I have not been trained to process that command.\");"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        switch(cmd) {"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        case LIST:"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new ListCommand(fullCmd, ui);"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        case DONE:"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new DoneCommand(fullCmd, ui);"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        case TODO:"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new TodoCommand(fullCmd, ui);"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        case EVENT:"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new EventCommand(fullCmd, ui);"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"        case DEADLINE:"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new DeadlineCommand(fullCmd, ui);"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"        case DELETE:"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new DeleteCommand(fullCmd, ui);"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"        case FIND:"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new FindCommand(fullCmd, ui);"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"        case BYE:"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"            toRun \u003d new ByeCommand(fullCmd, ui);"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"        default:"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Sorry human, I have not been trained to process that command.\");"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"        return toRun;"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"     * Checks whether a string is a number in String type."},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"     * @param str The string to be checked."},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":"     * @return True if the string is a number in String type, false otherwise."},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"yienyoong"},"content":"    public static boolean isNumber(String str) {"},{"lineNumber":74,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"            Integer.parseInt(str);"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":"            return false;"},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"        return true;"},{"lineNumber":80,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":81}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import duke.command.CommandName;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import duke.task.EventTask;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import duke.task.Task;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"import duke.task.TodoTask;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":" * The Storage class encapsulates information and methods to handle loading and saving tasks"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":" * to and from a saved data file."},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    private String filePath;"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    public Storage(String filePath) {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"     * Saves the changes to the saved data file after every change."},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The list of tasks."},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the file is unable to be found or is unable to be written to."},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"    public void saveTaskList(TaskList taskList) throws DukeException {"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"                Task currTask \u003d taskList.getIndex(i);"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"                fileWriter.write(currTask.getSavingString());"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"            fileWriter.close();"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        } catch (IOException e) {"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Failed to save data.\");"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"     * Populates the task list with the tasks saved in the task data file upon start of program."},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The task list to be populated"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the file is unable to be found or the file\u0027s contents are in the wrong format."},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"    public void initializeTaskList(TaskList taskList) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"            File savedTaskList \u003d new File(filePath);"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"            savedTaskList.getParentFile().mkdirs();"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"            savedTaskList.createNewFile();"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"            if (savedTaskList.length() !\u003d 0) { // file is not empty"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"                Scanner sc \u003d new Scanner(savedTaskList);"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"                while (sc.hasNextLine()) {"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"                    Task currTask \u003d loadTaskFromFile(sc.nextLine());"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"                    taskList.add(currTask);"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"        } catch (IOException e) {"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Saved data file corrupted.\");"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"yienyoong"},"content":"     * Converts the contents of the saved data file of tasks in String form to Task form"},{"lineNumber":74,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"     * @param taskString Task in String form."},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"     * @return Corresponding Task."},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the Task String is in the wrong format."},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"    public Task loadTaskFromFile(String taskString) throws DukeException {"},{"lineNumber":80,"author":{"gitId":"yienyoong"},"content":"        String[] taskStringArr \u003d taskString.split(\"\\\\|\");"},{"lineNumber":81,"author":{"gitId":"yienyoong"},"content":"        CommandName commandName \u003d CommandName.valueOf(taskStringArr[0]);"},{"lineNumber":82,"author":{"gitId":"yienyoong"},"content":"        int taskStatus \u003d -1;"},{"lineNumber":83,"author":{"gitId":"yienyoong"},"content":"        String taskName;"},{"lineNumber":84,"author":{"gitId":"yienyoong"},"content":"        String taskDate;"},{"lineNumber":85,"author":{"gitId":"yienyoong"},"content":"        Task taskToReturn \u003d null;"},{"lineNumber":86,"author":{"gitId":"yienyoong"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":87,"author":{"gitId":"yienyoong"},"content":"        switch (commandName) {"},{"lineNumber":88,"author":{"gitId":"yienyoong"},"content":"        case TODO:"},{"lineNumber":89,"author":{"gitId":"yienyoong"},"content":"            taskStatus \u003d Integer.parseInt(taskStringArr[1]);"},{"lineNumber":90,"author":{"gitId":"yienyoong"},"content":"            taskName \u003d taskStringArr[2];"},{"lineNumber":91,"author":{"gitId":"yienyoong"},"content":"            taskToReturn \u003d new TodoTask(taskName);"},{"lineNumber":92,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":93,"author":{"gitId":"yienyoong"},"content":"        case EVENT:"},{"lineNumber":94,"author":{"gitId":"yienyoong"},"content":"            taskStatus \u003d Integer.parseInt(taskStringArr[1]);"},{"lineNumber":95,"author":{"gitId":"yienyoong"},"content":"            taskName \u003d taskStringArr[2];"},{"lineNumber":96,"author":{"gitId":"yienyoong"},"content":"            taskDate \u003d taskStringArr[3];"},{"lineNumber":97,"author":{"gitId":"yienyoong"},"content":"            try {"},{"lineNumber":98,"author":{"gitId":"yienyoong"},"content":"                LocalDateTime ldtEvent \u003d LocalDateTime.parse(taskDate, dtf);"},{"lineNumber":99,"author":{"gitId":"yienyoong"},"content":"                taskToReturn \u003d new EventTask(taskName, ldtEvent);"},{"lineNumber":100,"author":{"gitId":"yienyoong"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":101,"author":{"gitId":"yienyoong"},"content":"                throw new DukeException(\"Save data file corrupted\");"},{"lineNumber":102,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":103,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":104,"author":{"gitId":"yienyoong"},"content":"        case DEADLINE:"},{"lineNumber":105,"author":{"gitId":"yienyoong"},"content":"            taskStatus \u003d Integer.parseInt(taskStringArr[1]);"},{"lineNumber":106,"author":{"gitId":"yienyoong"},"content":"            taskName \u003d taskStringArr[2];"},{"lineNumber":107,"author":{"gitId":"yienyoong"},"content":"            taskDate \u003d taskStringArr[3];"},{"lineNumber":108,"author":{"gitId":"yienyoong"},"content":"            try {"},{"lineNumber":109,"author":{"gitId":"yienyoong"},"content":"                LocalDateTime ldtDeadline \u003d LocalDateTime.parse(taskDate, dtf);"},{"lineNumber":110,"author":{"gitId":"yienyoong"},"content":"                taskToReturn \u003d new DeadlineTask(taskName, ldtDeadline);"},{"lineNumber":111,"author":{"gitId":"yienyoong"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":112,"author":{"gitId":"yienyoong"},"content":"                throw new DukeException(\"Save data file corrupted\");"},{"lineNumber":113,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"yienyoong"},"content":"            break;"},{"lineNumber":115,"author":{"gitId":"yienyoong"},"content":"        default:"},{"lineNumber":116,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Save data file corrupted\");"},{"lineNumber":117,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"yienyoong"},"content":"        if (taskStatus \u003d\u003d -1 || taskToReturn \u003d\u003d null) {"},{"lineNumber":119,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Saved data file corrupted.\");"},{"lineNumber":120,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"yienyoong"},"content":"        if (taskStatus \u003d\u003d 1) {"},{"lineNumber":122,"author":{"gitId":"yienyoong"},"content":"            taskToReturn.markDone();"},{"lineNumber":123,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":124,"author":{"gitId":"yienyoong"},"content":"        return taskToReturn;"},{"lineNumber":125,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":126}},{"path":"src/main/java/duke/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"public class StorageStub extends Storage {"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"    private static final String PATH_NAME \u003d \"./data/storage_test.txt\";"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"     * Creates and initializes a Storage Stub for tesing purposes."},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"     * @throws IOException if the file cannot be found or created."},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    public StorageStub() throws IOException {"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"        super(PATH_NAME);"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"        initializeTestFile();"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    private void initializeTestFile() throws IOException {"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        File savedTaskList \u003d new File(PATH_NAME);"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        savedTaskList.getParentFile().mkdirs();"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        savedTaskList.createNewFile();"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":27}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"    public TaskList() {"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    public int getSize() {"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"        return taskList.size();"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    public Task getIndex(int i) {"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"        return taskList.get(i);"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    public void add(Task task) {"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        this.taskList.add(task);"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    public void removeIndex(int i) {"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"        this.taskList.remove(i);"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     * Returns a TaskList of all tasks containing the keyword."},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     * @param keyword The keyword the user wants to search for."},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     * @return Tasklist of all tasks containing the keyword."},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if no task containing the keyword exists."},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    public TaskList find(String keyword) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        TaskList toReturn \u003d new TaskList();"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        for (Task t : this.taskList) {"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"            if (t.getTaskName().contains(keyword)) {"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"                toReturn.add(t);"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"        if (toReturn.getSize() \u003d\u003d 0) {"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Sorry human, no such task seems to exists.\");"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"        return toReturn;"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":49}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.task.Task;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":" *  The Ui class encapsulates methods to handle text displays to the CLI."},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    private static final String PADDING \u003d \"  \";"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"     * Returns the chatbot\u0027s greeting message when a user starts the chatbot."},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    public String returnGreeting() {"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"        String greeting \u003d \"Hello! I\u0027m Chandler, here to help you keep track of measly tasks\""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"                + \" in your mundane human life. How may I help you today?\";"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"        return greeting;"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the list command with the wrong format."},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid list command."},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    public String listCmdError() {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        String errorMsg \u003d \"Sorry human, I do not understand your command.\""},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"                + \"To access your list, enter \u0027list\u0027 with no additional descriptions.\";"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        return errorMsg;"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the done command with too many parameters."},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid done command."},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    public String doneCmdTooManyArgsError() {"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        String errorMsg \u003d \"Sorry human, please enter only one task for me to mark as complete.\""},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"                + \"I am unable to process more than one task at one time.\";"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        return errorMsg;"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the done command with no parameters."},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid done command."},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"    public String doneCmdNoArgsError() {"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"        String errorMsg \u003d \"Sorry human, please enter a task number.\";"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"        return errorMsg;"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the done command with the wrong parameter."},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid done command."},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"    public String doneCmdInvalidArgsError() {"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"        String errorMsg \u003d \"Sorry human, please enter the number of the task you want me to\""},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"                + \" mark as complete.\";"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"        return errorMsg;"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the event command with the wrong format."},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid event command."},{"lineNumber":67,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"yienyoong"},"content":"    public String eventFormatError() {"},{"lineNumber":69,"author":{"gitId":"yienyoong"},"content":"        String eErrorMsg \u003d \"Invalid format. Please enter as such:\""},{"lineNumber":70,"author":{"gitId":"yienyoong"},"content":"                + \"\\n\""},{"lineNumber":71,"author":{"gitId":"yienyoong"},"content":"                + \"event \u003cEVENT_NAME\u003e /at \u003cEVENT_TIME\u003e\";"},{"lineNumber":72,"author":{"gitId":"yienyoong"},"content":"        return eErrorMsg;"},{"lineNumber":73,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":75,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the deadline command with the wrong format."},{"lineNumber":77,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid deadline command."},{"lineNumber":79,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"yienyoong"},"content":"    public String deadlineFormatError() {"},{"lineNumber":81,"author":{"gitId":"yienyoong"},"content":"        String dErrorMsg \u003d \"Invalid format. Please enter as such:\""},{"lineNumber":82,"author":{"gitId":"yienyoong"},"content":"                + \"\\n\""},{"lineNumber":83,"author":{"gitId":"yienyoong"},"content":"                + \"deadline \u003cTASK_NAME\u003e /by \u003cDEADLINE_TIME\u003e\";"},{"lineNumber":84,"author":{"gitId":"yienyoong"},"content":"        return dErrorMsg;"},{"lineNumber":85,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":87,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the wrong date format."},{"lineNumber":89,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid date input."},{"lineNumber":91,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"yienyoong"},"content":"    public String dateFormatError() {"},{"lineNumber":93,"author":{"gitId":"yienyoong"},"content":"        String dateErrorMsg \u003d \"Invalid date format. Please enter as such:\""},{"lineNumber":94,"author":{"gitId":"yienyoong"},"content":"                + \"\\n\""},{"lineNumber":95,"author":{"gitId":"yienyoong"},"content":"                + \"yyyy-MM-dd HHmm (e.g. 2019-10-15 1800)\";"},{"lineNumber":96,"author":{"gitId":"yienyoong"},"content":"        return dateErrorMsg;"},{"lineNumber":97,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":99,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"yienyoong"},"content":"     * Returns an error message in a string when a user inputs the delete command with too many parameters."},{"lineNumber":101,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"yienyoong"},"content":"     * @return String containing error message of invalid delete command."},{"lineNumber":103,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":104,"author":{"gitId":"yienyoong"},"content":"    public String deleteCmdTooManyArgsError() {"},{"lineNumber":105,"author":{"gitId":"yienyoong"},"content":"        String errorMsg \u003d \"Sorry human, please enter only one task for me to delete.\""},{"lineNumber":106,"author":{"gitId":"yienyoong"},"content":"                + \"\\n\""},{"lineNumber":107,"author":{"gitId":"yienyoong"},"content":"                + \"I am unable to process more than one task at one time.\";"},{"lineNumber":108,"author":{"gitId":"yienyoong"},"content":"        return errorMsg;"},{"lineNumber":109,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":111,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"yienyoong"},"content":"     * Returns error message from DukeException."},{"lineNumber":113,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"yienyoong"},"content":"     * @param e DukeException."},{"lineNumber":115,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"yienyoong"},"content":"    public String returnDukeExceptionMsg(DukeException e) {"},{"lineNumber":117,"author":{"gitId":"yienyoong"},"content":"        return e.toString();"},{"lineNumber":118,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":120,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"yienyoong"},"content":"     * Returns deleted task message."},{"lineNumber":122,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":123,"author":{"gitId":"yienyoong"},"content":"     * @param task Task that has just been deleted."},{"lineNumber":124,"author":{"gitId":"yienyoong"},"content":"     * @param taskList List of all tasks."},{"lineNumber":125,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"yienyoong"},"content":"    public String returnDeletedMsg(Task task, TaskList taskList) {"},{"lineNumber":127,"author":{"gitId":"yienyoong"},"content":"        return \"Task has been deleted.\" + \"\\n\""},{"lineNumber":128,"author":{"gitId":"yienyoong"},"content":"                + \"Just like you will be deleted someday too.\" + \"\\n\""},{"lineNumber":129,"author":{"gitId":"yienyoong"},"content":"                + PADDING + task + \"\\n\""},{"lineNumber":130,"author":{"gitId":"yienyoong"},"content":"                + \"Now you have \" + taskList.getSize()"},{"lineNumber":131,"author":{"gitId":"yienyoong"},"content":"                + (taskList.getSize() \u003d\u003d 1 ? \" task \" : \" tasks \") + \"in your list.\" + \"\\n\";"},{"lineNumber":132,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":134,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"yienyoong"},"content":"     * Returns completed task message."},{"lineNumber":136,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"yienyoong"},"content":"     * @param task Task that has just been marked as done."},{"lineNumber":138,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":139,"author":{"gitId":"yienyoong"},"content":"    public String returnDoneMsg(Task task) {"},{"lineNumber":140,"author":{"gitId":"yienyoong"},"content":"        return \"Well done human on completing \" + task.getTaskName() + \"!\" + \"\\n\""},{"lineNumber":141,"author":{"gitId":"yienyoong"},"content":"                + \"I have marked it as done.\" + \"\\n\""},{"lineNumber":142,"author":{"gitId":"yienyoong"},"content":"                + PADDING + task + \"\\n\";"},{"lineNumber":143,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":145,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":146,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":147,"author":{"gitId":"yienyoong"},"content":"     * Returns all tasks."},{"lineNumber":148,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":149,"author":{"gitId":"yienyoong"},"content":"     * @param taskList List of all tasks."},{"lineNumber":150,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":151,"author":{"gitId":"yienyoong"},"content":"    public String returnList(TaskList taskList) {"},{"lineNumber":152,"author":{"gitId":"yienyoong"},"content":"        String toReturn \u003d \"Here are the tasks in your list:\" + \"\\n\";"},{"lineNumber":153,"author":{"gitId":"yienyoong"},"content":"        for (int i \u003d 1; i \u003c\u003d taskList.getSize(); i++) {"},{"lineNumber":154,"author":{"gitId":"yienyoong"},"content":"            toReturn +\u003d (i + \". \" + taskList.getIndex(i - 1)) + \"\\n\";"},{"lineNumber":155,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":156,"author":{"gitId":"yienyoong"},"content":"        return toReturn;"},{"lineNumber":157,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":159,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":160,"author":{"gitId":"yienyoong"},"content":"     * Prints added task to list message."},{"lineNumber":161,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":162,"author":{"gitId":"yienyoong"},"content":"     * @param task Task that has just been added to list."},{"lineNumber":163,"author":{"gitId":"yienyoong"},"content":"     * @param taskList List of all tasks."},{"lineNumber":164,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":165,"author":{"gitId":"yienyoong"},"content":"    public String returnAddToListMsg(Task task, TaskList taskList) {"},{"lineNumber":166,"author":{"gitId":"yienyoong"},"content":"        return \"Got it: I\u0027ve added this task:\" + \"\\n\""},{"lineNumber":167,"author":{"gitId":"yienyoong"},"content":"                + PADDING + task + \"\\n\""},{"lineNumber":168,"author":{"gitId":"yienyoong"},"content":"                + \"Now you have \" + taskList.getSize()"},{"lineNumber":169,"author":{"gitId":"yienyoong"},"content":"                + (taskList.getSize() \u003d\u003d 1 ? \" task \" : \" tasks \") + \"in your list.\" + \"\\n\";"},{"lineNumber":170,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":171,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":172,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":173,"author":{"gitId":"yienyoong"},"content":"     * Returns goodbye message."},{"lineNumber":174,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":175,"author":{"gitId":"yienyoong"},"content":"    public String returnBye() {"},{"lineNumber":176,"author":{"gitId":"yienyoong"},"content":"        String farewell \u003d \"Bye! Hope you complete your tasks!\";"},{"lineNumber":177,"author":{"gitId":"yienyoong"},"content":"        return farewell;"},{"lineNumber":178,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":179,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":179}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.Main;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"public class ByeCommand implements Command {"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Bye Command."},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying bye messages to the CLI."},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    public ByeCommand(String fullCmd, Ui ui) {"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        Main.exit();"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        return ui.returnBye();"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":27}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":" * The Command interface provides an interface for all Command classes to implement."},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"public interface Command {"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    String run(Storage storage, TaskList taskList) throws DukeException;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":12}},{"path":"src/main/java/duke/command/CommandName.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":" * Enumerates current commands the chatbot is able to process."},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"public enum CommandName {"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"    LIST,"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"    DONE,"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    DELETE,"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"    TODO,"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    EVENT,"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    DEADLINE,"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    FIND,"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    BYE"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":15}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":" * The DeadlineCommand class encapsulates information and methods about a DeadlineCommand."},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"public class DeadlineCommand implements Command {"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    private String fullCmd;"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    private String[] fullCmdStrArray;"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Deadline Command."},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying deadline messages to the CLI."},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    public DeadlineCommand(String fullCmd, Ui ui) {"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"        this.fullCmd \u003d fullCmd;"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        this.fullCmdStrArray \u003d fullCmd.split(\" \");;"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     *  Processes the deadline command by adding a new deadline task to the list of tasks,"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"     *  writing it into the saved data file of tasks and displaying a message on the CLI."},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"     * @param storage The storage object that writes data to the saved data file of tasks."},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The list of tasks."},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the format of the Deadline command are invalid."},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003d\u003d 1) { // handle deadline without parameters"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.deadlineFormatError());"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"            String dTaskDetails \u003d fullCmd.substring(9); // remove \"deadline \""},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"            String[] dTaskDetailsArray \u003d dTaskDetails.split(\" /by \");"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"            String dTaskName \u003d dTaskDetailsArray[0];"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"            String dTaskDate \u003d dTaskDetailsArray[1];"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"            LocalDateTime ldt \u003d LocalDateTime.parse(dTaskDate, dtf);"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"            DeadlineTask newDeadlineTask \u003d new DeadlineTask(dTaskName, ldt);"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"            taskList.add(newDeadlineTask);"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"            storage.saveTaskList(taskList);"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"            return ui.returnAddToListMsg(newDeadlineTask, taskList);"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.deadlineFormatError());"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.dateFormatError());"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":65}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.Parser;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":" * The DeleteCommand class encapsulates information and methods about a DeleteCommand."},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"public class DeleteCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private String[] fullCmdStrArray;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Delete Command."},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying delete messages to the CLI."},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    public DeleteCommand(String fullCmd, Ui ui) {"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        this.fullCmdStrArray \u003d fullCmd.split(\" \");;"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"     *  * Processes the delete command by removing the specified task from the list of tasks,"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"     *  * removing it from the saved data file of tasks and displaying a message on the CLI."},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     * @param storage The storage object that writes data to the saved data file of tasks."},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The list of tasks."},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the format of the Delete command is invalid."},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003e 2) { // too many parameters (\u003e1)"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.deleteCmdTooManyArgsError());"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003c 2) { // no parameter"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"            String errorMsg \u003d \"Sorry human, please enter a task number.\";"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(errorMsg);"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"        if (!Parser.isNumber(fullCmdStrArray[1])) { // handle commands such as \u0027delete a\u0027, \u0027delete hello\u0027"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"            String errorMsg \u003d \"Sorry human, please enter the number of the task you want me to\""},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"                    + \"\\n\""},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"                    + \"  \""},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"                    + \"delete.\";"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(errorMsg);"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"        int taskIndex \u003d Integer.parseInt(fullCmdStrArray[1]) - 1;"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"        if (taskIndex \u003e taskList.getSize() - 1 || taskIndex \u003c 0) {"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Sorry human, that task does not seem to exist.\");"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        Task deletedTask \u003d taskList.getIndex(taskIndex);"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"        taskList.removeIndex(taskIndex);"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"        storage.saveTaskList(taskList);"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"        return ui.returnDeletedMsg(deletedTask, taskList);"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":64}},{"path":"src/main/java/duke/command/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.Parser;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import duke.task.Task;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":" * The DoneCommand class encapsulates information and methods about a DoneCommand."},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"public class DoneCommand implements Command {"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private String fullCmd;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    private String[] fullCmdStrArray;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Done Command."},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying done to the CLI."},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    public DoneCommand(String fullCmd, Ui ui) {"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        this.fullCmd \u003d fullCmd;"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        this.fullCmdStrArray \u003d fullCmd.split(\" \");;"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     *  * Processes the done command by marking the specified task as done,"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     *  * updating it in the saved data file of tasks and displaying a message on the CLI."},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     * @param storage The storage object that writes data to the saved data file of tasks."},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The list of tasks."},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the format of the Done command is invalid."},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003e 2) { // too many parameters (\u003e1)"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.doneCmdTooManyArgsError());"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003c 2) { // no parameter"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.doneCmdNoArgsError());"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"        if (!Parser.isNumber(fullCmdStrArray[1])) { // handle commands such as \u0027done a\u0027, \u0027done hello\u0027"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.doneCmdInvalidArgsError());"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"        int taskIndex \u003d Integer.parseInt(fullCmdStrArray[1]) - 1;"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        if (taskIndex \u003e taskList.getSize() - 1 || taskIndex \u003c 0) {"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Sorry human, that task does not seem to exist.\");"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"        Task doneTask \u003d taskList.getIndex(taskIndex);"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"        doneTask.markDone();"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"        storage.saveTaskList(taskList);"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        return ui.returnDoneMsg(doneTask);"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":63}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import duke.task.EventTask;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":" * The EventCommand class encapsulates information and methods about a EventCommand."},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"public class EventCommand implements Command {"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    private String fullCmd;"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    private String[] fullCmdStrArray;"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Event Command."},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying event messages to the CLI."},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    public EventCommand(String fullCmd, Ui ui) {"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        this.fullCmd \u003d fullCmd;"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"        this.fullCmdStrArray \u003d fullCmd.split(\" \");;"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     * Processes the event command by adding a new event task to the list of tasks,"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     * writing it into the saved data file of tasks and displaying a message on the CLI."},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"     * @param storage The storage object that writes data to the saved data file of tasks."},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The list of tasks."},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the format of the Event command is invalid."},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003d\u003d 1) { // handle event without parameters"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.eventFormatError());"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        try {"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"            String eTaskDetails \u003d fullCmd.substring(6); // remove \"event \""},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"            String[] eTaskDetailsArray \u003d eTaskDetails.split(\" /at \");"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"            String eTaskName \u003d eTaskDetailsArray[0];"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"            String eTaskDate \u003d eTaskDetailsArray[1];"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"            DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"            LocalDateTime ldt \u003d LocalDateTime.parse(eTaskDate, dtf);"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"            EventTask newEventTask \u003d new EventTask(eTaskName, ldt);"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"            taskList.add(newEventTask);"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"            storage.saveTaskList(taskList);"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"            return ui.returnAddToListMsg(newEventTask, taskList);"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"        } catch (ArrayIndexOutOfBoundsException e) { // handle wrong formats"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.eventFormatError());"},{"lineNumber":59,"author":{"gitId":"yienyoong"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":60,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.dateFormatError());"},{"lineNumber":61,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":63}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"public class FindCommand implements Command {"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    private String fullCmd;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"    private String[] fullCmdStrArray;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Find Command."},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying find messages to the CLI."},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    public FindCommand(String fullCmd, Ui ui) {"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"        this.fullCmd \u003d fullCmd;"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"        this.fullCmdStrArray \u003d fullCmd.split(\" \", 2);"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003d\u003d 1) { // handle find without parameters"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Sorry human, please tell me what to find.\");"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"        String toFind \u003d fullCmdStrArray[1];"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        TaskList matchingTasks \u003d taskList.find(toFind);"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        return ui.returnList(matchingTasks);"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":33}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":" * The ListCommand class encapsulates information and methods about a ListCommand."},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"public class ListCommand implements Command {"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    private String fullCmd;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    private String[] fullCmdStrArray;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a List Command."},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying list messages to the CLI."},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    public ListCommand(String fullCmd, Ui ui) {"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        this.fullCmd \u003d fullCmd;"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        this.fullCmdStrArray \u003d fullCmd.split(\" \");;"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"     *  Processes the list command by displaying the user\u0027s list of tasks on the CLI."},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     * @param storage The storage object that writes data to the saved data file of tasks."},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The list of tasks."},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the format of the List command is invalid."},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003e 1) { // handle commands such as \"list abc\", \"list 1 2 3\""},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(ui.listCmdError());"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        return ui.returnList(taskList);"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":42}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import duke.Storage;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import duke.task.TodoTask;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":" * The TodoCommand class encapsulates information and methods about a TodoCommand."},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"public class TodoCommand implements Command {"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    private String fullCmd;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    private String[] fullCmdStrArray;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    private Ui ui;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Todo Command."},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"     * @param fullCmd The full user input in String form."},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"     * @param ui The ui object responsible for displaying todo messages to the CLI."},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    public TodoCommand(String fullCmd, Ui ui) {"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        this.fullCmd \u003d fullCmd;"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        this.fullCmdStrArray \u003d fullCmd.split(\" \");;"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        this.ui \u003d ui;"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"     * Processes the todo command by adding a new todo task to the list of tasks,"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"     * writing it into the saved data file of tasks and displaying a message on the CLI."},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"     * @param storage The storage object that writes data to the saved data file of tasks."},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"     * @param taskList The list of tasks."},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"     * @throws DukeException if the format of the Todo command is invalid."},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"    public String run(Storage storage, TaskList taskList) throws DukeException {"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        if (fullCmdStrArray.length \u003d\u003d 1) { // handle todo without parameters"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"            throw new DukeException(\"Sorry human, please enter a name for this task.\");"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"        String taskName \u003d fullCmd.substring(5); // remove \"todo \""},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        TodoTask newTodoTask \u003d new TodoTask(taskName);"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":"        taskList.add(newTodoTask);"},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"        storage.saveTaskList(taskList);"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"        return ui.returnAddToListMsg(newTodoTask, taskList);"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":50}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":" * The DeadlineTask class encapsulates information and methods about a Deadline Task"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":" * and inherits functionality from the Task class."},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    private static final String SEPARATOR \u003d \"|\";"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    private LocalDateTime date;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a new Deadline Task."},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"     * @param taskName Name of the new Deadline Task."},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"     * @param date Date of the new Deadline Task."},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public DeadlineTask(String taskName, LocalDateTime date) {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        super(taskName);"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"     * Returns a string representation of a Deadline task for the user."},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"     * @return Type of task, status, followed by the name of Deadline task and date the task is due."},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"        return \"[D]\" + super.toString() + \" (by: \""},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh.mm a\")) + \")\";"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"     * Returns a string representation in the format of how the Deadline task should be saved in the data file."},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"     * @return String for chatbot to save into a saved data file of tasks."},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"    public String getSavingString() {"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        return \"DEADLINE\" + super.getSavingString() + SEPARATOR"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\")) + \"\\n\";"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":44}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":" * The EventTask class encapsulates information and methods about a Event Task"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":" * and inherits functionality from the Task class."},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"public class EventTask extends Task {"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    private static final String SEPARATOR \u003d \"|\";"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    private LocalDateTime date;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a new Event Task."},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"     * @param taskName Name of the new Event Task."},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"     * @param date Date of the new Event Task."},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public EventTask(String taskName, LocalDateTime date) {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        super(taskName);"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"     * Returns a string representation of a Event task for the user."},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"     * @return Type of task, status, followed by the name of Event task and date the task will occur."},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"        return \"[E]\" + super.toString() + \" (at: \""},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy hh.mm a\")) + \")\";"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"     * Returns a string representation in the format of how the Event task should be saved in the data file."},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"     * @return String for chatbot to save into a saved data file of tasks."},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"    public String getSavingString() {"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        return \"EVENT\" + super.getSavingString() + SEPARATOR"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\")) + \"\\n\";"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":44}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"    private static final String SEPARATOR \u003d \"|\";"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"    protected String taskName;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"     * Create and initialize a Task."},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"     * @param taskName The name of the task the user wishes to add."},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"    public Task (String taskName) {"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"        this.taskName \u003d taskName;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"        this.isDone \u003d false;"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    public String getTaskName() {"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"        return this.taskName;"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"    public void markDone () {"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        this.isDone \u003d true;"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    public String toString() {"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"        String status \u003d this.isDone ? \"[X]\" : \"[  ]\";"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        return status + \" \" + taskName;"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"    public String getSavingString() {"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        return SEPARATOR + (isDone ? 1 : 0) + SEPARATOR + taskName;"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":36}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":" * The TodoTask class encapsulates information and methods about a Todo Task"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":" * and inherits functionality from the Task class."},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":" */"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"public class TodoTask extends Task {"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    public TodoTask(String taskName) {"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"        super(taskName);"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"     * Returns a string representation of a Todo task for the user."},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"     * @return Type of task, status, followed by the name of Todo task."},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"     * Returns a string representation in the format of how the Todo task should be saved in the data file."},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"     * @return String for chatbot to save into a saved data file of tasks."},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    public String getSavingString() {"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"        return \"TODO\" + super.getSavingString() + \"\\n\";"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":29}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"\u003c?import javafx.geometry.*?\u003e"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"\u003c?import javafx.scene.image.*?\u003e"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"        \u003cLabel fx:id\u003d\"dialog\" contentDisplay\u003d\"CENTER\" maxHeight\u003d\"1.7976931348623157E308\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"60.0\" fitWidth\u003d\"60.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"        \u003cInsets bottom\u003d\"0.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"30.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"yienyoong":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"\u003c?import javafx.scene.control.*?\u003e"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"\u003c?import javafx.scene.layout.*?\u003e"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"700.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"    \u003cchildren\u003e"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutX\u003d\"12.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"298.0\" AnchorPane.bottomAnchor\u003d\"5.0\" /\u003e"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"314.0\" AnchorPane.bottomAnchor\u003d\"5.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutX\u003d\"12.0\" layoutY\u003d\"12.0\" prefHeight\u003d\"636.0\" prefWidth\u003d\"377.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"            \u003ccontent\u003e"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"652.0\" prefWidth\u003d\"358.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"            \u003c/content\u003e"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"    \u003c/children\u003e"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"yienyoong":16}},{"path":"src/test/data/storage_test.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"DEADLINE|0|test correctly formatted DeadlineCmd already in list|2020-01-01 1800"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":"DEADLINE|0|test correctly formatted DeadlineCmd|2020-01-01 1800"}],"authorContributionMap":{"yienyoong":2}},{"path":"src/test/java/duke/TasklistTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import duke.task.EventTask;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import duke.task.TodoTask;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"public class TasklistTest {"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    public void addTasks_Tasks_success() {"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"        TaskList tl \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"        tl.add(new TodoTask(\"a\"));"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(\"2020-01-01 1800\", dtf);"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        DeadlineTask dlTask \u003d new DeadlineTask(\"test tasklist deadline\", ldt);"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        EventTask evTask \u003d new EventTask(\"test tasklist event\", ldt);"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        tl.add(dlTask);"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        tl.add(evTask);"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"        assertEquals(3, tl.getSize());"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"    public void deleteTasks_TaskListWithTasks_success() {"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        TaskList tl \u003d new TaskList();"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"        tl.add(new TodoTask(\"a\"));"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(\"2020-01-01 1800\", dtf);"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"        DeadlineTask dlTask \u003d new DeadlineTask(\"test tasklist deadline\", ldt);"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":"        EventTask evTask \u003d new EventTask(\"test tasklist event\", ldt);"},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"        tl.add(dlTask);"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"        tl.add(evTask);"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        tl.removeIndex(0);"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        assertEquals(2, tl.getSize());"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":42}},{"path":"src/test/java/duke/command/DeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.command;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"import duke.DukeException;"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"import duke.StorageStub;"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"import duke.TaskList;"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"import duke.Ui;"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"import duke.task.DeadlineTask;"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":"public class DeadlineCommandTest {"},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"    public void run_wronglyFormattedDeadlineCommand1_exceptionThrown() {"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        DeadlineCommand dlCmd \u003d new DeadlineCommand(\"deadline wronginput\", new Ui());"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"            dlCmd.run(new StorageStub(), new TaskList());"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        });"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":28,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"yienyoong"},"content":"    public void run_wronglyFormattedDeadlineCommand2_exceptionThrown() {"},{"lineNumber":30,"author":{"gitId":"yienyoong"},"content":"        String testName \u003d \"deadline testWronglyFormatted DeadlineCmd /at 2020-01-01 1800\";"},{"lineNumber":31,"author":{"gitId":"yienyoong"},"content":"        DeadlineCommand dlCmd \u003d new DeadlineCommand(testName, new Ui());"},{"lineNumber":32,"author":{"gitId":"yienyoong"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":33,"author":{"gitId":"yienyoong"},"content":"            dlCmd.run(new StorageStub(), new TaskList());"},{"lineNumber":34,"author":{"gitId":"yienyoong"},"content":"        });"},{"lineNumber":35,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":37,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"yienyoong"},"content":"    public void run_wronglyFormattedDeadlineCommand3_exceptionThrown() {"},{"lineNumber":39,"author":{"gitId":"yienyoong"},"content":"        String testName \u003d \"deadline testWronglyFormatted DeadlineCmd /by 2020-01-01 1870\";"},{"lineNumber":40,"author":{"gitId":"yienyoong"},"content":"        DeadlineCommand dlCmd \u003d new DeadlineCommand(testName, new Ui());"},{"lineNumber":41,"author":{"gitId":"yienyoong"},"content":"        assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":42,"author":{"gitId":"yienyoong"},"content":"            dlCmd.run(new StorageStub(), new TaskList());"},{"lineNumber":43,"author":{"gitId":"yienyoong"},"content":"        });"},{"lineNumber":44,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":46,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"yienyoong"},"content":"    public void run_correctlyFormattedDeadlineCommand_exceptionThrown() throws DukeException, IOException {"},{"lineNumber":48,"author":{"gitId":"yienyoong"},"content":"        String testName \u003d \"deadline test correctly formatted DeadlineCmd /by 2020-01-01 1800\";"},{"lineNumber":49,"author":{"gitId":"yienyoong"},"content":"        DeadlineCommand dlCmd \u003d new DeadlineCommand(testName, new Ui());"},{"lineNumber":50,"author":{"gitId":"yienyoong"},"content":"        TaskList tl \u003d new TaskList();"},{"lineNumber":51,"author":{"gitId":"yienyoong"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":52,"author":{"gitId":"yienyoong"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(\"2020-01-01 1800\", dtf);"},{"lineNumber":53,"author":{"gitId":"yienyoong"},"content":"        DeadlineTask dlTask \u003d new DeadlineTask(\"test correctly formatted DeadlineCmd already in list\", ldt);"},{"lineNumber":54,"author":{"gitId":"yienyoong"},"content":"        tl.add(dlTask); // tasklist now holds only 1 deadline command"},{"lineNumber":55,"author":{"gitId":"yienyoong"},"content":"        dlCmd.run(new StorageStub(), tl); // adding another deadline command to tasklist"},{"lineNumber":56,"author":{"gitId":"yienyoong"},"content":"        assertEquals(2, tl.getSize());"},{"lineNumber":57,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":58}},{"path":"src/test/java/duke/task/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"import java.time.LocalDateTime;"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"public class DeadlineTaskTest {"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"    public void getSavingString_undoneDeadlineTasks_success() {"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":14,"author":{"gitId":"yienyoong"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(\"2020-01-01 1800\", dtf);"},{"lineNumber":15,"author":{"gitId":"yienyoong"},"content":"        DeadlineTask dlTask \u003d new DeadlineTask(\"test undone Deadline\", ldt);"},{"lineNumber":16,"author":{"gitId":"yienyoong"},"content":"        assertEquals(\"DEADLINE|0|test undone Deadline|2020-01-01 1800\\n\", dlTask.getSavingString());"},{"lineNumber":17,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"yienyoong"},"content":""},{"lineNumber":19,"author":{"gitId":"yienyoong"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"yienyoong"},"content":"    public void getSavingString_doneDeadlineTasks_success() {"},{"lineNumber":21,"author":{"gitId":"yienyoong"},"content":"        DateTimeFormatter dtf \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HHmm\");"},{"lineNumber":22,"author":{"gitId":"yienyoong"},"content":"        LocalDateTime ldt \u003d LocalDateTime.parse(\"2020-01-01 1800\", dtf);"},{"lineNumber":23,"author":{"gitId":"yienyoong"},"content":"        DeadlineTask dlTask \u003d new DeadlineTask(\"test done Deadline\", ldt);"},{"lineNumber":24,"author":{"gitId":"yienyoong"},"content":"        dlTask.markDone();"},{"lineNumber":25,"author":{"gitId":"yienyoong"},"content":"        assertEquals(\"DEADLINE|1|test done Deadline|2020-01-01 1800\\n\", dlTask.getSavingString());"},{"lineNumber":26,"author":{"gitId":"yienyoong"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"yienyoong"},"content":"}"}],"authorContributionMap":{"yienyoong":27}},{"path":"text-ui-test/data/saved_task_list.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"TODO|0|read book"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":"DEADLINE|1|return book|2019-10-15 1800"},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"TODO|1|borrow book"}],"authorContributionMap":{"yienyoong":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yienyoong"},"content":"todo read book"},{"lineNumber":2,"author":{"gitId":"yienyoong"},"content":"deadline return book /by 2019-10-15 1800"},{"lineNumber":3,"author":{"gitId":"yienyoong"},"content":"event project meeting /at 2021-01-24 2300"},{"lineNumber":4,"author":{"gitId":"yienyoong"},"content":"list"},{"lineNumber":5,"author":{"gitId":"yienyoong"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"yienyoong"},"content":"list"},{"lineNumber":7,"author":{"gitId":"yienyoong"},"content":"todo borrow book"},{"lineNumber":8,"author":{"gitId":"yienyoong"},"content":"list"},{"lineNumber":9,"author":{"gitId":"yienyoong"},"content":"done 4"},{"lineNumber":10,"author":{"gitId":"yienyoong"},"content":"list"},{"lineNumber":11,"author":{"gitId":"yienyoong"},"content":"delete 3"},{"lineNumber":12,"author":{"gitId":"yienyoong"},"content":"list"},{"lineNumber":13,"author":{"gitId":"yienyoong"},"content":"bye"}],"authorContributionMap":{"yienyoong":13}}]
