[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"# main.java.duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"1. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run main.java.duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"CSmortal":2,"-":21}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * Represents all types of commands in Duke"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, INVALID, FIND"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":8}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":" * A Task that has a time representing the deadline."},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"public class Deadline extends Task {"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"    private final LocalDate deadline;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     * Creates a Deadline"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"     * @param description the Task\u0027s name"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"     * @param deadline the Task\u0027s deadline"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    public Deadline(String description, LocalDate deadline) {"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"        super(description);"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     * Creates a Deadline."},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"     * @param description the Task\u0027s name"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"     * @param deadline the Task\u0027s deadline"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"     * @param isDone status of Task\u0027s completion"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    public Deadline(String description, LocalDate deadline, boolean isDone) {"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"        super(description, isDone);"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"     * Formats a Deadline for storing in the file."},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"     * @return a String representation of the Deadline"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"        return \"D | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \" +"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"                this.deadline.format(DateTimeFormatter.ISO_LOCAL_DATE);"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"     * Marks a Deadline as done."},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"     * @return a new Deadline that is considered done"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"    public Deadline markAsDone() {"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"        return new Deadline(description, deadline, true);"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"        return \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" +"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"                deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"    public LocalDate getDeadline() {"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"        return deadline;"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"            return true;"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"            return obj instanceof Deadline \u0026\u0026 description.equals(((Deadline) obj).getDescription())"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"                    \u0026\u0026 deadline.equals(((Deadline) obj).getDeadline()) \u0026\u0026 isDone \u003d\u003d ((Deadline) obj).isDone();"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":74}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.util.ListIterator;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import java.util.Scanner;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":" * Represents the highest level code responsible for Duke\u0027s operations."},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    public static void main(String[] args) {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        TaskList taskList \u003d new TaskList();"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        Storage storage \u003d new Storage(Paths.get(\"data\", \"duke.txt\"), Paths.get(\"data\"));"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        taskList \u003d new TaskList(storage.readFromFile());"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"        Ui.showInitUi();"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"        while (sc.hasNextLine()) {"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"            try {"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"                DukeCommand dukeCommand \u003d Parser.parseCommand(sc.nextLine());"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"                if (dukeCommand.getCommand() \u003d\u003d Command.BYE) {"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"                    Ui.showExitUi();"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"                    sc.close();"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"                    return;"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"                } else if (dukeCommand.getCommand() \u003d\u003d Command.DELETE) {"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"                    Integer index \u003d Integer.parseInt(dukeCommand.getDetails()) - 1;"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"                    if (index \u003e\u003d taskList.getTasks().size()) {"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"                        throw new DukeException(\"No such task in the list\");"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"                    Task removedTask \u003d taskList.delete(Integer.parseInt(dukeCommand.getDetails()) - 1);"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"                    storage.writeToFile(taskList);"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"                    Ui.showSuccessfulDelete(taskList.getTasks().size(), removedTask);"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"                } else if (dukeCommand.getCommand() \u003d\u003d Command.LIST) {"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"                    Ui.showList(taskList);"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"                } else if (dukeCommand.getCommand() \u003d\u003d Command.DONE) {"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"                    Integer index \u003d Integer.parseInt(dukeCommand.getDetails()) - 1;"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"                    if (index \u003e\u003d taskList.getTasks().size()) {"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"                        throw new DukeException(\"No such task in the list\");"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"                    taskList.markAsDone(index);"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"                    storage.writeToFile(taskList);"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"                    Ui.showSuccessfulDone(taskList.get(index));"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"                } else if (dukeCommand.getCommand() \u003d\u003d Command.INVALID) {"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-()\");"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"                } else if (dukeCommand.getCommand() \u003d\u003d Command.FIND) {"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"                    if (dukeCommand.getDetails().length() \u003d\u003d 0) {"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"                        throw new DukeException(\"☹ OOPS!!! Search keyword cannot be empty\");"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"                    ListIterator\u003cTask\u003e taskIter \u003d taskList.getTasks().listIterator();"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"                    String keyword \u003d dukeCommand.getDetails();"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"                    TaskList matchedTasks \u003d new TaskList();"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"                    while (taskIter.hasNext()) {"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"                        Task curr \u003d taskIter.next();"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"                        if (curr.getDescription().contains(keyword)) {"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"                            matchedTasks.add(curr);"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"                        }"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"                    Ui.showMatchedTasks(matchedTasks);"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"                } else {"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"                    Task newTask \u003d Parser.parseRemainder(dukeCommand.getCommand(), dukeCommand.getDetails());"},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":"                    if (newTask \u003d\u003d null) {"},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"                        throw new DukeException(\"parseRemainder() returned null instead of a new task to add...\");"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"                    taskList.add(newTask);"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"                    storage.writeToFile(taskList);"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"                    Ui.showSuccessfulAdd(taskList.getTasks().size(), newTask);"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"            } catch(DukeException exp) {"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"                Ui.showDukeException(exp);"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"            } catch(Exception err) {"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"                err.printStackTrace();"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":107,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"CSmortal":106,"-":2}},{"path":"src/main/java/duke/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * Represents a Command and more details for that Command."},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public class DukeCommand {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"    private final Command command;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"    private final String details;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"     * Creates a DukeCommand"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     * @param command a Command"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"     * @param details more details relevant to this Command"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    public DukeCommand(Command command, String details) {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"        this.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        this.details \u003d details;"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     * Retrieves the Command in this DukeCommand."},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     * @return the Command"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    public Command getCommand() {"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"        return command;"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"     * Retrieves the details in this DukeCommand."},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"     * @return the details stored as a String"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"    public String getDetails() {"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"        return details;"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":38}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * Represents an Exception raised in Duke."},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"    // private final String err;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"     * Creates a DukeException"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"     * @param err the Exception\u0027s message"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    public DukeException(String err) {"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"        super(err);"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"     * String representation of a DukeException"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"     * @return a String"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"        return this.getMessage();"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":27}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":" * A Task that has both a time and date."},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"public class Event extends Task {"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"    private final LocalDate date;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"    private final String timeRange;"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"     * Creates a Event"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"     * @param description name of the Event"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"     * @param date the date of the Event"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"     * @param timeRange the time of the Event"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    public Event(String description, LocalDate date, String timeRange) {"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"        this.date \u003d date;"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"        this.timeRange \u003d timeRange;"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"    public Event(String description, LocalDate date, String timeRange, boolean isDone) {"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"        super(description, isDone);"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"        this.date \u003d date;"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        this.timeRange \u003d timeRange;"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"     * Formats a Event for storing in the file."},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"     * @return a String representation of the Event"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"        return \"E | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \" +"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"                date.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" \" + timeRange;"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"     * Marks a Event as done."},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"     * @return a new Event that is considered done"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"    public Event markAsDone() {"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"        return new Event(description, date, timeRange, true);"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"        return \"[E][\" + getStatusIcon() + \"] \" + description + \" (at: \""},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \" + timeRange + \")\";"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    public LocalDate getDate() {"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"        return date;"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"    public String getTimeRange() {"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"        return timeRange;"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"            return true;"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"            return obj instanceof Event \u0026\u0026 description.equals(((Event) obj).getDescription())"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"                    \u0026\u0026 date.equals(((Event) obj).getDate()) \u0026\u0026 timeRange.equals(((Event) obj).getTimeRange())"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"                            \u0026\u0026 isDone \u003d\u003d ((Event) obj).isDone();"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":77}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":" * Parser is involved with parsing user commands in Duke."},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"public class Parser {"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"     * Parses user input to create a DukeCommand"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"     * @param input User input to be parsed."},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"     * @return a DukeCommand that contains a Command and a String"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"     * containing more details"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    public static DukeCommand parseCommand(String input) throws Exception {"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"            String[] params \u003d input.split(\" \", 2);"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"            if (input.equals(\"bye\")) {"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.BYE, \"\");"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"            } else if (params[0].equals(\"delete\")) {"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"                if (params.length \u003d\u003d 1) {"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"delete is missing 1 argument\");"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.DELETE, params[1]);"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"            } else if (input.equals(\"list\")) {"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"                if (params.length \u003d\u003d 1) {"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"list is missing 1 argument\");"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.LIST, \"\");"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"            } else if (params[0].equals(\"done\")) {"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"                if (params.length \u003d\u003d 1) {"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"done is missing 1 argument\");"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.DONE, params[1]);"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"            } else if (params[0].equals(\"todo\")) {"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"                if (params.length \u003d\u003d 1) {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"todo is missing 1 argument\");"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.TODO, params[1]);"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"            } else if (params[0].equals(\"deadline\")) {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"                if (params.length \u003d\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"Missing arguments for deadline\");"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.DEADLINE, params[1]);"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"            } else if (params[0].equals(\"event\")) {"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"                if (params.length \u003d\u003d 1) {"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"Missing arguments for event\");"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.EVENT, params[1]);"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"            } else if (params[0].equals(\"find\")) {"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"                if (params.length \u003d\u003d 1) {"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"Missing keyword for find\");"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.FIND, params[1]);"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"                return new DukeCommand(Command.INVALID, \"\");"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"            throw ex;"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"     * Parses a DukeCommand further if necessary."},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":"     * @param command a Command"},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"     * @param details Additional details on the command"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"     * @return the Task the user intends to create"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"    public static Task parseRemainder(Command command, String details) {"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"            if (command \u003d\u003d Command.TODO) {"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":"                if (details.length() \u003d\u003d 0) {"},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a todo cannot be empty\");"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"                Pattern pt1 \u003d Pattern.compile(\"\\\\w+\");"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"                Pattern pt2 \u003d Pattern.compile(\"\\\\D+\");"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"                Matcher mt1 \u003d pt1.matcher(details);"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"                Matcher mt2 \u003d pt2.matcher(details);"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"                if (!mt1.find() || !mt2.find()) {"},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! The description of a todo should have at least one non digit word character\");"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":107,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":108,"author":{"gitId":"CSmortal"},"content":"                return new Todo(details);"},{"lineNumber":109,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":110,"author":{"gitId":"CSmortal"},"content":"            } else if (command \u003d\u003d Command.DEADLINE) {"},{"lineNumber":111,"author":{"gitId":"CSmortal"},"content":"                if (details.length() \u003d\u003d 0) {"},{"lineNumber":112,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of a deadline cannot be empty\");"},{"lineNumber":113,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":114,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":115,"author":{"gitId":"CSmortal"},"content":"                String[] deadlineParams \u003d details.split(\" /by \");"},{"lineNumber":116,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":117,"author":{"gitId":"CSmortal"},"content":"                if (deadlineParams.length \u003d\u003d 1) {"},{"lineNumber":118,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"deadline not given for this Deadline!\");"},{"lineNumber":119,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":120,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":121,"author":{"gitId":"CSmortal"},"content":"                Pattern pt \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"},{"lineNumber":122,"author":{"gitId":"CSmortal"},"content":"                Matcher mt \u003d pt.matcher(deadlineParams[1]);"},{"lineNumber":123,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":124,"author":{"gitId":"CSmortal"},"content":"                if (!mt.find()) {"},{"lineNumber":125,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD\u0027 after description\");"},{"lineNumber":126,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":127,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":128,"author":{"gitId":"CSmortal"},"content":"                return new Deadline(deadlineParams[0], LocalDate.parse(deadlineParams[1]));"},{"lineNumber":129,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":130,"author":{"gitId":"CSmortal"},"content":"            } else {"},{"lineNumber":131,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":132,"author":{"gitId":"CSmortal"},"content":"                if (details.length() \u003d\u003d 0) {"},{"lineNumber":133,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"☹ OOPS!!! The description of an event cannot be empty\");"},{"lineNumber":134,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":135,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":136,"author":{"gitId":"CSmortal"},"content":"                String[] eventParams \u003d details.split(\" /at \");"},{"lineNumber":137,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":138,"author":{"gitId":"CSmortal"},"content":"                if (eventParams.length \u003d\u003d 1) {"},{"lineNumber":139,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"no date and time given for this Event!\");"},{"lineNumber":140,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":141,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":142,"author":{"gitId":"CSmortal"},"content":"                String[] timeParams \u003d eventParams[1].split(\" \");"},{"lineNumber":143,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":144,"author":{"gitId":"CSmortal"},"content":"                if (timeParams.length \u003d\u003d 1) {"},{"lineNumber":145,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"time of Event was not specified!\");"},{"lineNumber":146,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":147,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":148,"author":{"gitId":"CSmortal"},"content":"                Pattern datePt \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"},{"lineNumber":149,"author":{"gitId":"CSmortal"},"content":"                Matcher dateMt \u003d datePt.matcher(timeParams[0]); // timeParams[0] refers to the date"},{"lineNumber":150,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":151,"author":{"gitId":"CSmortal"},"content":"                if (!dateMt.find()) {"},{"lineNumber":152,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD {time range}\u0027 after description\");"},{"lineNumber":153,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":154,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":155,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":156,"author":{"gitId":"CSmortal"},"content":"                Pattern timePt \u003d Pattern.compile(\"\\\\d{1,2}-\\\\d{1,2}p?a?m\");"},{"lineNumber":157,"author":{"gitId":"CSmortal"},"content":"                Matcher timeMt \u003d timePt.matcher(timeParams[1]); // timeParams[1] refers to the time"},{"lineNumber":158,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":159,"author":{"gitId":"CSmortal"},"content":"                if (!timeMt.find()) {"},{"lineNumber":160,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! Please enter a valid time range in this format \\\"{start}-{end}\\\"\" +"},{"lineNumber":161,"author":{"gitId":"CSmortal"},"content":"                            \" and include am/pm after\");"},{"lineNumber":162,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":163,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":164,"author":{"gitId":"CSmortal"},"content":"                return new Event(eventParams[0], LocalDate.parse(timeParams[0]), timeParams[1]);"},{"lineNumber":165,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":166,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":167,"author":{"gitId":"CSmortal"},"content":"        } catch(DukeException err) {"},{"lineNumber":168,"author":{"gitId":"CSmortal"},"content":"            Ui.showDukeException(err);"},{"lineNumber":169,"author":{"gitId":"CSmortal"},"content":"        } catch(Exception err) {"},{"lineNumber":170,"author":{"gitId":"CSmortal"},"content":"            err.printStackTrace();"},{"lineNumber":171,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":172,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":173,"author":{"gitId":"CSmortal"},"content":"        return null;"},{"lineNumber":174,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":175,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":176,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":176}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.io.BufferedWriter;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":" * Handles read and write operations for Task objects in Duke."},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"public class Storage {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    private final Path filePath;"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    private final Path dirPath;"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"     * Creates a Storage object"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     * @param filePath relative file path to where the data is stored"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     * @param dirPath relative directory path"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    public Storage(Path filePath, Path dirPath) {"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"        this.dirPath \u003d dirPath;"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"     * Writes data (Task objects) to the file"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"     * @param taskList the current list of tasks"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    public void writeToFile(TaskList taskList) {"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"//        String home \u003d System.getProperty(\"user.home\");"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"//        Path dirPath \u003d Paths.get(home, \"data\");"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"//        Path filePath \u003d Paths.get(home,\"data\", \"duke.txt\");"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"        List\u003cTask\u003e myList \u003d taskList.getTasks();"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"            boolean dirExists \u003d Files.exists(dirPath);"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"            boolean fileExists \u003d Files.exists(filePath);"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"            if (!dirExists) {"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"                Files.createDirectory(dirPath);"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"            if (!fileExists) {"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"                Files.createFile(filePath);"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"            BufferedWriter bfWriter \u003d Files.newBufferedWriter(filePath);"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"            for (Task task : myList) {"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"                bfWriter.write(task.fileFormat() + \"\\n\");"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"            bfWriter.close();"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"        } catch(IOException err) {"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"            err.printStackTrace();"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"     * Reads data (Task objects) from the file"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"     * @return the list of Task objects stored in the file"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"    public List\u003cTask\u003e readFromFile(){"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"        List\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"        final String DELIMITER \u003d \" \\\\| \";"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"            boolean dirExists \u003d Files.exists(dirPath);"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"            boolean fileExists \u003d Files.exists(filePath);"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"            if (!dirExists) {"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"                Files.createDirectory(dirPath);"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"            if (!fileExists) {"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"                Files.createFile(filePath);"},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"            Task task \u003d null;"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"            BufferedReader br \u003d new BufferedReader(new FileReader(filePath.toString()));"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":"            String input \u003d br.readLine();"},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"            while (input !\u003d null) {"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"                String[] inputArr \u003d input.split(DELIMITER);"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":"                try {"},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"                    switch (inputArr[0]) {"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"                        case \"T\":"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":"                            task \u003d new Todo(inputArr[2]);"},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"                            break;"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"                        case \"D\":"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"                            task \u003d new Deadline(inputArr[2], LocalDate.parse(inputArr[3]));"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"                            break;"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"                        case \"E\":"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":"                            String[] timeParams \u003d inputArr[3].split(\" \", 2);"},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"                            task \u003d new Event(inputArr[2], LocalDate.parse(timeParams[0]), timeParams[1]);"},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"                            break;"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":107,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":108,"author":{"gitId":"CSmortal"},"content":"                    if (Integer.parseInt(inputArr[1]) \u003d\u003d 1) {"},{"lineNumber":109,"author":{"gitId":"CSmortal"},"content":"                        tasksList.add(task.markAsDone());"},{"lineNumber":110,"author":{"gitId":"CSmortal"},"content":"                    } else {"},{"lineNumber":111,"author":{"gitId":"CSmortal"},"content":"                        tasksList.add(task);"},{"lineNumber":112,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":113,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":114,"author":{"gitId":"CSmortal"},"content":"                } catch (Exception e) {"},{"lineNumber":115,"author":{"gitId":"CSmortal"},"content":"                    System.out.println(e.getMessage());"},{"lineNumber":116,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":117,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":118,"author":{"gitId":"CSmortal"},"content":"                input \u003d br.readLine();"},{"lineNumber":119,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"CSmortal"},"content":"            br.close();"},{"lineNumber":121,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":122,"author":{"gitId":"CSmortal"},"content":"        } catch (IOException e) {"},{"lineNumber":123,"author":{"gitId":"CSmortal"},"content":"            e.printStackTrace();"},{"lineNumber":124,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":126,"author":{"gitId":"CSmortal"},"content":"        return tasksList;"},{"lineNumber":127,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":128}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * Parent class of Todo, Event, Deadline"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"     * Creates a Task."},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     * @param description"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    public Task(String description) {"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"        this.description \u003d description;"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"        this.isDone \u003d false;"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"        this.description \u003d description;"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"        return this.getClass().toString() + \" | \" + (isDone ? \"1 | \" : \"0 | \") + this.description;"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"    public String getStatusIcon() {"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"    public Task markAsDone() {"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"        return new Task(description, true);"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"        return description;"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"    public String getDescription() { return description; }"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"    public boolean isDone() {"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"        return isDone;"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":47}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":" * Represents a list of Task objects in a more abstract way."},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     * Creates a TaskList."},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"     * @param tasks the tasks so far"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     * Creates an empty TaskList."},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    public TaskList() {"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"    public List\u003cTask\u003e getTasks() {"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        return tasks;"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"    public Task get(int index) { return tasks.get(index); }"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"    public void add(Task task) {"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"        tasks.add(task);"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"    public Task delete(int index) {"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"        return tasks.remove(index);"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"     * Marks the Task at the given index as done."},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"     * @param index the index of the finished Task."},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    public void markAsDone(int index) {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"        tasks.set(index, tasks.get(index).markAsDone());"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":51}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * The simplest type of Task with no date and time."},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public class Todo extends Task {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"     * Creates a Todo"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"     * @param description the name of the Todo"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    public Todo(String description) {"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"        super(description);"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        super(description, isDone);"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     * Marks a Todo as done."},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     * @return a new Todo that is considered done"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"    public Todo markAsDone() {"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"        return new Todo(description, true);"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"     * Formats a Todo for storing in the file."},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"     * @return a String representation of the Todo"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"        return \"T | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description;"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        return \"[T][\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"            return true;"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"            return obj instanceof Todo \u0026\u0026 description.equals(((Todo) obj).getDescription())"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"                    \u0026\u0026 isDone \u003d\u003d ((Todo) obj).isDone();"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":54}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.ListIterator;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":" * Aids Duke in displaying messages on its UI"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"    public static final String INDENT \u003d \"         \";"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"    public static final String HORIZ_SEP \u003d INDENT + \"________________________________________________\";"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"    public static final String FILE_PATH \u003d \"./data/duke.txt\";"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    private static final String greeting \u003d INDENT + \" Hello! I\u0027m Duke\\n\" + INDENT + \" What can I do for you?\\n\";"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    private static String farewell \u003d INDENT + \" Bye. Hope to see you again soon!\\n\";"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"     * Displays the message when Duke starts up."},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    public static void showInitUi() {"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\" + greeting + HORIZ_SEP + \"\\n\");"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     * Displays the message when Duke exits."},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    public static void showExitUi() {"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\" + farewell + HORIZ_SEP + \"\\n\");"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"     * Displays the current list of Task objects"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"     * @param taskList the current list of tasks"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"    public static void showList(TaskList taskList) {"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"        ListIterator\u003cTask\u003e taskIter \u003d taskList.getTasks().listIterator();"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP);"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \" Here are the tasks in your list:\");"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"        while (taskIter.hasNext()) {"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"            Task curr \u003d taskIter.next();"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"            System.out.println(INDENT + \" \" + String.valueOf(taskIter.nextIndex()) + \".\" + curr);"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\");"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"     * Displays the message when a Task has been added."},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"     * @param numTasks current number of tasks in the list"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"     * @param relevantTask the newly added Task"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"    public static void showSuccessfulAdd(int numTasks, Task relevantTask) {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\" +  INDENT + \" Got it. I\u0027ve added this task: \");"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \"   \" + relevantTask);"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \" Now you have \" + numTasks + \" tasks in the list.\");"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\");"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"     * Displays the message when a Task is marked as done."},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"     * @param relevantTask the Task that has just been done"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"    public static void showSuccessfulDone(Task relevantTask) {"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\" + INDENT + \" Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \"   \" + relevantTask);"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\");"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"     * Displays the message when a Task is deleted"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"     * @param numTasks current number of tasks in the list"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"     * @param relevantTask the deleted Task"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"    public static void showSuccessfulDelete(int numTasks, Task relevantTask) {"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\" +  INDENT + \" Noted. I\u0027ve removed this task \");"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \"   \" + relevantTask);"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \" Now you have \" + numTasks + \" tasks in the list.\");"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\");"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"    public static void showDukeException(DukeException ex) {"},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP);"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \" \" + ex.getMessage());"},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\");"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"    public static void showMatchedTasks(TaskList taskList) {"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"        ListIterator\u003cTask\u003e taskIter \u003d taskList.getTasks().listIterator();"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP);"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"        System.out.println(INDENT + \" Here are the matching tasks in your list:\");"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":"        while (taskIter.hasNext()) {"},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"            Task curr \u003d taskIter.next();"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"            System.out.println(INDENT + \" \" + String.valueOf(taskIter.nextIndex()) + \".\" + curr);"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"        System.out.println(HORIZ_SEP + \"\\n\");"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":104}},{"path":"src/test/java/duke/DukeExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import org.junit.jupiter.params.ParameterizedTest;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import org.junit.jupiter.params.provider.ValueSource;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"public class DukeExceptionTest {"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"    @ParameterizedTest"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"    @ValueSource(strings \u003d {\"delete\", \"list\", \"done\", \"todo\", \"deadline\", \"event\", \"find\"})"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    public void dukeException_emptyDeleteCommand_caught(String input) {"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"        Exception ex \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"            Parser.parseCommand(input);"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"        });"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        switch (input) {"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"        case \"delete\" -\u003e assertEquals(ex.getMessage(), \"delete is missing 1 argument\");"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        case \"list\" -\u003e assertEquals(ex.getMessage(), \"list is missing 1 argument\");"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"        case \"done\" -\u003e assertEquals(ex.getMessage(), \"done is missing 1 argument\");"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        case \"todo\" -\u003e assertEquals(ex.getMessage(), \"todo is missing 1 argument\");"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"        case \"deadline\" -\u003e assertEquals(ex.getMessage(), \"Missing arguments for deadline\");"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"        case \"event\" -\u003e assertEquals(ex.getMessage(), \"Missing arguments for event\");"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"        case \"find\" -\u003e assertEquals(ex.getMessage(), \"Missing keyword for find\");"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":29}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"public class ParserTest {"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForByeTest() {"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"            Command c \u003d Parser.parseCommand(\"bye\").getCommand();"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c, Command.BYE);"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForDoneTest() {"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"            Command c \u003d Parser.parseCommand(\"done 1\").getCommand();"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c, Command.DONE);"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForToDoTest() {"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"            DukeCommand c \u003d Parser.parseCommand(\"todo todo1\");"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getCommand(), Command.TODO);"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getDetails(), \"todo1\");"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"            assertEquals(Parser.parseRemainder(c.getCommand(), c.getDetails()),"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"                    new Todo(\"todo1\"));"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForDeadlineTest() {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"            DukeCommand c \u003d Parser.parseCommand(\"deadline deadline1 /by 2020-04-13\");"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getCommand(), Command.DEADLINE);"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getDetails(), \"deadline1 /by 2020-04-13\");"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"            assertEquals(Parser.parseRemainder(c.getCommand(), c.getDetails()),"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"                    new Deadline(\"deadline1\", LocalDate.parse(\"2020-04-13\")));"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForEVENTTest() {"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"            DukeCommand c \u003d Parser.parseCommand(\"event event1 /at 2020-04-13 2-4pm\");"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getCommand(), Command.EVENT);"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getDetails(), \"event1 /at 2020-04-13 2-4pm\");"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"            assertEquals(Parser.parseRemainder(c.getCommand(), c.getDetails()),"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"                    new Event(\"event1\", LocalDate.parse(\"2020-04-13\"), \"2-4pm\"));"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForListTest() {"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"            Command c \u003d Parser.parseCommand(\"list\").getCommand();"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c, Command.LIST);"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"    public void parseDeadlineTest() {"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"            DukeCommand dukeCommand \u003d Parser.parseCommand(\"deadline deadline1 /by 2021-01-20\");"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":"            Task deadline \u003d Parser.parseRemainder(dukeCommand.getCommand(), dukeCommand.getDetails());"},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"            assertEquals(deadline.toString(), new Deadline(\"deadline1\", LocalDate.parse(\"2021-01-20\")).toString());"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":"    public void parseEventTest() {"},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"            DukeCommand dukeCommand \u003d Parser.parseCommand(\"event event1 /at 2021-01-20 2-4pm\");"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":"            Task event \u003d Parser.parseRemainder(dukeCommand.getCommand(), dukeCommand.getDetails());"},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"            assertEquals(event.toString(), new Event(\"event1\", LocalDate.parse(\"2021-01-20\"), \"2-4pm\").toString());"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":105}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"list"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":"todo todo1"},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"deadline deadline1 /by 2020-04-13"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"deadline test1 /by 2020-04-1"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"deadline /by 2020-04-13"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"event event1 /at 2020-04-13 2-4pm"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"event test2 /at 2020-04-1 2-4pm"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"list"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"done 1"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"delete 1"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"list"}],"authorContributionMap":{"CSmortal":11}}]
