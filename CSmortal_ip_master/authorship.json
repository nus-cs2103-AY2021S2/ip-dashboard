[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"# main.java.duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"1. After that, locate the `src/main/java/duke/Duke.java` file, right-click it, and choose `Run main.java.duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"CSmortal":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    testCompile(\"org.junit.jupiter:junit-jupiter-params:5.7.0\")"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":39,"author":{"gitId":"-"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}"},{"lineNumber":47,"author":{"gitId":"-"},"content":""},{"lineNumber":48,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"    mainClassName \u003d \"duke.Launcher\""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"},{"lineNumber":51,"author":{"gitId":"-"},"content":""},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}"},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"-":44,"CSmortal":19}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * Represents all types of commands in Duke"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public enum Command {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"    BYE, LIST, DONE, DELETE, TODO, DEADLINE, EVENT, INVALID, FIND, TAG"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":8}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"     * Creates a DialogBox representing the user\u0027s input into the program."},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"     * @param text the user\u0027s input into the program"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"     * @param img the Image that represents the user"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"     * @return DialogBox"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"        return new DialogBox(text, img);"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"     * Creates a DialogBox representing the program\u0027s response to the user"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"     * @param text the program\u0027s response to the user\u0027s input"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"     * @param img the Image that represents the program Duke"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"     * @return DialogBox"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"        db.flip();"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"        return db;"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":73}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.ListIterator;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.nio.file.Paths;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import task.Task;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import utility.Parser;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import utility.Storage;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"import utility.TaskList;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"import utility.Ui;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":" * Represents the highest level code responsible for Duke\u0027s operations."},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"public class Duke {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    private TaskList taskList;"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    private final Storage storage;"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    Duke() {"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        this.taskList \u003d new TaskList();"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"        this.storage \u003d new Storage(Paths.get(\"data\", \"duke.txt\"), Paths.get(\"data\"));"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"     * Makes changes to the program\u0027s state and returns Duke\u0027s response to the user\u0027s input."},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"     * @param input the String representing the user\u0027s input"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing the program\u0027s response"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    public String run(String input) {"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"            taskList \u003d new TaskList(storage.readFromFile());"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"            DukeCommand dukeCommand \u003d Parser.parseCommand(input);"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"            if (dukeCommand.getCommand() \u003d\u003d Command.BYE) {"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"                return Ui.showExitUi();"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"            } else if (dukeCommand.getCommand() \u003d\u003d Command.DELETE) {"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"                Integer index \u003d Integer.parseInt(dukeCommand.getDetails()) - 1;"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"                assert index \u003e\u003d 0;"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"                if (index \u003e\u003d taskList.getSize()) {"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"No such task in the list\");"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"                Task removedTask \u003d taskList.delete(index);"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"                storage.writeToFile(taskList);"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"                assert removedTask !\u003d null : \"removed task from TaskList is a null\";"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"                return Ui.showSuccessfulDelete(taskList.getSize(), removedTask);"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"            } else if (dukeCommand.getCommand() \u003d\u003d Command.LIST) {"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"                return Ui.showList(taskList);"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"            } else if (dukeCommand.getCommand() \u003d\u003d Command.DONE) {"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"                Integer index \u003d Integer.parseInt(dukeCommand.getDetails()) - 1;"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"                assert index \u003e\u003d 0;"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"                if (index \u003e\u003d taskList.getSize()) {"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"No such task in the list\");"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"                assert taskList.get(index) !\u003d null : \"Task to be completed is a null\";"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"                taskList.markAsDone(index);"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"                storage.writeToFile(taskList);"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"                return Ui.showSuccessfulDone(taskList.get(index));"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"            } else if (dukeCommand.getCommand() \u003d\u003d Command.INVALID) {"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-()\");"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"            } else if (dukeCommand.getCommand() \u003d\u003d Command.FIND) {"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"                if (dukeCommand.getDetails().length() \u003d\u003d 0) {"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! Search keyword cannot be empty\");"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"                ListIterator\u003cTask\u003e taskIter \u003d taskList.getTasks().listIterator();"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"                String keyword \u003d dukeCommand.getDetails();"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"                TaskList matchedTasks \u003d new TaskList();"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"                while (taskIter.hasNext()) {"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"                    Task curr \u003d taskIter.next();"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"                    assert curr !\u003d null : \"The list of tasks contains a null\";"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"                    if (curr.getDescription().contains(keyword)) {"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":"                        matchedTasks.add(curr);"},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"                if (matchedTasks.getSize() \u003d\u003d 0) {"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"                    return Ui.showNoMatchedTasks();"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"                assert matchedTasks.getSize() \u003e 0;"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"                return Ui.showMatchedTasks(matchedTasks);"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"            } else if (dukeCommand.getCommand() \u003d\u003d Command.TAG) {"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"                if (dukeCommand.getDetails().length() \u003d\u003d 0) {"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! tag keyword cannot be empty\");"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"                String[] tagParams \u003d dukeCommand.getDetails().split(\" \", 3);"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":"                String tagMode \u003d tagParams[0];"},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"                String taskDescription \u003d tagParams[1];"},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"                String tag \u003d tagParams[2];"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":"                Tag tagAction;"},{"lineNumber":107,"author":{"gitId":"CSmortal"},"content":"                Task relevantTask \u003d null;"},{"lineNumber":108,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":109,"author":{"gitId":"CSmortal"},"content":"                if (tagMode.equals(\"add\")) {"},{"lineNumber":110,"author":{"gitId":"CSmortal"},"content":"                    tagAction \u003d Tag.ADD;"},{"lineNumber":111,"author":{"gitId":"CSmortal"},"content":"                } else if (tagMode.equals(\"delete\")) {"},{"lineNumber":112,"author":{"gitId":"CSmortal"},"content":"                    tagAction \u003d Tag.DELETE;"},{"lineNumber":113,"author":{"gitId":"CSmortal"},"content":"                } else {"},{"lineNumber":114,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! Duke does not understand what you want to do with tag\");"},{"lineNumber":115,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":116,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":117,"author":{"gitId":"CSmortal"},"content":"                ListIterator\u003cTask\u003e taskIter \u003d taskList.getTasks().listIterator();"},{"lineNumber":118,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":119,"author":{"gitId":"CSmortal"},"content":"                while (taskIter.hasNext()) {"},{"lineNumber":120,"author":{"gitId":"CSmortal"},"content":"                    Task curr \u003d taskIter.next();"},{"lineNumber":121,"author":{"gitId":"CSmortal"},"content":"                    assert curr !\u003d null : \"The list of tasks contains a null\";"},{"lineNumber":122,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":123,"author":{"gitId":"CSmortal"},"content":"                    if (curr.getDescription().equals(taskDescription)) {"},{"lineNumber":124,"author":{"gitId":"CSmortal"},"content":"                        curr.handleTag(tagAction, tag);"},{"lineNumber":125,"author":{"gitId":"CSmortal"},"content":"                        taskIter.set(curr);"},{"lineNumber":126,"author":{"gitId":"CSmortal"},"content":"                        relevantTask \u003d curr;"},{"lineNumber":127,"author":{"gitId":"CSmortal"},"content":"                        break;"},{"lineNumber":128,"author":{"gitId":"CSmortal"},"content":"                    }"},{"lineNumber":129,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":130,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":131,"author":{"gitId":"CSmortal"},"content":"                boolean hasNotFoundRelevantTask \u003d relevantTask \u003d\u003d null;"},{"lineNumber":132,"author":{"gitId":"CSmortal"},"content":"                if (hasNotFoundRelevantTask) {"},{"lineNumber":133,"author":{"gitId":"CSmortal"},"content":"                    throw new DukeException(\"OOPS!!! Cannot find the relevant task!\");"},{"lineNumber":134,"author":{"gitId":"CSmortal"},"content":"                }"},{"lineNumber":135,"author":{"gitId":"CSmortal"},"content":"                storage.writeToFile(taskList);"},{"lineNumber":136,"author":{"gitId":"CSmortal"},"content":"                return Ui.showTagHandling(tagAction, tag, relevantTask);"},{"lineNumber":137,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":138,"author":{"gitId":"CSmortal"},"content":"            } else {"},{"lineNumber":139,"author":{"gitId":"CSmortal"},"content":"                Task newTask \u003d Parser.parseRemainder(dukeCommand.getCommand(), dukeCommand.getDetails());"},{"lineNumber":140,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":141,"author":{"gitId":"CSmortal"},"content":"                taskList.add(newTask);"},{"lineNumber":142,"author":{"gitId":"CSmortal"},"content":"                storage.writeToFile(taskList);"},{"lineNumber":143,"author":{"gitId":"CSmortal"},"content":"                return Ui.showSuccessfulAdd(taskList.getSize(), newTask);"},{"lineNumber":144,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":146,"author":{"gitId":"CSmortal"},"content":"        } catch (DukeException exp) {"},{"lineNumber":147,"author":{"gitId":"CSmortal"},"content":"            return Ui.showDukeException(exp);"},{"lineNumber":148,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception err) {"},{"lineNumber":149,"author":{"gitId":"CSmortal"},"content":"            return Ui.showException(err);"},{"lineNumber":150,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":153,"author":{"gitId":"CSmortal"},"content":"    public String getResponse(String input) {"},{"lineNumber":154,"author":{"gitId":"CSmortal"},"content":"        return run(input);"},{"lineNumber":155,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"CSmortal":154,"-":2}},{"path":"src/main/java/duke/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * Represents a Command and more details for that Command."},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public class DukeCommand {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"    private final Command command;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"    private final String details;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"     * Creates a DukeCommand"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     * @param command a Command"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"     * @param details more details relevant to this Command"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    public DukeCommand(Command command, String details) {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"        this.command \u003d command;"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        this.details \u003d details;"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     * Retrieves the Command in this DukeCommand."},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     * @return the Command"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    public Command getCommand() {"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"        return command;"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"     * Retrieves the details in this DukeCommand."},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"     * @return the details stored as a String"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"    public String getDetails() {"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"        return details;"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":38}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":" * Represents a Exception specific to Duke."},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"    // private final String err;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"     * Creates a DukeException"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"     * @param err the Exception\u0027s message"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    public DukeException(String err) {"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"        super(err);"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"     * String representation of a DukeException"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"     * @return a String"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"        return this.getMessage();"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":27}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"public class Launcher {"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"    public static void main(String[] args) {"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":" * A GUI for Duke using FXML."},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"public class Main extends Application {"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    public void start(Stage stage) {"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"            stage.setScene(scene);"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"            e.printStackTrace();"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import javafx.application.Platform;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import javafx.fxml.FXML;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.control.Button;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"import utility.Ui;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    private VBox dialogContainer;"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"    private TextField userInput;"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    private Button sendButton;"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    private Duke duke;"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"    public void initialize() {"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(Ui.showInitUi(), dukeImage));"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"        duke \u003d d;"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    private void handleUserInput() {"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"        boolean isTerminated \u003d input.equals(\"bye\");"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"        if (isTerminated) {"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"            Platform.exit();"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"            return;"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"        );"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"        userInput.clear();"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":62}},{"path":"src/main/java/duke/Tag.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"public enum Tag {"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"    ADD, DELETE;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":5}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import duke.DukeException;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":" * A Task that has a time representing the deadline."},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"public class Deadline extends Task {"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    private final LocalDate deadline;"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"     * Creates a Deadline"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"     * @param description the Task\u0027s name"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"     * @param deadline the Task\u0027s deadline"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    public Deadline(String description, LocalDate deadline) {"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        super(description);"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"     * Creates a Deadline."},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"     * @param description the Task\u0027s name"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"     * @param deadline the Task\u0027s deadline"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"     * @param isDone status of Task\u0027s completion"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"    public Deadline(String description, LocalDate deadline, boolean isDone, List\u003cString\u003e tags) {"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"        super(description, isDone, tags);"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"     * Formats a Deadline for storing in the file."},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"     * @return a String representation of the Deadline"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"        return \"D | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \""},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"                + this.deadline.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" | \" + tags;"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"     * Marks a Deadline as done."},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"     * @throws DukeException if the Deadline is already marked as done."},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"     * @return a new Deadline that is considered done"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"    public Deadline markAsDone() throws DukeException {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"        if (isDone) {"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"            throw new DukeException(\"This Task has already been marked as done!\");"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"        return new Deadline(description, deadline, true, tags);"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"        return \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \""},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"                + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"    public LocalDate getDeadline() {"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"        return deadline;"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"            return true;"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"            return obj instanceof Deadline \u0026\u0026 description.equals(((Deadline) obj).getDescription())"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"                    \u0026\u0026 deadline.equals(((Deadline) obj).getDeadline()) \u0026\u0026 isDone \u003d\u003d ((Deadline) obj).isDone();"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":80}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import duke.DukeException;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":" * A Task that has both a time and date."},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"public class Event extends Task {"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    private final LocalDate date;"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    private final String timeRange;"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"     * Creates a Event"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"     * @param description name of the Event"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"     * @param date the date of the Event"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     * @param timeRange the time of the Event"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    public Event(String description, LocalDate date, String timeRange) {"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"        super(description);"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"        this.date \u003d date;"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"        this.timeRange \u003d timeRange;"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    public Event(String description, LocalDate date, String timeRange, boolean isDone, List\u003cString\u003e tags) {"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"        super(description, isDone, tags);"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"        this.date \u003d date;"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"        this.timeRange \u003d timeRange;"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"     * Formats a Event for storing in the file."},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"     * @return a String representation of the Event"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        return \"E | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \""},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"                + date.format(DateTimeFormatter.ISO_LOCAL_DATE) + \" \" + timeRange + \" | \" + tags;"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"     * Marks a Event as done."},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"     * @throws DukeException if the Event is already marked as done."},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"     * @return a new Event that is considered done"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"    public Event markAsDone() throws DukeException {"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"        if (isDone) {"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"            throw new DukeException(\"This Event has already been marked as done!\");"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"        return new Event(description, date, timeRange, true, tags);"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"        return \"[E][\" + getStatusIcon() + \"] \" + description + \" (at: \""},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"                + date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" \" + timeRange + \")\";"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"    public LocalDate getDate() {"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"        return date;"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"    public String getTimeRange() {"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"        return timeRange;"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"            return true;"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"            return obj instanceof Event \u0026\u0026 description.equals(((Event) obj).getDescription())"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"                    \u0026\u0026 date.equals(((Event) obj).getDate()) \u0026\u0026 timeRange.equals(((Event) obj).getTimeRange())"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"                            \u0026\u0026 isDone \u003d\u003d ((Event) obj).isDone();"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":83}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import duke.Tag;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":" * Parent class of Todo, Event, Deadline"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"public class Task {"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    protected String description;"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    protected boolean isDone;"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    protected List\u003cString\u003e tags;"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"     * Creates a Task."},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"     * @param description"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"    public Task(String description) {"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"        this.description \u003d description;"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"        this.isDone \u003d false;"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"        this.tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    public Task(String description, boolean isDone, List\u003cString\u003e tags) {"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"        this.description \u003d description;"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"        this.tags \u003d tags;"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"        return this.getClass().toString() + \" | \" + (isDone ? \"1 | \" : \"0 | \") + this.description;"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    public String getStatusIcon() {"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"    public Task markAsDone() throws DukeException {"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"        if (isDone) {"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"            throw new DukeException(\"This Task has already been marked as done!\");"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"        return new Task(description, true, tags);"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"    public void addTag(String tag) {"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"        tags.add(tag);"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"    public void deleteTag(String tag) {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"        tags.remove(tag);"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"        return description;"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"    public String getDescription() {"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"        return description;"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"    public boolean isDone() {"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"        return isDone;"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"    public void handleTag(Tag mode, String tag) {"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"        switch(mode) {"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"        case ADD:"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"            addTag(tag);"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"        case DELETE:"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"            deleteTag(tag);"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"        default:"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"            throw new AssertionError();"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":83}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package task;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":" * The simplest type of Task with no date and time."},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"public class Todo extends Task {"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"     * Creates a Todo"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"     * @param description the name of the Todo"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    public Todo(String description) {"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        super(description);"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    public Todo(String description, boolean isDone, List\u003cString\u003e tags) {"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        super(description, isDone, tags);"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"     * Marks a Todo as done."},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"     * @throws DukeException if the Todo is already marked as done."},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"     * @return a new Todo that is considered done"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    public Todo markAsDone() throws DukeException {"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"        if (isDone) {"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"            throw new DukeException(\"This Task has already been marked as done!\");"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"        return new Todo(description, true, tags);"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"     * Formats a Todo for storing in the file."},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"     * @return a String representation of the Todo"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"    public String fileFormat() {"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"        return \"T | \" + (super.isDone ? \"1 | \" : \"0 | \") + this.description + \" | \" + tags;"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    public String toString() {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"        return \"[T][\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"            return true;"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"            return obj instanceof Todo \u0026\u0026 description.equals(((Todo) obj).getDescription())"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"                    \u0026\u0026 isDone \u003d\u003d ((Todo) obj).isDone();"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":61}},{"path":"src/main/java/utility/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package utility;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.util.regex.Matcher;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import java.util.regex.Pattern;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import duke.Command;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import task.Deadline;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"import duke.DukeCommand;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"import duke.DukeException;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"import task.Event;"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"import task.Task;"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"import task.Todo;"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":" * Parser is involved with parsing user commands in Duke."},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"public class Parser {"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     * Parses user input to create a DukeCommand"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     * @param input User input to be parsed."},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"     * @return a DukeCommand that contains a Command and a String containing more details"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"     * @throws Exception if user input is unrecognisable by Parser logic"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"    public static DukeCommand parseCommand(String input) throws Exception {"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"        String[] params \u003d input.split(\" \", 2);"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.BYE, \"\");"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"        } else if (params[0].equals(\"delete\")) {"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"            if (params.length \u003d\u003d 1) {"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"delete is missing 1 argument\");"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.DELETE, params[1]);"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"        } else if (input.equals(\"list\")) {"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.LIST, \"\");"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        } else if (params[0].equals(\"done\")) {"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"            if (params.length \u003d\u003d 1) {"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"done is missing 1 argument\");"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.DONE, params[1]);"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"        } else if (params[0].equals(\"todo\")) {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"            if (params.length \u003d\u003d 1) {"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"todo is missing 1 argument\");"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.TODO, params[1]);"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"        } else if (params[0].equals(\"deadline\")) {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"            if (params.length \u003d\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"Missing arguments for deadline\");"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.DEADLINE, params[1]);"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"        } else if (params[0].equals(\"event\")) {"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"            if (params.length \u003d\u003d 1) {"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"Missing arguments for event\");"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.EVENT, params[1]);"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"        } else if (params[0].equals(\"find\")) {"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"            if (params.length \u003d\u003d 1) {"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"Missing keyword for find\");"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.FIND, params[1]);"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"        } else if (params[0].equals(\"tag\")) {"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"            if (params.length \u003d\u003d 1) {"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"Missing arguments for tag\");"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.TAG, params[1]);"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"            return new DukeCommand(Command.INVALID, \"\");"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"     * Parses a DukeCommand further if necessary."},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"     * @param command a Command"},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"     * @param details Additional details on the command"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":"     * @return the Task the user intends to create"},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"     * @throws Exception if user\u0027s input for Todo, Event and Deadline from the enum Command is not acceptable."},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":"    public static Task parseRemainder(Command command, String details) throws Exception {"},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"        if (command \u003d\u003d Command.TODO) {"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"            if (details.length() \u003d\u003d 0) {"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty\");"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"            Pattern pt1 \u003d Pattern.compile(\"\\\\w+\");"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":"            Pattern pt2 \u003d Pattern.compile(\"\\\\D+\");"},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"            Matcher mt1 \u003d pt1.matcher(details);"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"            Matcher mt2 \u003d pt2.matcher(details);"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"            if (!mt1.find() || !mt2.find()) {"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo should have at least \""},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"                        + \"one non digit word character\");"},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":107,"author":{"gitId":"CSmortal"},"content":"            return new Todo(details);"},{"lineNumber":108,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":109,"author":{"gitId":"CSmortal"},"content":"        } else if (command \u003d\u003d Command.DEADLINE) {"},{"lineNumber":110,"author":{"gitId":"CSmortal"},"content":"            if (details.length() \u003d\u003d 0) {"},{"lineNumber":111,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! The description of a deadline cannot be empty\");"},{"lineNumber":112,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":114,"author":{"gitId":"CSmortal"},"content":"            String[] deadlineParams \u003d details.split(\" /by \");"},{"lineNumber":115,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":116,"author":{"gitId":"CSmortal"},"content":"            if (deadlineParams.length \u003d\u003d 1) {"},{"lineNumber":117,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"deadline not given for this Deadline!\");"},{"lineNumber":118,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":119,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":120,"author":{"gitId":"CSmortal"},"content":"            Pattern pt \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"},{"lineNumber":121,"author":{"gitId":"CSmortal"},"content":"            Matcher mt \u003d pt.matcher(deadlineParams[1]);"},{"lineNumber":122,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":123,"author":{"gitId":"CSmortal"},"content":"            if (!mt.find()) {"},{"lineNumber":124,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD\u0027 after description\");"},{"lineNumber":125,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":126,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":127,"author":{"gitId":"CSmortal"},"content":"            return new Deadline(deadlineParams[0], LocalDate.parse(deadlineParams[1]));"},{"lineNumber":128,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":129,"author":{"gitId":"CSmortal"},"content":"        } else if (command \u003d\u003d Command.EVENT) {"},{"lineNumber":130,"author":{"gitId":"CSmortal"},"content":"            if (details.length() \u003d\u003d 0) {"},{"lineNumber":131,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! The description of an event cannot be empty\");"},{"lineNumber":132,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":134,"author":{"gitId":"CSmortal"},"content":"            String[] eventParams \u003d details.split(\" /at \");"},{"lineNumber":135,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":136,"author":{"gitId":"CSmortal"},"content":"            if (eventParams.length \u003d\u003d 1) {"},{"lineNumber":137,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"no date and time given for this Event!\");"},{"lineNumber":138,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":139,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":140,"author":{"gitId":"CSmortal"},"content":"            String[] timeParams \u003d eventParams[1].split(\" \");"},{"lineNumber":141,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":142,"author":{"gitId":"CSmortal"},"content":"            if (timeParams.length \u003d\u003d 1) {"},{"lineNumber":143,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"time of Event was not specified!\");"},{"lineNumber":144,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":145,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":146,"author":{"gitId":"CSmortal"},"content":"            Pattern datePt \u003d Pattern.compile(\"\\\\d{4}-\\\\d{2}-\\\\d{2}\");"},{"lineNumber":147,"author":{"gitId":"CSmortal"},"content":"            Matcher dateMt \u003d datePt.matcher(timeParams[0]); // timeParams[0] refers to the date"},{"lineNumber":148,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":149,"author":{"gitId":"CSmortal"},"content":"            if (!dateMt.find()) {"},{"lineNumber":150,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! Please enter \u0027/by YYYY-MM-DD {time range}\u0027 after description\");"},{"lineNumber":151,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":152,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":153,"author":{"gitId":"CSmortal"},"content":"            Pattern timePt \u003d Pattern.compile(\"\\\\d{1,2}-\\\\d{1,2}p?a?m\");"},{"lineNumber":154,"author":{"gitId":"CSmortal"},"content":"            Matcher timeMt \u003d timePt.matcher(timeParams[1]); // timeParams[1] refers to the time"},{"lineNumber":155,"author":{"gitId":"CSmortal"},"content":"            "},{"lineNumber":156,"author":{"gitId":"CSmortal"},"content":"            if (!timeMt.find()) {"},{"lineNumber":157,"author":{"gitId":"CSmortal"},"content":"                throw new DukeException(\"OOPS!!! Please enter a valid time range in this format \\\"{start}-{end}\\\"\""},{"lineNumber":158,"author":{"gitId":"CSmortal"},"content":"                        + \" and include am/pm after\");"},{"lineNumber":159,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":160,"author":{"gitId":"CSmortal"},"content":"            "},{"lineNumber":161,"author":{"gitId":"CSmortal"},"content":"            return new Event(eventParams[0], LocalDate.parse(timeParams[0]), timeParams[1]);"},{"lineNumber":162,"author":{"gitId":"CSmortal"},"content":"            "},{"lineNumber":163,"author":{"gitId":"CSmortal"},"content":"        } else {"},{"lineNumber":164,"author":{"gitId":"CSmortal"},"content":"            throw new AssertionError(\"Parser.parseRemainder() was given a Command other than Todo, \""},{"lineNumber":165,"author":{"gitId":"CSmortal"},"content":"                    + \"Deadline and Event\");"},{"lineNumber":166,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":167,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":168,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":168}},{"path":"src/main/java/utility/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package utility;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.io.BufferedWriter;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import java.io.IOException;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import java.nio.file.Files;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"import java.nio.file.Path;"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"import task.Deadline;"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"import task.Event;"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"import task.Task;"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"import task.Todo;"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":" * Handles read and write operations for Task objects in Duke."},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"public class Storage {"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"    private final Path filePath;"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    private final Path dirPath;"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"     * Creates a Storage object"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"     * @param filePath relative file path to where the data is stored"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"     * @param dirPath relative directory path"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"    public Storage(Path filePath, Path dirPath) {"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"        this.dirPath \u003d dirPath;"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"     * Writes data (Task objects) to the file"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"     * @param taskList the current list of tasks"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"    public void writeToFile(TaskList taskList) {"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        List\u003cTask\u003e myList \u003d taskList.getTasks();"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"            boolean dirExists \u003d Files.exists(dirPath);"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"            boolean fileExists \u003d Files.exists(filePath);"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"            if (!dirExists) {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"                Files.createDirectory(dirPath);"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"            if (!fileExists) {"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"                Files.createFile(filePath);"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"            BufferedWriter bfWriter \u003d Files.newBufferedWriter(filePath);"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"            for (Task task : myList) {"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"                bfWriter.write(task.fileFormat() + \"\\n\");"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"            bfWriter.close();"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"        } catch (IOException err) {"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"            err.printStackTrace();"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"     * Reads data (Task objects) from the file"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"     * @return the list of Task objects stored in the file"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"     * @throws Exception if an IO error occurs"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"    public List\u003cTask\u003e readFromFile() throws Exception {"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"        List\u003cTask\u003e tasksList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"        final String DELIMITER \u003d \" \\\\| \";"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"        boolean dirExists \u003d Files.exists(dirPath);"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"        boolean fileExists \u003d Files.exists(filePath);"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"        if (!dirExists) {"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"            Files.createDirectory(dirPath);"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"        if (!fileExists) {"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"            Files.createFile(filePath);"},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"        Task task \u003d null;"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"        BufferedReader br \u003d new BufferedReader(new FileReader(filePath.toString()));"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":"        String input \u003d br.readLine();"},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"        while (input !\u003d null) {"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"            String[] inputArr \u003d input.split(DELIMITER);"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"            switch (inputArr[0]) {"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"            case \"T\":"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":"                List\u003cString\u003e tags \u003d getTagListFromInputArr(inputArr, true);"},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"                task \u003d new Todo(inputArr[2], false, tags);"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"                break;"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"            case \"D\":"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"                tags \u003d getTagListFromInputArr(inputArr, false);"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"                task \u003d new Deadline(inputArr[2], LocalDate.parse(inputArr[3]), false, tags);"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":"                break;"},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"            case \"E\":"},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"                String[] timeParams \u003d inputArr[3].split(\" \", 2);"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":"                tags \u003d getTagListFromInputArr(inputArr, false);"},{"lineNumber":107,"author":{"gitId":"CSmortal"},"content":"                task \u003d new Event(inputArr[2], LocalDate.parse(timeParams[0]), timeParams[1], false, tags);"},{"lineNumber":108,"author":{"gitId":"CSmortal"},"content":"                break;"},{"lineNumber":109,"author":{"gitId":"CSmortal"},"content":"            default:"},{"lineNumber":110,"author":{"gitId":"CSmortal"},"content":"                throw new AssertionError();"},{"lineNumber":111,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":113,"author":{"gitId":"CSmortal"},"content":"            if (Integer.parseInt(inputArr[1]) \u003d\u003d 1) {"},{"lineNumber":114,"author":{"gitId":"CSmortal"},"content":"                tasksList.add(task.markAsDone());"},{"lineNumber":115,"author":{"gitId":"CSmortal"},"content":"            } else {"},{"lineNumber":116,"author":{"gitId":"CSmortal"},"content":"                tasksList.add(task);"},{"lineNumber":117,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":118,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":119,"author":{"gitId":"CSmortal"},"content":"            input \u003d br.readLine();"},{"lineNumber":120,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":122,"author":{"gitId":"CSmortal"},"content":"        br.close();"},{"lineNumber":123,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":124,"author":{"gitId":"CSmortal"},"content":"        return tasksList;"},{"lineNumber":125,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":127,"author":{"gitId":"CSmortal"},"content":"    private List\u003cString\u003e getTagListFromInputArr(String[] inputArr, boolean isTodo) {"},{"lineNumber":128,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":129,"author":{"gitId":"CSmortal"},"content":"        int index \u003d isTodo ? 3 : 4;"},{"lineNumber":130,"author":{"gitId":"CSmortal"},"content":"        String[] tagsArr \u003d inputArr[index].substring(1, inputArr[index].length() - 1).split(\", \");"},{"lineNumber":131,"author":{"gitId":"CSmortal"},"content":"        List\u003cString\u003e tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":133,"author":{"gitId":"CSmortal"},"content":"        for (String tag : tagsArr) {"},{"lineNumber":134,"author":{"gitId":"CSmortal"},"content":"            if (tag.equals(\"\")) {"},{"lineNumber":135,"author":{"gitId":"CSmortal"},"content":"                continue;"},{"lineNumber":136,"author":{"gitId":"CSmortal"},"content":"            }"},{"lineNumber":137,"author":{"gitId":"CSmortal"},"content":"            tags.add(tag);"},{"lineNumber":138,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"CSmortal"},"content":"        return tags;"},{"lineNumber":140,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":141}},{"path":"src/main/java/utility/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package utility;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import duke.DukeException;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import task.Task;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":" * Represents a list of Task objects in a more abstract way."},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"public class TaskList {"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    private final List\u003cTask\u003e tasks;"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"     * Creates a TaskList."},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"     * @param tasks the tasks so far"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    public TaskList(List\u003cTask\u003e tasks) {"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        this.tasks.addAll(tasks);"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"     * Creates an empty TaskList."},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    public TaskList() {"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"    public List\u003cTask\u003e getTasks() {"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"        return tasks;"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    public Task get(int index) {"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"        return tasks.get(index);"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"    public void add(Task task) {"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"        tasks.add(task);"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"    public Task delete(int index) {"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"        return tasks.remove(index);"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"     * Marks the Task at the given index as done."},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"     * @param index the index of the finished Task."},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"     * @throws DukeException the DukeException thrown if the Task is already marked as done"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"    public void markAsDone(int index) throws DukeException {"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"        tasks.set(index, tasks.get(index).markAsDone());"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"    public int getSize() {"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"        return tasks.size();"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":60}},{"path":"src/main/java/utility/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package utility;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import java.util.ListIterator;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import duke.DukeException;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import duke.Tag;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import task.Task;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":" * Aids Duke in displaying messages on its UI"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":" */"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"public class Ui {"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    public static final String INDENT \u003d \"         \";"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    public static final String HORIZ_SEP \u003d INDENT + \"________________________________________________\";"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"    public static final String FILE_PATH \u003d \"./data/duke.txt\";"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    private static final String greeting \u003d INDENT + \" Hello! I\u0027m Duke\\n\" + INDENT + \" What can I do for you?\\n\";"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    private static final String farewell \u003d INDENT + \" Bye. Hope to see you again soon!\\n\";"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when the program starts up."},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"    public static String showInitUi() {"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"        return greeting;"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when the program exits."},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"    public static String showExitUi() {"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"        return farewell;"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when the user requests for the saved Task\u0027s to be shown in a list"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"     * @param taskList the current list of tasks"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"    public static String showList(TaskList taskList) {"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"        ListIterator\u003cTask\u003e taskIter \u003d taskList.getTasks().listIterator();"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" Here are the tasks in your list: \\n\");"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"        while (taskIter.hasNext()) {"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"            Task curr \u003d taskIter.next();"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"            stringBuilder.append(String.valueOf(taskIter.nextIndex()))"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"                    .append(\".\")"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"                    .append(curr)"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":"                    .append(\"\\n\");"},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"        return stringBuilder.toString();"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when a Task has been successfully added to the list."},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"     * @param numTasks current number of tasks in the list"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"     * @param relevantTask the newly added Task"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"    public static String showSuccessfulAdd(int numTasks, Task relevantTask) {"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" Got it. I\u0027ve added this task: \\n\");"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \"   \")"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"                .append(relevantTask)"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"                .append(\"\\n\\n\");"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" Now you have \").append(numTasks).append(\" tasks in the list.\");"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"        return stringBuilder.toString();"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when a Task has been marked as done."},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"     * @param relevantTask the Task that has just been done"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"    public static String showSuccessfulDone(Task relevantTask) {"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" Nice! I\u0027ve marked this task as done: \\n\");"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \"   \").append(relevantTask);"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"        return stringBuilder.toString();"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when a Task is deleted"},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"     * @param numTasks current number of tasks in the list"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"     * @param relevantTask the deleted Task"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"    public static String showSuccessfulDelete(int numTasks, Task relevantTask) {"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" Noted. I\u0027ve removed this task \\n\");"},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \"   \")"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"                .append(relevantTask)"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":"                .append(\"\\n\\n\");"},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" Now you have \").append(numTasks).append(\" tasks in the list.\");"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"        return stringBuilder.toString();"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when the program catches a DukeException"},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"     * @param ex the DukeException caught"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":107,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"CSmortal"},"content":"    public static String showDukeException(DukeException ex) {"},{"lineNumber":109,"author":{"gitId":"CSmortal"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":110,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":111,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" \" + ex.getMessage());"},{"lineNumber":112,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":113,"author":{"gitId":"CSmortal"},"content":"        return stringBuilder.toString();"},{"lineNumber":114,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":116,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":117,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response when the program catches a Exception"},{"lineNumber":119,"author":{"gitId":"CSmortal"},"content":"     * @param ex the Exception caught"},{"lineNumber":120,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":121,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":122,"author":{"gitId":"CSmortal"},"content":"    public static String showException(Exception ex) {"},{"lineNumber":123,"author":{"gitId":"CSmortal"},"content":"        return INDENT + \" \" + ex.getMessage();"},{"lineNumber":124,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":126,"author":{"gitId":"CSmortal"},"content":"    /**"},{"lineNumber":127,"author":{"gitId":"CSmortal"},"content":"     * Creates Duke\u0027s response to user\u0027s request to find tasks if the keyword found relevant tasks."},{"lineNumber":128,"author":{"gitId":"CSmortal"},"content":"     * @param taskList a non-empty TaskList containing the tasks relevant to what the user is searching for."},{"lineNumber":129,"author":{"gitId":"CSmortal"},"content":"     * @return a String representing Duke\u0027s response"},{"lineNumber":130,"author":{"gitId":"CSmortal"},"content":"     */"},{"lineNumber":131,"author":{"gitId":"CSmortal"},"content":"    public static String showMatchedTasks(TaskList taskList) throws IllegalArgumentException {"},{"lineNumber":132,"author":{"gitId":"CSmortal"},"content":"        if (taskList.getTasks().size() \u003d\u003d 0) {"},{"lineNumber":133,"author":{"gitId":"CSmortal"},"content":"            throw new IllegalArgumentException(\"Ui.showMatchedTasks() expects a non-empty taskList argument\");"},{"lineNumber":134,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":135,"author":{"gitId":"CSmortal"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":136,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":137,"author":{"gitId":"CSmortal"},"content":"        ListIterator\u003cTask\u003e taskIter \u003d taskList.getTasks().listIterator();"},{"lineNumber":138,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":139,"author":{"gitId":"CSmortal"},"content":"        stringBuilder.append(INDENT + \" Here are the matching tasks in your list: \\n\");"},{"lineNumber":140,"author":{"gitId":"CSmortal"},"content":"        while (taskIter.hasNext()) {"},{"lineNumber":141,"author":{"gitId":"CSmortal"},"content":"            Task curr \u003d taskIter.next();"},{"lineNumber":142,"author":{"gitId":"CSmortal"},"content":"            stringBuilder.append(INDENT + \" \")"},{"lineNumber":143,"author":{"gitId":"CSmortal"},"content":"                    .append(String.valueOf(taskIter.nextIndex()))"},{"lineNumber":144,"author":{"gitId":"CSmortal"},"content":"                    .append(\".\")"},{"lineNumber":145,"author":{"gitId":"CSmortal"},"content":"                    .append(curr)"},{"lineNumber":146,"author":{"gitId":"CSmortal"},"content":"                    .append(\"\\n\");"},{"lineNumber":147,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":149,"author":{"gitId":"CSmortal"},"content":"        return stringBuilder.toString();"},{"lineNumber":150,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":151,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":152,"author":{"gitId":"CSmortal"},"content":"    public static String showNoMatchedTasks() {"},{"lineNumber":153,"author":{"gitId":"CSmortal"},"content":"        return INDENT + \" No relevant tasks were found!\";"},{"lineNumber":154,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":156,"author":{"gitId":"CSmortal"},"content":"    public static String showTagHandling(Tag action, String tag, Task relevantTask) {"},{"lineNumber":157,"author":{"gitId":"CSmortal"},"content":"        StringBuilder stringBuilder \u003d new StringBuilder();"},{"lineNumber":158,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":159,"author":{"gitId":"CSmortal"},"content":"        switch (action) {"},{"lineNumber":160,"author":{"gitId":"CSmortal"},"content":"        case ADD:"},{"lineNumber":161,"author":{"gitId":"CSmortal"},"content":"            stringBuilder.append(\"The tag #\").append(tag).append(\" was added to Task \")"},{"lineNumber":162,"author":{"gitId":"CSmortal"},"content":"                    .append(\"\\\"\").append(relevantTask).append(\"\\\"\");"},{"lineNumber":163,"author":{"gitId":"CSmortal"},"content":"            return stringBuilder.toString();"},{"lineNumber":164,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":165,"author":{"gitId":"CSmortal"},"content":"        case DELETE:"},{"lineNumber":166,"author":{"gitId":"CSmortal"},"content":"            stringBuilder.append(\"The tag #\").append(tag).append(\" was deleted from Task \")"},{"lineNumber":167,"author":{"gitId":"CSmortal"},"content":"                    .append(\"\\\"\").append(relevantTask).append(\"\\\"\");"},{"lineNumber":168,"author":{"gitId":"CSmortal"},"content":"            return stringBuilder.toString();"},{"lineNumber":169,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":170,"author":{"gitId":"CSmortal"},"content":"        default:"},{"lineNumber":171,"author":{"gitId":"CSmortal"},"content":"            throw new AssertionError();"},{"lineNumber":172,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":173,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":175,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":175}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"         \u003cpadding\u003e"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"            \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"         \u003c/padding\u003e\u003c/Label\u003e"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"         \u003cHBox.margin\u003e"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"            \u003cInsets left\u003d\"15.0\" right\u003d\"5.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"    \u003cpadding\u003e"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"    \u003c/padding\u003e"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"CSmortal":22}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"CSmortal":19}},{"path":"src/test/java/duke/DukeExceptionTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import org.junit.jupiter.params.ParameterizedTest;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"import org.junit.jupiter.params.provider.ValueSource;"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import utility.Parser;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"public class DukeExceptionTest {"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"    @ParameterizedTest"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":"    @ValueSource(strings \u003d {\"delete\", \"done\", \"todo\", \"deadline\", \"event\", \"find\"})"},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"    public void dukeException_emptyDeleteCommand_caught(String input) {"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":"        Exception ex \u003d assertThrows(DukeException.class, () -\u003e {"},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"            Parser.parseCommand(input);"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"        });"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"        switch (input) {"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"        case \"delete\":"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"            assertEquals(ex.getMessage(), \"delete is missing 1 argument\");"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"        case \"list\":"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":"            assertEquals(ex.getMessage(), \"list is missing 1 argument\");"},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":"        case \"done\":"},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"            assertEquals(ex.getMessage(), \"done is missing 1 argument\");"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":"        case \"todo\":"},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"            assertEquals(ex.getMessage(), \"todo is missing 1 argument\");"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"        case \"deadline\":"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"            assertEquals(ex.getMessage(), \"Missing arguments for deadline\");"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"        case \"event\":"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":"            assertEquals(ex.getMessage(), \"Missing arguments for event\");"},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"        case \"find\":"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"            assertEquals(ex.getMessage(), \"Missing keyword for find\");"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":"            break;"},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":45}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"import task.Deadline;"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"import task.Event;"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"import task.Task;"},{"lineNumber":12,"author":{"gitId":"CSmortal"},"content":"import task.Todo;"},{"lineNumber":13,"author":{"gitId":"CSmortal"},"content":"import utility.Parser;"},{"lineNumber":14,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":15,"author":{"gitId":"CSmortal"},"content":"public class ParserTest {"},{"lineNumber":16,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":17,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForByeTest() {"},{"lineNumber":19,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"CSmortal"},"content":"            Command c \u003d Parser.parseCommand(\"bye\").getCommand();"},{"lineNumber":21,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c, Command.BYE);"},{"lineNumber":22,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":23,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":24,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":26,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":28,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForDoneTest() {"},{"lineNumber":30,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":31,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"CSmortal"},"content":"            Command c \u003d Parser.parseCommand(\"done 1\").getCommand();"},{"lineNumber":33,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c, Command.DONE);"},{"lineNumber":34,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":35,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":38,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForToDoTest() {"},{"lineNumber":41,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":42,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"CSmortal"},"content":"            DukeCommand c \u003d Parser.parseCommand(\"todo todo1\");"},{"lineNumber":44,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getCommand(), Command.TODO);"},{"lineNumber":45,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getDetails(), \"todo1\");"},{"lineNumber":46,"author":{"gitId":"CSmortal"},"content":"            assertEquals(Parser.parseRemainder(c.getCommand(), c.getDetails()),"},{"lineNumber":47,"author":{"gitId":"CSmortal"},"content":"                    new Todo(\"todo1\"));"},{"lineNumber":48,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":49,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":50,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":52,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":54,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForDeadlineTest() {"},{"lineNumber":55,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"CSmortal"},"content":"            DukeCommand c \u003d Parser.parseCommand(\"deadline deadline1 /by 2020-04-13\");"},{"lineNumber":57,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getCommand(), Command.DEADLINE);"},{"lineNumber":58,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getDetails(), \"deadline1 /by 2020-04-13\");"},{"lineNumber":59,"author":{"gitId":"CSmortal"},"content":"            assertEquals(Parser.parseRemainder(c.getCommand(), c.getDetails()),"},{"lineNumber":60,"author":{"gitId":"CSmortal"},"content":"                    new Deadline(\"deadline1\", LocalDate.parse(\"2020-04-13\")));"},{"lineNumber":61,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":62,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":63,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":65,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForEventTest() {"},{"lineNumber":68,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":69,"author":{"gitId":"CSmortal"},"content":"            DukeCommand c \u003d Parser.parseCommand(\"event event1 /at 2020-04-13 2-4pm\");"},{"lineNumber":70,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getCommand(), Command.EVENT);"},{"lineNumber":71,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c.getDetails(), \"event1 /at 2020-04-13 2-4pm\");"},{"lineNumber":72,"author":{"gitId":"CSmortal"},"content":"            assertEquals(Parser.parseRemainder(c.getCommand(), c.getDetails()),"},{"lineNumber":73,"author":{"gitId":"CSmortal"},"content":"                    new Event(\"event1\", LocalDate.parse(\"2020-04-13\"), \"2-4pm\"));"},{"lineNumber":74,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":75,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":76,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":78,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":80,"author":{"gitId":"CSmortal"},"content":"    public void parseCommandForListTest() {"},{"lineNumber":81,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"CSmortal"},"content":"            Command c \u003d Parser.parseCommand(\"list\").getCommand();"},{"lineNumber":83,"author":{"gitId":"CSmortal"},"content":"            assertEquals(c, Command.LIST);"},{"lineNumber":84,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":85,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":86,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":88,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":90,"author":{"gitId":"CSmortal"},"content":"    public void parseDeadlineTest() {"},{"lineNumber":91,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"CSmortal"},"content":"            DukeCommand dukeCommand \u003d Parser.parseCommand(\"deadline deadline1 /by 2021-01-20\");"},{"lineNumber":93,"author":{"gitId":"CSmortal"},"content":"            Task deadline \u003d Parser.parseRemainder(dukeCommand.getCommand(), dukeCommand.getDetails());"},{"lineNumber":94,"author":{"gitId":"CSmortal"},"content":"            assertEquals(deadline.toString(), new Deadline(\"deadline1\", LocalDate.parse(\"2021-01-20\")).toString());"},{"lineNumber":95,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":96,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":97,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"CSmortal"},"content":"    @Test"},{"lineNumber":100,"author":{"gitId":"CSmortal"},"content":"    public void parseEventTest() {"},{"lineNumber":101,"author":{"gitId":"CSmortal"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"CSmortal"},"content":"            DukeCommand dukeCommand \u003d Parser.parseCommand(\"event event1 /at 2021-01-20 2-4pm\");"},{"lineNumber":103,"author":{"gitId":"CSmortal"},"content":"            Task event \u003d Parser.parseRemainder(dukeCommand.getCommand(), dukeCommand.getDetails());"},{"lineNumber":104,"author":{"gitId":"CSmortal"},"content":"            assertEquals(event.toString(), new Event(\"event1\", LocalDate.parse(\"2021-01-20\"), \"2-4pm\").toString());"},{"lineNumber":105,"author":{"gitId":"CSmortal"},"content":"        } catch (Exception ex) {"},{"lineNumber":106,"author":{"gitId":"CSmortal"},"content":"            ex.printStackTrace();"},{"lineNumber":107,"author":{"gitId":"CSmortal"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"CSmortal"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":110,"author":{"gitId":"CSmortal"},"content":""},{"lineNumber":111,"author":{"gitId":"CSmortal"},"content":"}"}],"authorContributionMap":{"CSmortal":111}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CSmortal"},"content":"list"},{"lineNumber":2,"author":{"gitId":"CSmortal"},"content":"todo todo1"},{"lineNumber":3,"author":{"gitId":"CSmortal"},"content":"deadline deadline1 /by 2020-04-13"},{"lineNumber":4,"author":{"gitId":"CSmortal"},"content":"deadline test1 /by 2020-04-1"},{"lineNumber":5,"author":{"gitId":"CSmortal"},"content":"deadline /by 2020-04-13"},{"lineNumber":6,"author":{"gitId":"CSmortal"},"content":"event event1 /at 2020-04-13 2-4pm"},{"lineNumber":7,"author":{"gitId":"CSmortal"},"content":"event test2 /at 2020-04-1 2-4pm"},{"lineNumber":8,"author":{"gitId":"CSmortal"},"content":"list"},{"lineNumber":9,"author":{"gitId":"CSmortal"},"content":"done 1"},{"lineNumber":10,"author":{"gitId":"CSmortal"},"content":"delete 1"},{"lineNumber":11,"author":{"gitId":"CSmortal"},"content":"list"}],"authorContributionMap":{"CSmortal":11}}]
