[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"# Duke"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"A very basic todo manager that\u0027s a wee bit utilitarian, without pretending you\u0027re talking to a bot.  "},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"Also a very uninspired name, considering I leeched this off the original as a fork."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"**Prerequisite: Java 11**"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"![](docs/images/sampleRun.gif)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"This task manager allows you to add three types of tasks:"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"1. Todos with simple task description"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"1. Events with description and event time"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"1. Deadlines with description and due date"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"All tasks are always displayed on the right panel for easy viewing, which is"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"essentially `list` but on standby 24/7."},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"If this isn\u0027t enough, try using the `list /sort` utility that orders all tasks"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"by task type and timing."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"![](docs/images/feature_listsort.png)"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"To cherry-pick, how about a `find` utility to sieve matching descriptions across"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"all tasks? Even supports partial searching and date range based searches."},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"Once tasks are done (or dusted, even), feel free to swipe them off the list using `delete`,"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"or go the non-destructive route by simply marking as `done`. If you\u0027re super productive checking"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"items off even before having them on the list, you can mark tasks as `/done` immediately"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"as well. How cool is that?"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"You can leave the app by clicking on the close button, but of course, a `bye` command"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"with the exact same functionality is supplied for those lazy - to use a mouse. Other fast-quit"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"alternatives include `Ctrl-Q` and `Ctrl-H`, if these are available on your system as well."},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"## Command syntax"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"Terms in `SCREAMING_SNAKE_CASE` should be supplied by you, the user."},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"You wouldn\u0027t want a mysterious albeit charming task called `TASK_NAME`, do you?"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"| Command | Example |"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"|---|---|"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"| `todo TASK_NAME [/done]` | `todo eat food`, `todo drink fish /done` |"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"| `event TASK_NAME /at TIME [/done]` | `event nom /at 14:30`, `event nom /at 16 Jan`, etc. |"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"| `deadline TASK_NAME /by TIME [/done]` | `deadline chew this /by 2021-02-16 14:30`, etc. |"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"| `list [/sort]` | `list`, `list /sort` |"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"| `find [QUERY] [/from TIME] [/to TIME]` | `find books /from Jan 19`, etc. |"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"| `done INDEX [INDEX ...]` | `done 1 7 8 3` |"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"| `delete INDEX [INDEX ...]` | `delete 1 4 5` |"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"| `bye` | `bye` |"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"## Usage of key features"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"### `find` - Find tasks"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"Filter tasks that match specific search queries or date range queries."},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"Example of usage:"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"`find meet /from 17 Feb`"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"Expected outcome:"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    Found 3 task(s) matching query / date range:"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"      from:  Wed 12:00 AM, 17 Feb 2021"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"      query: \u0027meet\u0027"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    "},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    2. [D][✓] group meeting (by: 2021-02-17 14:00)"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    3. [E][✓] meet friendo (at: 2021-02-19 18:00)"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"    5. [E][✓] meet army friends (at: 2021-02-22 08:25)"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"------"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"### `list` - List tasks"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"Prints out the list of tasks, with optional `/sort` parameter to print in sorted"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"(alphabetical and chronological) order."},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"Example of usage:"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"`list /sort`"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"    Here are the tasks in your list, in sorted order:"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"    - [T][✓] eat bakes"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"    - [T][✓] drink caramel"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"    - [T][✘] read label"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"    - [T][✓] read a book"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] yeeeeeeeet (at: 2021-01-01 1:01)"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] drink beer (at: 2021-02-03 22:30)"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"    - [E][✘] read books (at: 2021-02-04 14:00)"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    - [E][✘] run (at: 2021-02-16 6:00)"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] eat lunch (at: 2021-02-16 12:00)"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] eat dinner (at: 2021-02-16 18:00)"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] sleep (at: 2021-02-16 22:00)"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] drink yakult (at: 2021-02-17 2:00)"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] drink beers (at: 2021-02-17 3:00)"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"    - [E][✘] party (at: 2021-02-22 0:00)"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] etching (by: 2021-02-16 23:59)"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] CS2103 iP (by: 2021-02-19 0:00)"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] submit hw (by: 2021-02-24 13:00)"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] write book (by: 2021-02-24 23:59)"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"    - [D][✘] lab work (by: 2021-04-02 0:00)"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"------"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"### `done` - Mark tasks as done"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"Mark tasks as done (which rewards you with a nice unicode tick)."},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"Tasks specified by the index number in the task list."},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"Similar to `delete` syntax."},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"Example of usage:"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"`done 2 3`"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"Expected outcome:"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"    Nice! I\u0027ve marked these tasks as done:"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"      [T][✓] read label"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"      [D][✓] write book (by: 2021-02-24 23:59)"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"------"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"## Other easter eggs"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"1. Click on the boxes containing your past inputs to copy them directly"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"   into the input box."},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"1. Input is insensitive to extraneous duplicate whitespaces."},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"1. The `TIME` format takes in a relatively larger variety of datetime formats,"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"   including `2021-01-13 13:40` (ISO-like format), `Jan 13` (American-style),"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"   `13 Jan` (British-style), `13/1/2021` (old school), etc."},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"   Description of exact parsing rules is in the Java documentation."},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"1. Note, however, a bug in the `java.time.LocalDateTime` parser that matches invalid dates (e.g."},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"   31 Feb) by mapping it to the nearest valid date. Make sure the dates you supply are correct in the first place!"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"1. Options are prefixed with the `/` symbol. But this program also knows to parse dates containing `/`."},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"1. Text boxes are especially allowed to be highlightable, in the off chance you want to copy it somewhere else..."},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"1. ...and exercise an undocumented `delete /all` nuclear option, but you\u0027ll never want to stop using"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"   this cute little app, won\u0027t you?"}],"authorContributionMap":{"pyuxiang":135,"-":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"}"},{"lineNumber":32,"author":{"gitId":"-"},"content":""},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":38,"author":{"gitId":"-"},"content":""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"-"},"content":""},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":17,"-":45}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"# Duke"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"A very basic todo manager that\u0027s a wee bit utilitarian, without pretending you\u0027re talking to a bot.  "},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"Also a very uninspired name, considering I leeched this off the original as a fork."},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"**Prerequisite: Java 11**"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"![](images/sampleRun.gif)"},{"lineNumber":9,"author":{"gitId":"-"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"This task manager allows you to add three types of tasks:"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"1. Todos with simple task description"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"1. Events with description and event time"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"1. Deadlines with description and due date"},{"lineNumber":15,"author":{"gitId":"-"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"All tasks are always displayed on the right panel for easy viewing, which is"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"essentially `list` but on standby 24/7."},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"If this isn\u0027t enough, try using the `list /sort` utility that orders all tasks"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"by task type and timing."},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"![](images/feature_listsort.png)"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"To cherry-pick, how about a `find` utility to sieve matching descriptions across"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"all tasks? Even supports partial searching and date range based searches."},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"Once tasks are done (or dusted, even), feel free to swipe them off the list using `delete`,"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"or go the non-destructive route by simply marking as `done`. If you\u0027re super productive checking"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"items off even before having them on the list, you can mark tasks as `/done` immediately"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"as well. How cool is that?"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"You can leave the app by clicking on the close button, but of course, a `bye` command"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"with the exact same functionality is supplied for those lazy - to use a mouse. Other fast-quit"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"alternatives include `Ctrl-Q` and `Ctrl-H`, if these are available on your system as well."},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"## Command syntax"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"Terms in `SCREAMING_SNAKE_CASE` should be supplied by you, the user."},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"You wouldn\u0027t want a mysterious albeit charming task called `TASK_NAME`, do you?"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"| Command | Example |"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"|---|---|"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"| `todo TASK_NAME [/done]` | `todo eat food`, `todo drink fish /done` |"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"| `event TASK_NAME /at TIME [/done]` | `event nom /at 14:30`, `event nom /at 16 Jan`, etc. |"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"| `deadline TASK_NAME /by TIME [/done]` | `deadline chew this /by 2021-02-16 14:30`, etc. |"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"| `list [/sort]` | `list`, `list /sort` |"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"| `find [QUERY] [/from TIME] [/to TIME]` | `find books /from Jan 19`, etc. |"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"| `done INDEX [INDEX ...]` | `done 1 7 8 3` |"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"| `delete INDEX [INDEX ...]` | `delete 1 4 5` |"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"| `bye` | `bye` |"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"## Usage of key features"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"### `find` - Find tasks"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"Filter tasks that match specific search queries or date range queries."},{"lineNumber":56,"author":{"gitId":"-"},"content":""},{"lineNumber":57,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"`find meet /from 17 Feb`"},{"lineNumber":60,"author":{"gitId":"-"},"content":""},{"lineNumber":61,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":62,"author":{"gitId":"-"},"content":""},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    Found 3 task(s) matching query / date range:"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"      from:  Wed 12:00 AM, 17 Feb 2021"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"      query: \u0027meet\u0027"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    "},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    2. [D][✓] group meeting (by: 2021-02-17 14:00)"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    3. [E][✓] meet friendo (at: 2021-02-19 18:00)"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"    5. [E][✓] meet army friends (at: 2021-02-22 08:25)"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"------"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"### `list` - List tasks"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"Prints out the list of tasks, with optional `/sort` parameter to print in sorted"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"(alphabetical and chronological) order."},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"Example of usage:"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"`list /sort`"},{"lineNumber":81,"author":{"gitId":"-"},"content":""},{"lineNumber":82,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":83,"author":{"gitId":"-"},"content":""},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"    Here are the tasks in your list, in sorted order:"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"    - [T][✓] eat bakes"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"    - [T][✓] drink caramel"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"    - [T][✘] read label"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"    - [T][✓] read a book"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] yeeeeeeeet (at: 2021-01-01 1:01)"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] drink beer (at: 2021-02-03 22:30)"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"    - [E][✘] read books (at: 2021-02-04 14:00)"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    - [E][✘] run (at: 2021-02-16 6:00)"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] eat lunch (at: 2021-02-16 12:00)"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] eat dinner (at: 2021-02-16 18:00)"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] sleep (at: 2021-02-16 22:00)"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] drink yakult (at: 2021-02-17 2:00)"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"    - [E][✓] drink beers (at: 2021-02-17 3:00)"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"    - [E][✘] party (at: 2021-02-22 0:00)"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] etching (by: 2021-02-16 23:59)"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] CS2103 iP (by: 2021-02-19 0:00)"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] submit hw (by: 2021-02-24 13:00)"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"    - [D][✓] write book (by: 2021-02-24 23:59)"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"    - [D][✘] lab work (by: 2021-04-02 0:00)"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"------"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"### `done` - Mark tasks as done"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"Mark tasks as done (which rewards you with a nice unicode tick)."},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"Tasks specified by the index number in the task list."},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"Similar to `delete` syntax."},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"Example of usage:"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"`done 2 3`"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"Expected outcome:"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"    Nice! I\u0027ve marked these tasks as done:"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"      [T][✓] read label"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"      [D][✓] write book (by: 2021-02-24 23:59)"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"------"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"## Other easter eggs"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"1. Click on the boxes containing your past inputs to copy them directly"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"   into the input box."},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"1. Input is insensitive to extraneous duplicate whitespaces."},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"1. The `TIME` format takes in a relatively larger variety of datetime formats,"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"   including `2021-01-13 13:40` (ISO-like format), `Jan 13` (American-style),"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"   `13 Jan` (British-style), `13/1/2021` (old school), etc."},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"   Description of exact parsing rules is in the Java documentation."},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"1. Note, however, a bug in the `java.time.LocalDateTime` parser that matches invalid dates (e.g."},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"   31 Feb) by mapping it to the nearest valid date. Make sure the dates you supply are correct in the first place!"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"1. Options are prefixed with the `/` symbol. But this program also knows to parse dates containing `/`."},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"1. Text boxes are especially allowed to be highlightable, in the off chance you want to copy it somewhere else..."},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"1. ...and exercise an undocumented `delete /all` nuclear option, but you\u0027ll never want to stop using"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"   this cute little app, won\u0027t you?"}],"authorContributionMap":{"pyuxiang":123,"-":16}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import duke.main.Main;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import javafx.application.Application;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" * Main point of entry for GUI application."},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"public class Launcher {"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public static void main(String[] args) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/commands/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Superclass for all commands."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"public abstract class DukeCommand {"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    /** Must be overridden by commands performing action. */"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    public abstract Response execute(TaskList tasks, FileLoader loader);"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":14}},{"path":"src/main/java/duke/commands/DukeCommandAdd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * Add command."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * Adds task to task list and writes changes to file."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandAdd extends DukeCommand {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    private final Task task;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    /** Constructor to track task */"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandAdd(Task task) {"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        this.task \u003d task;"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     * Returns Response after adding task to tasklist, writes to file and displays success"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * @param tasks tasklist"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * @param loader storage"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * @return Response"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    public Response execute(TaskList tasks, FileLoader loader) {"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        tasks.addTask(task);"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        /* Attempt to write to file */"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            loader.write(tasks);"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotWritable e) {"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseOk(e.toString());"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        /* Successful execution */"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        String respondMessage \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"                + \"  \" + task + \"\\n\""},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"                + \"Now you have \" + tasks.size() + \" task(s) in the list.\";"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        return Response.createResponseOk(respondMessage);"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":47}},{"path":"src/main/java/duke/commands/DukeCommandBye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Exit command."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * Allows main loop to terminate program."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandBye extends DukeCommand {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * Returns exit response."},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     * @param tasks tasklist"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * @param loader loader"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     * @return Response"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    public Response execute(TaskList tasks, FileLoader loader) {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        return Response.createResponseExit();"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":25}},{"path":"src/main/java/duke/commands/DukeCommandDelete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.util.LinkedHashSet;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":" * Delete command."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":" * Removes single or all tasks from task list, the latter executed using the \u0027delete all\u0027"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":" * keyphrase."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandDelete extends DukeCommand {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    private ArrayList\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    private boolean isDeleteAll \u003d false;"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * Constructor to track task indices to delete."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @param tokenSet user input tokens"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When indices cannot be parsed as integers"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandDelete(UserInputTokenSet tokenSet) throws DukeExceptionIllegalArgument {"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        if (tokenSet.contains(\"all\")) {"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            isDeleteAll \u003d true;"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            return;"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        /* Parse task numbers */"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            String indicesString \u003d tokenSet.get(\"/text\");"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            for (String s : indicesString.split(\"\\\\s+\")) {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"                int index \u003d Integer.parseInt(s) - 1;"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"                if (index \u003c 0) {"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"                    throw new DukeExceptionIllegalArgument(\"Task number must be positive.\");"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"                indices.add(index);"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"            // Reverse + Unique terms to avoid duplicate deletions"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"            // Has added benefit of doing bounds checking."},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            indices.sort(Collections.reverseOrder());"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            indices \u003d new ArrayList\u003c\u003e(new LinkedHashSet\u003c\u003e(indices));"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Need to specify task number to delete.\");"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"     * Returns Response after deleting tasks from tasklist, writes to file and displays success"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     * @param tasks tasklist"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"     * @param loader storage"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     * @return Response"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    public Response execute(TaskList tasks, FileLoader loader) {"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"        if (isDeleteAll) {"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"            return executeDeleteAll(tasks, loader);"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"            return executeDeleteSelected(tasks, loader);"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"    private Response executeDeleteSelected(TaskList tasks, FileLoader loader) {"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        /* Attempt deletion */"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cString\u003e responseMessageArray \u003d new ArrayList\u003c\u003e();"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"        responseMessageArray.add(\"Noted. I\u0027ve removed these tasks:\");"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"            for (int index : indices) {"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"                responseMessageArray.add(\"  \" + tasks.getTask(index));"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"                tasks.deleteTask(index);"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"            responseMessageArray.add(\"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseBad(e.toString());"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        /* Attempt to write to file */"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"            loader.write(tasks);"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotWritable e) {"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseOk(e.toString());"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"        return Response.createResponseOk(responseMessageArray.toArray(new String[0]));"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"    private Response executeDeleteAll(TaskList tasks, FileLoader loader) {"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"        tasks.deleteAll();"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"        /* Attempt to write to file */"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"            loader.write(tasks);"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotWritable e) {"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseOk(e.toString());"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"        return Response.createResponseOk(\"All tasks successfully deleted.\");"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":108}},{"path":"src/main/java/duke/commands/DukeCommandDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * Done command."},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" * Marks task as done and saves task list to file."},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandDone extends DukeCommand {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    private final ArrayList\u003cInteger\u003e indices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * Constructor to track task indices to mark as done."},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     * @param tokenSet user input tokens"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When indices cannot be parsed as integers"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandDone(UserInputTokenSet tokenSet) throws DukeExceptionIllegalArgument {"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            String indices \u003d tokenSet.get(\"/text\");"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            for (String s : indices.split(\"\\\\s+\")) {"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"                this.indices.add(Integer.parseInt(s) - 1);"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        } catch (Exception e) {"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Need to specify task number to mark as done.\");"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * Returns Response indicating tasks marked as done in tasklist, writes to file and displays success"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     * @param tasks tasklist"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     * @param loader storage"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     * @return Response"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    public Response execute(TaskList tasks, FileLoader loader) {"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cString\u003e responseMessageArray \u003d new ArrayList\u003c\u003e();"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        responseMessageArray.add(\"Nice! I\u0027ve marked these tasks as done:\");"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"            for (int index : indices) {"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"                tasks.setDone(index);"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"                responseMessageArray.add(\"  \" + tasks.getTask(index));"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseBad(e.toString());"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        /* Attempt to write to file */"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            loader.write(tasks);"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotWritable e) {"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseOk(e.toString());"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        return Response.createResponseOk(responseMessageArray.toArray(new String[0]));"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":66}},{"path":"src/main/java/duke/commands/DukeCommandFind.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.util.Optional;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.DatetimeParser;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.DateTask;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":" * Find command."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":" * Filters tasks according to supplied date range and displays list to user."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandFind extends DukeCommand {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    protected Optional\u003cLocalDateTime\u003e from;"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    protected Optional\u003cLocalDateTime\u003e to;"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    protected String searchTerms;"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * Constructor to record date range and search query."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @param tokenSet user input tokens"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When dates cannot be parsed"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandFind(UserInputTokenSet tokenSet) throws DukeExceptionIllegalArgument {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        from \u003d Optional.empty(); // datetime lower bound"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        to \u003d Optional.empty(); // datetime upper bound"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        searchTerms \u003d tokenSet.get(\"/text\"); // keyword search"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        if (tokenSet.contains(\"from\")) {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            from \u003d Optional.of(DatetimeParser.parseDate(tokenSet.get(\"from\")));"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        if (tokenSet.contains(\"to\")) {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            to \u003d Optional.of(DatetimeParser.parseDate(tokenSet.get(\"to\")));"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        if (from.isPresent() \u0026\u0026 to.isPresent() \u0026\u0026 from.get().isAfter(to.get())) {"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument("},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"                    \"\u0027/from\u0027 date must be before \u0027/to\u0027 date.\");"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     * Returns Response listing tasks from tasklist according to search query, writes to file and displays success"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     * @param tasks tasklist"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     * @param loader storage"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"     * @return Response"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    public Response execute(TaskList tasks, FileLoader loader) {"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        List\u003cInteger\u003e validTaskIndices \u003d getTaskIndicesMatchingDateCriteria(tasks);"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        /* Prepare response */"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        if (validTaskIndices.isEmpty()) {"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\"No tasks matching query / date range\");"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"            addToResponseSearchParameters(lines);"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseOk(lines.toArray(new String[0]));"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"        /* Prepare non-empty response */"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"        lines.add(\"Found \" + validTaskIndices.size() + \" task(s) matching query / date range:\");"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        addToResponseSearchParameters(lines);"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        addToResponseFoundTasks(lines, validTaskIndices, tasks);"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"        return Response.createResponseOk(lines.toArray(new String[0]));"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"    private List\u003cInteger\u003e getTaskIndicesMatchingDateCriteria(TaskList tasks) {"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        boolean datedSearch \u003d (from.isPresent() || to.isPresent());"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cInteger\u003e validTaskIndices \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"            Task task \u003d tasks.getTaskUnsafe(i);"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"            /* If date enabled, must sort by DateTasks only. */"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"            if (datedSearch \u0026\u0026 isNotWithinDateRange(task)) {"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"            if (!task.getDescription().contains(searchTerms)) {"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"            validTaskIndices.add(i);"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        return validTaskIndices;"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"    private boolean isNotWithinDateRange(Task task) {"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"        /* Not a date in the first place */"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"        if (!(task instanceof DateTask)) {"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"            return true;"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"        /* Checks if within date range */"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"        DateTask datetask \u003d (DateTask) task;"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"        if (from.isPresent() \u0026\u0026 from.get().isAfter(datetask.getDatetime())) {"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"            return true;"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"        return to.isPresent() \u0026\u0026 to.get().isBefore(datetask.getDatetime());"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"    private void addToResponseSearchParameters(List\u003cString\u003e lines) {"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"        from.ifPresent(localDateTime -\u003e lines.add(\" from:  \" + DatetimeParser.formatDateFull(localDateTime)));"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"        to.ifPresent(localDateTime -\u003e lines.add(\" till:  \" + DatetimeParser.formatDateFull(localDateTime)));"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"        if (!searchTerms.isBlank()) {"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\" query: \u0027\" + searchTerms + \"\u0027\");"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"        /* Print empty response line if params not present */"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"        if (from.isEmpty() \u0026\u0026 to.isEmpty() \u0026\u0026 searchTerms.isBlank()) {"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\"no query / date range provided\");"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"    private void addToResponseFoundTasks(List\u003cString\u003e lines, List\u003cInteger\u003e validTaskIndices, TaskList tasks) {"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"        lines.add(\"\"); // blank line"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"        for (int taskIndex : validTaskIndices) {"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"            String s \u003d tasks.getLeftPadding(taskIndex + 1) + (taskIndex + 1) + \". \""},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"                    + tasks.getTaskUnsafe(taskIndex).toString();"},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"            lines.add(s);"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":128}},{"path":"src/main/java/duke/commands/DukeCommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import java.util.Comparator;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Event;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Todo;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":" * List command."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":" * If \u0027toSort\u0027 is provided during construction, the list view will be"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":" * sorted in order of Todo \u003c Event (chronological) \u003c Deadline (chronological)."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandList extends DukeCommand {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    protected boolean toSort;"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    /** Single constructor */"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandList(UserInputTokenSet tokenSet) {"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        toSort \u003d tokenSet.contains(\"sort\");"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * Returns Response containing formatted string representing the list."},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     * @param tasks tasklist"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * @param loader loader"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     * @return Response"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    public Response execute(TaskList tasks, FileLoader loader) {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseOk(\"There are no tasks in your list.\");"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        /* Prepare response */"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cTask\u003e listOfTasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            listOfTasks.add(tasks.getTaskUnsafe(i));"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        /* Sort responses */"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        if (toSort) {"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            listOfTasks.sort(new TaskComparator());"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\"Here are the tasks in your list, in sorted order:\");"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            for (Task task: listOfTasks) {"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"                lines.add(\" - \" + task.toString()); // no numbering for sorted order"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\"Here are the tasks in your list:\");"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"            for (int i \u003d 0; i \u003c listOfTasks.size(); i++) {"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"                Task task \u003d listOfTasks.get(i);"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"                String line \u003d tasks.getLeftPadding(i + 1) + (i + 1) + \". \" + task.toString();"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"                lines.add(line);"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"        return Response.createResponseOk(lines.toArray(new String[0]));"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"}"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"class TaskComparator implements Comparator\u003cTask\u003e {"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    // See List above."},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"    public int compare(Task t1, Task t2) {"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"        if (t1 instanceof Todo) {"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"            return -1;"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"        } else if (t2 instanceof Todo) {"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"            return 1;"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        } else if (t1 instanceof Event) {"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"            if (t2 instanceof Event) {"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"                return ((Event) t1).getDatetime().compareTo(((Event) t2).getDatetime());"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"            return -1;"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"        } else if (t2 instanceof Event) {"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"            return 1;"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        } else if (t1 instanceof Deadline) {"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"            if (t2 instanceof Deadline) {"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"                return ((Deadline) t1).getDatetime().compareTo(((Deadline) t2).getDatetime());"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"            return -1;"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"            return 1;"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":93}},{"path":"src/main/java/duke/commands/factory/DukeCommandFactory.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands.factory;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommand;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommandAdd;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommandBye;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommandDelete;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommandDone;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommandFind;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommandList;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalCommand;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Event;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Todo;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"public final class DukeCommandFactory {"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    private DukeCommandFactory() {}"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * Returns command based on user input."},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * Factory method for command subclass generation. The first-hop parsing occurs here."},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * The rest of the parsing is offloaded to the individual parsing classes."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * @param tokenSet User input string."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @return DukeCommand."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalCommand When command supplied is invalid."},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When task parsing error occurs."},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    public static DukeCommand getDukeCommand(UserInputTokenSet tokenSet)"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            throws DukeExceptionIllegalCommand, DukeExceptionIllegalArgument {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        String cmd \u003d tokenSet.get(\"/command\");"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        Task task;"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        switch (cmd) {"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        case \"event\":"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Event.parse(tokenSet);"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandAdd(task);"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        case \"todo\":"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Todo.parse(tokenSet);"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandAdd(task);"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        case \"deadline\":"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Deadline.parse(tokenSet);"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandAdd(task);"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        case \"bye\":"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandBye();"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        case \"list\":"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandList(tokenSet);"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        case \"done\":"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandDone(tokenSet);"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        case \"delete\":"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandDelete(tokenSet);"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        case \"find\":"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandFind(tokenSet);"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        default:"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalCommand(\"Command \u0027\" + cmd + \"\u0027 is invalid. Valid commands:\""},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"                    + \"\\nbye, list, done, delete, event, todo, deadline\");"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":62}},{"path":"src/main/java/duke/controllers/InputHistoryBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import javafx.geometry.Insets;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.Label;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.Background;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.BackgroundFill;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.Border;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.BorderStroke;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.BorderStrokeStyle;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.BorderWidths;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.paint.Color;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":" * Represents a single entry of past user inputs, displayed in associated container."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"public class InputHistoryBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    private static final CornerRadii CORNER_DEFAULT \u003d new CornerRadii(20);"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    private static final Background BG_FADED \u003d new Background(new BackgroundFill("},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"            Color.valueOf(\"#e9e9e9\"), CORNER_DEFAULT, Insets.EMPTY));"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    private static final Background BG_OK \u003d new Background(new BackgroundFill("},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            Color.valueOf(\"#e1f1e1\"), CORNER_DEFAULT, Insets.EMPTY));"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    private static final Background BG_BAD \u003d new Background(new BackgroundFill("},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            Color.valueOf(\"#f1e1e1\"), CORNER_DEFAULT, Insets.EMPTY));"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    private static final Border BORDER_TRANSPARENT \u003d new Border(new BorderStroke("},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            Color.valueOf(\"#f4f4f4\"),"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            BorderStrokeStyle.SOLID,"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            CornerRadii.EMPTY,"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            new BorderWidths(2, 4, 2, 4)"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    ));"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    private static final Color TEXT_BAD \u003d Color.valueOf(\"#bbbbbb\");"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    private Label dialog;"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    private final boolean isBadInput;"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"     * Default constructor for inputHistoryBox."},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     * @param text Text to be displayed"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * @param isBadInput Tweaks final formatting of text box"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"    public InputHistoryBox(String text, boolean isBadInput) {"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/InputHistoryBox.fxml\"));"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"            fxmlLoader.load();"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        } catch (IOException e) {"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"            e.printStackTrace();"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        this.isBadInput \u003d isBadInput;"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        /* Update text and set display formatting */"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        dialog.setText(text);"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        setBorder(BORDER_TRANSPARENT);"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        setBackground((isBadInput) ? BG_BAD : BG_OK);"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * Changes color of font to a faded version."},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"     * Visual indication of historical user input."},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"    public void setInputFaded() {"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"        setBackground(BG_FADED);"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        if (isBadInput) {"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"            dialog.setTextFill(TEXT_BAD);"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":78}},{"path":"src/main/java/duke/controllers/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.controllers;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.main.Duke;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.Button;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.TextArea;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.Border;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.BorderStroke;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.BorderStrokeStyle;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.BorderWidths;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.CornerRadii;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.paint.Paint;"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.text.Font;"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    private static final Border THIN_BORDER \u003d new Border(new BorderStroke("},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            Paint.valueOf(\"0x000000\"),"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            BorderStrokeStyle.SOLID,"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            CornerRadii.EMPTY,"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            new BorderWidths(1)"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    ));"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    private VBox inputHistoryContainer;"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    private TextField userInput;"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    private Button sendButton;"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    private TextArea responseContainer;"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    private TextArea tasklistContainer;"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"    private Duke duke;"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    private Font monospacedFont \u003d Font.getDefault(); // default fallback"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     * Sets initial properties of components."},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"    public void initialize() {"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        overrideMonospacedFont();"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    private void overrideMonospacedFont() {"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e availableFonts \u003d Font.getFontNames();"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        String[] selectedFonts \u003d { \"Consolas\", \"Monaco\", \"Menlo\", \"Courier\", \"Courier New\" };"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"        for (String font : selectedFonts) {"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"            if (availableFonts.contains(font)) {"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"                monospacedFont \u003d new Font(font, 11);"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"                break;"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"    /** Initialize Duke and queries initial setup information */"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"        duke \u003d d;"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        updateResponseContainer(duke.getStartupResponse());"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        updateTasklistContainer(duke.getTasklistString());"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     * Updates response, tasklist and input history containers upon receiving user input."},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"    private void handleUserInput() {"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"        Response response \u003d duke.getResponse(input);"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"        boolean isBadInput \u003d false;"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"        switch (response.getStatus()) {"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        case EXIT:"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"            Platform.exit();"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"            break; // program termination, no fall-through"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        case BAD:"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"            isBadInput \u003d true; // fallthrough"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"        case OK:"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"            String responseText \u003d response.getMessage();"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"            updateInputHistoryContainer(input, isBadInput);"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"            updateResponseContainer(responseText);"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"            updateTasklistContainer(duke.getTasklistString());"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"            userInput.clear();"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"            break;"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"        default:"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"            assert false; // will not enter here if all branches listed"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"            break;"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"    private void updateInputHistoryContainer(String inputText, boolean isBadInput) {"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"        /* Update last text box to neutral color */"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"        List\u003cNode\u003e nodes \u003d inputHistoryContainer.getChildren();"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"        if (!nodes.isEmpty()) {"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"            InputHistoryBox previousChild \u003d (InputHistoryBox) nodes.get(0);"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"            previousChild.setInputFaded();"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"        /* Create individual input text box */"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"        InputHistoryBox textBox \u003d new InputHistoryBox(inputText, isBadInput);"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"        textBox.setOnMouseClicked(event -\u003e {"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"            focusOnTextField();"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"            userInput.setText(inputText);"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"            userInput.setFont(monospacedFont);"},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"            userInput.positionCaret(inputText.length());"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"        });"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"        /* Add text box to container */"},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"        inputHistoryContainer.getChildren().add(0, textBox);"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"    private void updateResponseContainer(String responseText) {"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"        responseContainer.setText(responseText);"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"        responseContainer.setFont(monospacedFont);"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"    private void updateTasklistContainer(String tasklistString) {"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"        tasklistContainer.setText(tasklistString);"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"        tasklistContainer.setFont(monospacedFont);"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"    @FXML"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"    private void focusOnTextField() {"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"        userInput.requestFocus();"},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":143,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":143}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * General exception class for Duke."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * All exceptions thrown by Duke should inherit from this class."},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    protected String description;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    public DukeException(String description) {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        return description;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":20}},{"path":"src/main/java/duke/exceptions/DukeExceptionFileNotAccessible.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if task database file cannot be accessed."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionFileNotAccessible extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionFileNotAccessible(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionFileNotWritable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if task database file cannot be written to."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionFileNotWritable extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionFileNotWritable(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionIllegalArgument.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if wrong user input is supplied."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionIllegalArgument extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionIllegalArgument(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionIllegalCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if Duke command cannot be parsed."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionIllegalCommand extends DukeExceptionIllegalArgument {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionIllegalCommand(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionIllegalDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if wrong date format is supplied by user."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionIllegalDate extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionIllegalDate(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionInvalidTaskString.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if task loaded from database file cannot be parsed."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionInvalidTaskString extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionInvalidTaskString(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/main/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommand;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.factory.DukeCommandFactory;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotAccessible;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenizer;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import duke.responses.Response;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.PreformattedMessages;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":" * Main logic class for tasklist management."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"public class Duke {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    private static final String DATAFILE_PATH \u003d \"./dukeData/tasks.txt\";"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    private FileLoader loader;"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    private TaskList tasks;"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    /** Empty constructor used for initialization */"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    public Duke() {}"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     * Initializes the main program given directory used to save user tasks."},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     * Attempts to load the task list from the file, displaying the status"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     * of the task list depending on load success."},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    public String getStartupResponse() {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        String response \u003d PreformattedMessages.WELCOME_SCREEN;"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            loader \u003d new FileLoader(DATAFILE_PATH);"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            tasks \u003d loader.read();"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            loader.throwIfNotWritable(); // can read but cannot write"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            response +\u003d PreformattedMessages.getLoadingSuccessMessage(tasks.size());"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotWritable e) {"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            response +\u003d PreformattedMessages.getFileWriteErrorMessage(tasks.size());"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotAccessible e) {"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            response +\u003d PreformattedMessages.getFileReadErrorMessage();"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"            response +\u003d PreformattedMessages.getFileLoadErrorMessage();"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        return response;"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"     * Retrieves tasklist as a string for immediate printing in GUI."},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"     * @return String"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    public String getTasklistString() {"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"            Task task \u003d tasks.getTaskUnsafe(i);"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"            lines.add(tasks.getLeftPadding(i + 1) + (i + 1) + \". \" + task.toString());"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        return String.join(\"\\n\", lines.toArray(new String[0]));"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"     * Retrieves result of parsing and processing of user input."},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"     * @param input User input text"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"     * @return Response from Duke"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"    public Response getResponse(String input) {"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"            UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(input);"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"            DukeCommand cmd \u003d DukeCommandFactory.getDukeCommand(tokenSet);"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"            return cmd.execute(tasks, loader);"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeException e) {"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"            return Response.createResponseBad(e.toString());"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":88,"-":1}},{"path":"src/main/java/duke/main/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.main;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import javafx.application.Application;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.Scene;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.image.Image;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import javafx.stage.Stage;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    private final Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * Entry point for JavaFX."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * @param stage JavaFX Stage"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    public void start(Stage stage) {"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            stage.setScene(scene);"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            stage.setResizable(false);"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            stage.setTitle(\"Duke: The Todolist\");"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            stage.getIcons().add(new Image(Main.class.getResourceAsStream(\"/icons/GitHubIcon.png\")));"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            fxmlLoader.\u003cduke.controllers.MainWindow\u003egetController().setDuke(duke);"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            stage.show();"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            e.printStackTrace();"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":41}},{"path":"src/main/java/duke/parser/DatetimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalTime;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * Parser class."},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" * Handles primarily date parsing."},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"public class DatetimeParser {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * List of supported datetime formats for parsing,"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * partially inspired by { @link https://balusc.omnifaces.org/2007/09/dateutil.html }."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter[] DATE_FORMATS_NO_DATES \u003d new DateTimeFormatter[]{"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm\") // Same/Next day, 24-hour format"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    };"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter[] DATE_FORMATS_DATE_NO_TIME \u003d new DateTimeFormatter[]{"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy\"), // Full date"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy\"),"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM yyyy\"),"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyyMMdd\") // Shortcut"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    };"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter[] DATE_FORMATS_DATE_NO_TIME_AND_YEAR \u003d new DateTimeFormatter[]{"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M_yyyy\"), // Manually add year, since required to parse datetime"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM_yyyy\"),"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM_yyyy\"),"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMM d_yyyy\"),"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMMM d_yyyy\")"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    };"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter[] DATE_FORMATS_DATETIME \u003d new DateTimeFormatter[]{"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d/M/yyyy\"),"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMM yyyy\"),"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMMM yyyy\"),"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm yyyy-MM-dd\"),"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy H:mm\"),"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy H:mm\"),"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM yyyy H:mm\"),"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd H:mm\")"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    };"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter[] DATE_FORMATS_DATETIME_NO_YEAR \u003d new DateTimeFormatter[]{"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d/M_yyyy\"), // Manually add year, since required to parse datetime"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMM_yyyy\"),"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMMM_yyyy\"),"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm MMM d_yyyy\"),"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm MMMM d_yyyy\"),"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M H:mm_yyyy\"),"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM H:mm_yyyy\"),"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM H:mm_yyyy\"),"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMM d H:mm_yyyy\"),"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMMM d H:mm_yyyy\")"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    };"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter ISO_DATETIME_FORMAT \u003d"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd H:mm\");"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATE_FORMAT \u003d"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E, d MMM\");"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATE_YEAR_FORMAT \u003d"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E, d MMM yyyy\");"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATETIME_FORMAT \u003d"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E h:mm a, d MMM\");"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATETIME_YEAR_FORMAT \u003d"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E h:mm a, d MMM yyyy\");"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"     * Parses datetime string relative to current time."},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"     * The datetime string must be in the following specified formats, with text"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"     * months in title case. In some cases, the time or date may be omitted, upon which"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"     * the parsing rules are as follows:"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"     * 1. If only time is supplied, parse as upcoming datetime with the specified time."},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     * 2. If no time is supplied, parse as upcoming datetime at midnight."},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"     * 3. If year is not supplied, parse as upcoming datetime with the specified time/day/month."},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"     * 4. If date and year supplied, parsed as specified datetime."},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"     * e.g. if datetime string is \"13 Jan\" and the current date is \"25 Jan 2021\","},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"     * this will be parsed as \"13 Jan 2022, 00:00\"."},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"     * Available date formats:"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"     * - 13 Sep"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"     * - 13 Sep 2020"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"     * - 13 September"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"     * - 13 September 2020"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"     * - 13/9"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"     * - 13/9/2020"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"     * - Sep 13"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"     * - September 13"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"     * - 2020-09-13"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"     * Available time formats:"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"     * - 9:23"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"     * - 23:09"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"     * Available datetime formats:"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"     * - 13 Sep 9:03"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"     * - 13/9 9:03"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"     * - 9:03 13 Sep"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"     * - 9:03 13/9/2020"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"     * @param input Datetime string."},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"     * @return LocalDateTime."},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When parsing fails."},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"    public static LocalDateTime parseDate(String input) throws DukeExceptionIllegalArgument {"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"        return parseDate(input, LocalDateTime.now());"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"     * Parses datetime string relative to supplied datetime."},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"     * Method created primarily for mocking. See parsing rules for parseDate."},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"     * @param input Datetime string."},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"     * @param now LocalDateTime."},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"     * @return LocalDateTime."},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When parsing fails."},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"    public static LocalDateTime parseDate(String input, LocalDateTime now) throws DukeExceptionIllegalArgument {"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"        input \u003d input.strip();"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"        now \u003d now.withSecond(0).withNano(0);"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"        String inputAddYear \u003d input + \"_\" + now.getYear(); // to bypass no year parsing, see constants above."},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"        Optional\u003cLocalDateTime\u003e result;"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"        result \u003d DatetimeParser.parseDateWithNoDates(input, now);"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"        if (result.isPresent()) {"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"            return result.get();"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"        result \u003d DatetimeParser.parseDateWithDateAndNoTime(input, now);"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"        if (result.isPresent()) {"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"            return result.get();"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":143,"author":{"gitId":"pyuxiang"},"content":"        result \u003d DatetimeParser.parseDateWithDateAndNoTimeYear(inputAddYear, now);"},{"lineNumber":144,"author":{"gitId":"pyuxiang"},"content":"        if (result.isPresent()) {"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"            return result.get();"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"        result \u003d DatetimeParser.parseDateWithDateTime(input, now);"},{"lineNumber":149,"author":{"gitId":"pyuxiang"},"content":"        if (result.isPresent()) {"},{"lineNumber":150,"author":{"gitId":"pyuxiang"},"content":"            return result.get();"},{"lineNumber":151,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":153,"author":{"gitId":"pyuxiang"},"content":"        result \u003d DatetimeParser.parseDateWithDateTimeAndNoYear(inputAddYear, now);"},{"lineNumber":154,"author":{"gitId":"pyuxiang"},"content":"        if (result.isPresent()) {"},{"lineNumber":155,"author":{"gitId":"pyuxiang"},"content":"            return result.get();"},{"lineNumber":156,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"pyuxiang"},"content":"        // None of the date formats parsed"},{"lineNumber":158,"author":{"gitId":"pyuxiang"},"content":"        throw new DukeExceptionIllegalArgument(\"Datetime format should adhere to the following format:\""},{"lineNumber":159,"author":{"gitId":"pyuxiang"},"content":"                + \"\\n- Time delimited by \u0027:\u0027, e.g. 9:30\""},{"lineNumber":160,"author":{"gitId":"pyuxiang"},"content":"                + \"\\n- Date delimited by \u0027/\u0027 or \u0027 \u0027, e.g. 9/1, 9 Jan\""},{"lineNumber":161,"author":{"gitId":"pyuxiang"},"content":"                + \"\\n- Date and time separated by a single space \u0027 \u0027\");"},{"lineNumber":162,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":163,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"    private static Optional\u003cLocalDateTime\u003e parseDateWithNoDates(String input, LocalDateTime now) {"},{"lineNumber":165,"author":{"gitId":"pyuxiang"},"content":"        for (DateTimeFormatter dateFormat : DATE_FORMATS_NO_DATES) {"},{"lineNumber":166,"author":{"gitId":"pyuxiang"},"content":"            LocalDateTime date;"},{"lineNumber":167,"author":{"gitId":"pyuxiang"},"content":"            LocalTime readout;"},{"lineNumber":168,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":169,"author":{"gitId":"pyuxiang"},"content":"                readout \u003d LocalTime.parse(input, dateFormat); // parsing attempt"},{"lineNumber":170,"author":{"gitId":"pyuxiang"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":171,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":172,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":173,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":"            /* Replace current datetime with date values */"},{"lineNumber":175,"author":{"gitId":"pyuxiang"},"content":"            date \u003d now.withHour(readout.getHour()).withMinute(readout.getMinute());"},{"lineNumber":176,"author":{"gitId":"pyuxiang"},"content":"            if (date.isBefore(now)) {"},{"lineNumber":177,"author":{"gitId":"pyuxiang"},"content":"                date \u003d date.plusDays(1); // time is within next 24-hour period"},{"lineNumber":178,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":179,"author":{"gitId":"pyuxiang"},"content":"            return Optional.of(date);"},{"lineNumber":180,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":181,"author":{"gitId":"pyuxiang"},"content":"        return Optional.empty();"},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":183,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":184,"author":{"gitId":"pyuxiang"},"content":"    private static Optional\u003cLocalDateTime\u003e parseDateWithDateAndNoTime(String input, LocalDateTime now) {"},{"lineNumber":185,"author":{"gitId":"pyuxiang"},"content":"        for (DateTimeFormatter dateFormat : DATE_FORMATS_DATE_NO_TIME) {"},{"lineNumber":186,"author":{"gitId":"pyuxiang"},"content":"            LocalDateTime date;"},{"lineNumber":187,"author":{"gitId":"pyuxiang"},"content":"            LocalDate readout;"},{"lineNumber":188,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":189,"author":{"gitId":"pyuxiang"},"content":"                readout \u003d LocalDate.parse(input, dateFormat); // parsing attempt"},{"lineNumber":190,"author":{"gitId":"pyuxiang"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":191,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":194,"author":{"gitId":"pyuxiang"},"content":"            /* Set time to midnight */"},{"lineNumber":195,"author":{"gitId":"pyuxiang"},"content":"            date \u003d readout.atTime(0, 0);"},{"lineNumber":196,"author":{"gitId":"pyuxiang"},"content":"            return Optional.of(date);"},{"lineNumber":197,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":198,"author":{"gitId":"pyuxiang"},"content":"        return Optional.empty();"},{"lineNumber":199,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":200,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":201,"author":{"gitId":"pyuxiang"},"content":"    private static Optional\u003cLocalDateTime\u003e parseDateWithDateAndNoTimeYear(String input, LocalDateTime now) {"},{"lineNumber":202,"author":{"gitId":"pyuxiang"},"content":"        for (DateTimeFormatter dateFormat : DATE_FORMATS_DATE_NO_TIME_AND_YEAR) {"},{"lineNumber":203,"author":{"gitId":"pyuxiang"},"content":"            LocalDateTime date;"},{"lineNumber":204,"author":{"gitId":"pyuxiang"},"content":"            LocalDate readout;"},{"lineNumber":205,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":206,"author":{"gitId":"pyuxiang"},"content":"                readout \u003d LocalDate.parse(input, dateFormat); // parsing attempt"},{"lineNumber":207,"author":{"gitId":"pyuxiang"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":208,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":209,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":210,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":211,"author":{"gitId":"pyuxiang"},"content":"            /* Set time to midnight */"},{"lineNumber":212,"author":{"gitId":"pyuxiang"},"content":"            date \u003d readout.atTime(0, 0);"},{"lineNumber":213,"author":{"gitId":"pyuxiang"},"content":"            if (date.isBefore(now)) {"},{"lineNumber":214,"author":{"gitId":"pyuxiang"},"content":"                date \u003d date.plusYears(1);"},{"lineNumber":215,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":216,"author":{"gitId":"pyuxiang"},"content":"            return Optional.of(date);"},{"lineNumber":217,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"pyuxiang"},"content":"        return Optional.empty();"},{"lineNumber":219,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":221,"author":{"gitId":"pyuxiang"},"content":"    private static Optional\u003cLocalDateTime\u003e parseDateWithDateTime(String input, LocalDateTime now) {"},{"lineNumber":222,"author":{"gitId":"pyuxiang"},"content":"        for (DateTimeFormatter dateFormat : DATE_FORMATS_DATETIME) {"},{"lineNumber":223,"author":{"gitId":"pyuxiang"},"content":"            LocalDateTime date;"},{"lineNumber":224,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":225,"author":{"gitId":"pyuxiang"},"content":"                date \u003d LocalDateTime.parse(input, dateFormat); // parsing attempt"},{"lineNumber":226,"author":{"gitId":"pyuxiang"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":227,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":228,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"pyuxiang"},"content":"            return Optional.of(date);"},{"lineNumber":230,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":231,"author":{"gitId":"pyuxiang"},"content":"        return Optional.empty();"},{"lineNumber":232,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":233,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":234,"author":{"gitId":"pyuxiang"},"content":"    private static Optional\u003cLocalDateTime\u003e parseDateWithDateTimeAndNoYear(String input, LocalDateTime now) {"},{"lineNumber":235,"author":{"gitId":"pyuxiang"},"content":"        for (DateTimeFormatter dateFormat : DATE_FORMATS_DATETIME_NO_YEAR) {"},{"lineNumber":236,"author":{"gitId":"pyuxiang"},"content":"            LocalDateTime date;"},{"lineNumber":237,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":238,"author":{"gitId":"pyuxiang"},"content":"                date \u003d LocalDateTime.parse(input, dateFormat); // parsing attempt"},{"lineNumber":239,"author":{"gitId":"pyuxiang"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":240,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":241,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":242,"author":{"gitId":"pyuxiang"},"content":"            if (date.isBefore(now)) {"},{"lineNumber":243,"author":{"gitId":"pyuxiang"},"content":"                date \u003d date.plusYears(1);"},{"lineNumber":244,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":245,"author":{"gitId":"pyuxiang"},"content":"            return Optional.of(date);"},{"lineNumber":246,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":247,"author":{"gitId":"pyuxiang"},"content":"        return Optional.empty();"},{"lineNumber":248,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":249,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":250,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":251,"author":{"gitId":"pyuxiang"},"content":"     * Returns formatted string based on supplied datetime."},{"lineNumber":252,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":253,"author":{"gitId":"pyuxiang"},"content":"     * If task falls on current year but has not expired, no year will be inserted."},{"lineNumber":254,"author":{"gitId":"pyuxiang"},"content":"     * Tasks falling midnight is considered not expired on the same day."},{"lineNumber":255,"author":{"gitId":"pyuxiang"},"content":"     * If task has time specified other than midnight, the time will be inserted."},{"lineNumber":256,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":257,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime."},{"lineNumber":258,"author":{"gitId":"pyuxiang"},"content":"     * @return Formatted datetime string."},{"lineNumber":259,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":260,"author":{"gitId":"pyuxiang"},"content":"    public static String formatDate(LocalDateTime dt) {"},{"lineNumber":261,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":262,"author":{"gitId":"pyuxiang"},"content":"        if (dt.getHour() \u003d\u003d 0 \u0026\u0026 dt.getMinute() \u003d\u003d 0) {"},{"lineNumber":263,"author":{"gitId":"pyuxiang"},"content":"            if (dt.getYear() \u003d\u003d now.getYear() \u0026\u0026 now.isBefore(dt.plusDays(1))) {"},{"lineNumber":264,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATE_FORMAT);"},{"lineNumber":265,"author":{"gitId":"pyuxiang"},"content":"            } else {"},{"lineNumber":266,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATE_YEAR_FORMAT);"},{"lineNumber":267,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":268,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":269,"author":{"gitId":"pyuxiang"},"content":"            if (dt.getYear() \u003d\u003d now.getYear() \u0026\u0026 now.isBefore(dt)) {"},{"lineNumber":270,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATETIME_FORMAT);"},{"lineNumber":271,"author":{"gitId":"pyuxiang"},"content":"            } else {"},{"lineNumber":272,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATETIME_YEAR_FORMAT);"},{"lineNumber":273,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":274,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":275,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":276,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":277,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":278,"author":{"gitId":"pyuxiang"},"content":"     * Returns formatted string as complete datetime."},{"lineNumber":279,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":280,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime."},{"lineNumber":281,"author":{"gitId":"pyuxiang"},"content":"     * @return Formatted datetime string."},{"lineNumber":282,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":283,"author":{"gitId":"pyuxiang"},"content":"    public static String formatDateFull(LocalDateTime dt) {"},{"lineNumber":284,"author":{"gitId":"pyuxiang"},"content":"        return dt.format(READABLE_DATETIME_YEAR_FORMAT);"},{"lineNumber":285,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":286,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":287,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":288,"author":{"gitId":"pyuxiang"},"content":"     * Returns formatted string in ISO format, i.e. \u0027YYYY-MM-DD hh:mm\u0027"},{"lineNumber":289,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":290,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime."},{"lineNumber":291,"author":{"gitId":"pyuxiang"},"content":"     * @return Formatted datetime string."},{"lineNumber":292,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":293,"author":{"gitId":"pyuxiang"},"content":"    public static String formatDateIso(LocalDateTime dt) {"},{"lineNumber":294,"author":{"gitId":"pyuxiang"},"content":"        return dt.format(ISO_DATETIME_FORMAT);"},{"lineNumber":295,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":296,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":297,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":298,"author":{"gitId":"pyuxiang"},"content":"     * Returns LocalDateTime from ISO format string."},{"lineNumber":299,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":300,"author":{"gitId":"pyuxiang"},"content":"     * @param datetimeString datetime string in ISO format"},{"lineNumber":301,"author":{"gitId":"pyuxiang"},"content":"     * @return LocalDateTime"},{"lineNumber":302,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":303,"author":{"gitId":"pyuxiang"},"content":"    public static LocalDateTime parseDateIso(String datetimeString) {"},{"lineNumber":304,"author":{"gitId":"pyuxiang"},"content":"        return LocalDateTime.parse(datetimeString, ISO_DATETIME_FORMAT);"},{"lineNumber":305,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":306}},{"path":"src/main/java/duke/parser/UserInputTokenSet.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * Wrapper for user input tokens."},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Essentially composition with map as attribute."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * Class form used instead of simple dictionary to standardize formats, as well as"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * only expose required functionality, i.e. check, get, set keys."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public class UserInputTokenSet {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    private final HashMap\u003cString, String\u003e data \u003d new HashMap\u003c\u003e();"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    /** Sole constructor */"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public UserInputTokenSet() {}"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * Stores key-text pair."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * @param key key"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * @param text string value"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    public void set(String key, String text) {"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        data.put(key, text);"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    /** Checks if key exists."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @param key key"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * @return string value"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public boolean contains(String key) {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        return data.containsKey(key);"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * Returns value corresponding to key if exists, otherwise empty string."},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     * @param key key"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     * @return string value"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    public String get(String key) {"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        if (!contains(key)) {"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            return \"\";"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        return data.get(key);"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":50}},{"path":"src/main/java/duke/parser/UserInputTokenizer.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.util.LinkedList;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.util.Queue;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalCommand;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * Class exclusively to tokenize user input"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public final class UserInputTokenizer {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    private UserInputTokenizer() {}"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * Returns a UserInputTokenSet parsed from user input."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * All commands should strictly follow the following format:"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * \u003cpre\u003e{@code \u003ccommand\u003e \u003ctext\u003e [/\u003coption\u003e \u003cargument\u003e]* }\u003c/pre\u003e"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * In particular:"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * 1. Command and options should not contain spaces."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * 2. Command and options must be case-insensitive."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * 3. Options should be strictly prefixed with one \u0027/\u0027, and more \u0027/\u0027 should not be contained."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * 4. Leading and trailing whitespaces for each token are stripped."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * 5. Repeated whitespaces are collapsed."},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * 6. Duplicate options resolve to last specified"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     * Commands are stored in \u0027/command\u0027 key, and corresponding text in \u0027/text\u0027 key,"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * to disambiguate from potential \u0027command\u0027 and \u0027text\u0027 options, and avoids accidental"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     * overwriting of command."},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     * @param userInput user input string from program"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * @return UserInputTokenSet"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * @see UserInputTokenSet"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public static UserInputTokenSet parse(String userInput) throws DukeExceptionIllegalArgument {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        String[] t \u003d userInput.strip().split(\"\\\\s+\"); // tokenize and remove duplicate whitespaces"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        Queue\u003cString\u003e tokens \u003d new LinkedList\u003c\u003e(Arrays.asList(t));"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d new UserInputTokenSet();"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        // No command"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        assert tokens.peek() !\u003d null;"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        if (tokens.peek().isEmpty()) {"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalCommand(\"Command must be provided.\");"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        // Read command and text"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"/command\", extractCommand(tokens));"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"/text\", extractText(tokens));"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        // Process arguments"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        while (!tokens.isEmpty()) {"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"            String optionToken \u003d extractOption(tokens);"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"            tokenSet.set(optionToken, extractText(tokens));"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        return tokenSet;"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    private static String extractCommand(Queue\u003cString\u003e tokens) {"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"        assert !tokens.isEmpty();"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        return tokens.poll().toLowerCase();"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"    private static String extractOption(Queue\u003cString\u003e tokens) {"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"        assert !tokens.isEmpty();"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        String option \u003d tokens.poll().toLowerCase();"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        if (option.startsWith(\"/\")) { // removes option indicator"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"            return option.substring(1);"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"        return option;"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"    private static String extractText(Queue\u003cString\u003e tokens) {"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e textTokens \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"        while (!tokens.isEmpty()) { // note: tokens can be empty"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"            if (isOptionToken(tokens.peek())) {"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"                break;"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"            textTokens.add(tokens.poll());"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"        return String.join(\" \", textTokens);"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"    /** Returns true if only one \u0027/\u0027 exists, specifically at start of string */"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"    private static boolean isOptionToken(String token) {"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        return token.startsWith(\"/\") \u0026\u0026 (token.lastIndexOf(\"/\") \u003d\u003d 0);"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":93}},{"path":"src/main/java/duke/parser/filestring/DeadlineFileStringParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser.filestring;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Parser class to read and write Deadline to file."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"public class DeadlineFileStringParser extends TaskFileStringParser {"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"     * Generates file string for Deadline."},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * @param task Deadline"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     * @return string representation of deadline to be written to file"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public String toFileString(Task task) {"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        Deadline deadline \u003d (Deadline) task;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        String description \u003d deadline.getDescription();"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        String datetime \u003d deadline.getDatetimeString();"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        String done \u003d deadline.getDone() ? \"1\" : \"0\";"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        return String.format(\"deadline\\t%s\\t%s\\t%s\", description, datetime, done);"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * Reads file string for Deadline."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @param deadlineFileString string representation of Deadline"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @return Deadline"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When Deadline parsing fails"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public Task fromFileString(String deadlineFileString) throws DukeExceptionIllegalArgument {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        String[] data \u003d deadlineFileString.split(\"\\t\");"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        assert data.length \u003d\u003d 4;"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        assert data[0].equals(\"deadline\");"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        String description \u003d data[1];"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        String datetime \u003d data[2];"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        boolean done \u003d data[3].equals(\"1\");"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        return new Deadline(description, datetime, done);"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":43}},{"path":"src/main/java/duke/parser/filestring/EventFileStringParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser.filestring;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Parser class to read and write Event to file."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"public class EventFileStringParser extends TaskFileStringParser {"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"     * Generates file string for Event."},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * @param task Event"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     * @return string representation of event to be written to file"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public String toFileString(Task task) {"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        Event event \u003d (Event) task;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        String description \u003d event.getDescription();"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        String datetime \u003d event.getDatetimeString();"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        String done \u003d event.getDone() ? \"1\" : \"0\";"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        return String.format(\"event\\t%s\\t%s\\t%s\", description, datetime, done);"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * Reads file string for Event."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @param eventFileString string representation of Event"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @return Event"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When Event parsing fails"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public Task fromFileString(String eventFileString) throws DukeExceptionIllegalArgument {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        String[] data \u003d eventFileString.split(\"\\t\");"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        assert data.length \u003d\u003d 4;"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        assert data[0].equals(\"event\");"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        String description \u003d data[1];"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        String datetime \u003d data[2];"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        boolean done \u003d data[3].equals(\"1\");"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        return new Event(description, datetime, done);"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":43}},{"path":"src/main/java/duke/parser/filestring/GetTaskFileStringParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser.filestring;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Todo;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * Class to select appropriate FileStringParser."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * To adhere to SRP. Many different patterns..."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public class GetTaskFileStringParser {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    public TaskFileStringParser getFileStringParser(String fileString)"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"            throws DukeExceptionIllegalArgument {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        String[] tokens \u003d fileString.split(\"\\\\t\", 2);"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        assert tokens.length \u003e 1;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        switch (tokens[0]) {"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        case \"event\":"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"            return new EventFileStringParser();"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        case \"todo\":"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"            return new TodoFileStringParser();"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        case \"deadline\":"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"            return new DeadlineFileStringParser();"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        default:"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Invalid task type in file.\");"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    public TaskFileStringParser getFileStringParser(Task task)"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            throws DukeExceptionIllegalArgument {"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        if (task instanceof Event) {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            return new EventFileStringParser();"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        } else if (task instanceof Todo) {"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            return new TodoFileStringParser();"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        } else if (task instanceof Deadline) {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            return new DeadlineFileStringParser();"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Invalid task class.\");"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":44}},{"path":"src/main/java/duke/parser/filestring/TaskFileStringParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser.filestring;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * Abstract parent for individual filestring parsers."},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"public abstract class TaskFileStringParser {"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    public abstract String toFileString(Task task);"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    public abstract Task fromFileString(String deadlineFileString) throws DukeExceptionIllegalArgument;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":14}},{"path":"src/main/java/duke/parser/filestring/TodoFileStringParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser.filestring;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Todo;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * Parser class to read and write Todo to file."},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"public class TodoFileStringParser extends TaskFileStringParser {"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"     * Generates file string for Todo."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     * @param task Todo"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * @return string representation of todo to be written to file"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public String toFileString(Task task) {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        Todo todo \u003d (Todo) task;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        String description \u003d todo.getDescription();"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        String done \u003d todo.getDone() ? \"1\" : \"0\";"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        return String.format(\"todo\\t%s\\t%s\", description, done);"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * Reads file string for Todo."},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * @param todoFileString string representation of Todo"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * @return Todo"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    public Task fromFileString(String todoFileString) {"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        String[] data \u003d todoFileString.split(\"\\t\");"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        assert data.length \u003d\u003d 3;"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        assert data[0].equals(\"todo\");"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        String description \u003d data[1];"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        boolean done \u003d data[2].equals(\"1\");"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        return new Todo(description, done);"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":39}},{"path":"src/main/java/duke/responses/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.responses;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Association class between GUI controller and Duke."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * Response class written because of the need to shovel the error messages to the GUI"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * as well, which required tagging of responses by Duke."},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"public class Response {"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    private final ResponseStatus status;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    private final String message;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    private Response(ResponseStatus status, String message) {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"        this.status \u003d status;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"        this.message \u003d message;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    /** For easy multiline string concatenation */"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    private Response(ResponseStatus status, String[] messages) {"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        this(status, String.join(\"\\n\", messages));"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    /** Constructor with responseType defaulted to OK */"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    public static Response createResponseOk(String message) {"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        return new Response(ResponseStatus.OK, message);"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    /** Constructor with responseType defaulted to OK */"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    public static Response createResponseOk(String ... messages) {"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        return new Response(ResponseStatus.OK, messages);"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    /** Constructor with responseType defaulted to BAD */"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public static Response createResponseBad(String message) {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        return new Response(ResponseStatus.BAD, message);"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    /** Constructor with responseType defaulted to EXIT */"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    public static Response createResponseExit() {"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        return new Response(ResponseStatus.EXIT, \"\");"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    /** Gets response status. */"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    public ResponseStatus getStatus() {"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        return status;"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    /** Gets response message. */"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    public String getMessage() {"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        return message;"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":52}},{"path":"src/main/java/duke/responses/ResponseStatus.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.responses;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Response types by Duke."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * OK indicates user input is valid and operations were performed successfully."},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * BAD indicates user input is invalid, or operations failed."},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * EXIT is a signal to the program to terminate immediately."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"public enum ResponseStatus {"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    OK,"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    BAD,"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    EXIT"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":14}},{"path":"src/main/java/duke/storage/FileLoader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.io.BufferedReader;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import java.io.File;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.io.FileReader;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotAccessible;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public class FileLoader {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    protected File f;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    private boolean isWritable;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    private boolean isReadable;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * Loads the string path to the task database."},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     * If uninitialized, will attempt to initialize."},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * Checks whether file is readable/writable prior to loading of tasks."},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * @param pathStr Path to database."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionFileNotAccessible If file cannot be created/read."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    public FileLoader(String pathStr) throws DukeExceptionFileNotAccessible {"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        f \u003d new File(pathStr);"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        isReadable \u003d f.canRead();"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        isWritable \u003d f.canWrite();"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        if (!isReadable) {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            if (!f.getParentFile().mkdirs()) {"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionFileNotAccessible(\"Unable to create directory to file.\");"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"                f.createNewFile();"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"                isReadable \u003d f.canRead();"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"                isWritable \u003d f.canWrite();"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            } catch (IOException e) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionFileNotAccessible(\"Unable to create file.\");"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        if (!isReadable) {"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionFileNotAccessible(\"Unable to read file.\");"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * Throws exception if file not writable."},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     * Used to indicate that a file can be read, but cannot be written (read-only)."},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionFileNotWritable When file cannot be written to."},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    public void throwIfNotWritable() throws DukeExceptionFileNotWritable {"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        if (!isWritable) {"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionFileNotWritable(\"Unable to write to file.\");"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * Writes tasks in tasklist to file."},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"     * @param t TaskList."},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionFileNotWritable When file cannot be written to."},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    public void write(TaskList t) throws DukeExceptionFileNotWritable {"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        if (isWritable) {"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"            try (FileWriter writer \u003d new FileWriter(f, false)) {"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"                for (String s: t.asArrayList()) {"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"                    writer.write(s + \u0027\\n\u0027);"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"            } catch (IOException e) {"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionFileNotWritable(\"Unable to write to file.\");"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"            } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionFileNotWritable(\"Problem with task.\");"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"     * Reads tasks using file pointer initialized in constructor."},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"     * @return TaskList."},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When file cannot be read/loaded."},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"    public TaskList read() throws DukeExceptionFileNotAccessible, DukeExceptionIllegalArgument {"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(f));"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"            String line;"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"            ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"                tasks.add(line);"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"            return TaskList.fromFileStrings(tasks);"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"        } catch (IOException e) {"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"            // Can happen with directory change"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Error in reading file.\");"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":104}},{"path":"src/main/java/duke/tasks/DateTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.DatetimeParser;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * DateTask class."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * Extension of Task class to include a datetime field and"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * the corresponding datetime getter. Field set during construction."},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public abstract class DateTask extends Task {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    private LocalDateTime datetime;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for DateTask."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of DateTask."},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    protected DateTask(String description, boolean isDone) {"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * Returns datetime field of DateTask."},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * @return Datetime."},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public LocalDateTime getDatetime() {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        return datetime;"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * Sets datetime field."},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public void setDatetime(LocalDateTime datetime) {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        this.datetime \u003d datetime;"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     * Parses datetime for DateTask from string."},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * @param datetime string representation of datetime"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * @return LocalDateTime"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When datetime parsing fails"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"    protected static LocalDateTime parseDatetime(String datetime) throws DukeExceptionIllegalArgument {"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        return DatetimeParser.parseDate(datetime);"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     * Returns string representation of datetime in ISO format"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"     * @return string representation of datetime"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    public String getDatetimeString() {"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        return DatetimeParser.formatDateIso(datetime);"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":64}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * Deadline class."},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * A time-based class that tracks a description and a deadline."},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * @see duke.tasks.Event"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"public final class Deadline extends DateTask {"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for a Deadline."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Deadline."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     * @param datetime LocalDateTime of deadline."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    public Deadline(String description, String datetime, boolean isDone) throws DukeExceptionIllegalArgument {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        setDatetime(parseDatetime(datetime));"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * Returns new Deadline by parsing user string input."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * Input validation for date present. Dates should be provided as an argument"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * to the \u0027/by\u0027 flag, following the description, e.g."},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * {@code deadline \u003cdescription\u003e /by \u003cdatetime\u003e}. \u0027/done\u0027 flag can be optionally provided"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     * to mark as completed."},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * Datetime formats are specified in {@link duke.parser.DatetimeParser }."},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     * @param tokenSet User input tokens"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     * @return Deadline"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When description is empty, datetime is empty,"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     *                                      or datetime is invalid."},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public static Deadline parse(UserInputTokenSet tokenSet) throws DukeExceptionIllegalArgument {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        if (tokenSet.get(\"/text\").isEmpty()) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of a deadline cannot be empty.\");"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        if (!tokenSet.contains(\"by\")) {"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument("},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"                    \"A deadline must have both description and time,\\ndelimited by \u0027/by\u0027.\");"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        return new Deadline("},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.get(\"/text\"),"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.get(\"by\"),"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.contains(\"done\"));"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Deadline."},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + getDatetimeString() + \")\";"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":64}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Event class."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * A time-based class that tracks a description and an event time."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * @see duke.tasks.Deadline"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public final class Event extends DateTask {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for an Event."},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Event."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * @param datetime LocalDateTime of Event."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public Event(String description, String datetime, boolean isDone) throws DukeExceptionIllegalArgument {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        setDatetime(parseDatetime(datetime));"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * Returns new Event by parsing user input tokens."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * Input validation for date present. Dates should be provided as an argument"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * to the \u0027/at\u0027 flag, following the description, e.g."},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     * {@code event \u003cdescription\u003e /at \u003cdatetime\u003e}. \u0027/done\u0027 flag can be optionally provided"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * to mark as completed."},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     * Datetime formats are specified in {@link duke.parser.DatetimeParser }."},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     * @param tokenSet User input tokens"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * @return Event"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When description is empty, datetime is empty,"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     *                                      or datetime is invalid."},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    public static Event parse(UserInputTokenSet tokenSet) throws DukeExceptionIllegalArgument {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        if (tokenSet.get(\"/text\").isEmpty()) {"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of an event cannot be empty.\");"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        if (!tokenSet.contains(\"at\")) {"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument("},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"                    \"An event must have both description and time,\\ndelimited by \u0027/at\u0027.\");"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        return new Event("},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.get(\"/text\"),"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.get(\"at\"),"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.contains(\"done\"));"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Event."},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + getDatetimeString() + \")\";"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":65}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Task class."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * Bulk of the definition comes from the original webpage by CS2103 at"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * { @link https://nus-cs2103-ay2021s2.github.io/website/schedule/week2/project.html }."},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * General class representing all tasks. Should not be instantiated directly."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"public abstract class Task {"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    private String description;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    private boolean isDone;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for Task."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Task."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    protected Task(String description, boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        this.description \u003d description;"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * Returns description of Task."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @return Description."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    public String getDescription() {"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        return description;"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     * Replaces description of Task."},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    public void setDescription(String d) {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        description \u003d d;"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     * Returns whether task is done."},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"     * @return True if task is done."},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    public boolean getDone() {"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        return isDone;"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * Marks task as done."},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     * No exception thrown if task is already marked as done."},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    public void setDone() {"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        isDone \u003d true;"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Task."},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        return \"[\" + (isDone ? \"\\u2713\" : \"\\u2718\") + \"] \" + getDescription();"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":69}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.filestring.GetTaskFileStringParser;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"public class TaskList {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    private final ArrayList\u003cTask\u003e tasks; // composition"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for TaskList."},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * Creates empty TaskList."},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for TaskList"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     * Initializes a TaskList based on an array of un-parsed task strings."},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * @param taskStrings List of task Strings."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When parsing fails."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    public static TaskList fromFileStrings(ArrayList\u003cString\u003e taskStrings) throws DukeExceptionIllegalArgument {"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        TaskList tasklist \u003d new TaskList();"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        GetTaskFileStringParser parserFactory \u003d new GetTaskFileStringParser();"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        for (String s: taskStrings) {"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            Task t \u003d parserFactory.getFileStringParser(s).fromFileString(s);"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            tasklist.addTask(t);"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        return tasklist;"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     * Sets a task within the list as done."},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     * Uses 1-based indexing."},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"     * @param taskIndex Index of task in list."},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument If the 1-based index is invalid."},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    public void setDone(int taskIndex) throws DukeExceptionIllegalArgument {"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        getTask(taskIndex).setDone();"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * Gets a task from the list using the index."},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     * Uses 1-based indexing."},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     * @param taskIndex Index of task in list."},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     * @return Task."},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument If the 1-based index is invalid."},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    public Task getTask(int taskIndex) throws DukeExceptionIllegalArgument {"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        if (tasks.size() \u003c\u003d taskIndex || taskIndex \u003c 0) {"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The task number must be valid.\");"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * Gets a task from the list using the index, in an unsafe manner."},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"     * Uses 1-based indexing. Input index must already be validated."},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"     * @param taskIndex Index of task in list."},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"     * @return Task."},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"    public Task getTaskUnsafe(int taskIndex) {"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"     * Removes a task from the list using the index."},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"     * Uses 1-based indexing."},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"     * @param taskIndex Index of task in list."},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument If the 1-based index is invalid."},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"    public void deleteTask(int taskIndex) throws DukeExceptionIllegalArgument {"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"        if (tasks.size() \u003c\u003d taskIndex || taskIndex \u003c 0) {"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The task number must be valid.\");"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        tasks.remove(taskIndex);"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"     * Removes all tasks from the list."},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"    public void deleteAll() {"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"        tasks.clear();"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"     * Appends a task to the list"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"     * @param t Task."},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"    public void addTask(Task t) {"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"        tasks.add(t);"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"     * Returns the size of the task list."},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"     * @return Size of list."},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"    public int size() {"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"        return tasks.size();"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"     * Returns an ArrayList of parsed task strings."},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"     * For writing into file."},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"     * @return ArrayList of task Strings."},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When task type is not supported for conversion."},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"    public ArrayList\u003cString\u003e asArrayList() throws DukeExceptionIllegalArgument {"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"        GetTaskFileStringParser parserFactory \u003d new GetTaskFileStringParser();"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"        for (Task t: tasks) {"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"            String taskString \u003d parserFactory.getFileStringParser(t).toFileString(t);"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"            taskStrings.add(taskString);"},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"        return taskStrings;"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"     * Returns left-spaced padding required to align all tasks in tasklist, given 1-based index."},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"     * @param index 1-based index"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"     * @return String left padding"},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":143,"author":{"gitId":"pyuxiang"},"content":"    public String getLeftPadding(int index) {"},{"lineNumber":144,"author":{"gitId":"pyuxiang"},"content":"        int totalNumDigits \u003d (int) Math.floor(Math.log10(tasks.size())) + 1;"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"        int currNumDigits \u003d (int) Math.floor(Math.log10(index)) + 1;"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"        return new String(new char[totalNumDigits - currNumDigits]).replace(\u0027\\0\u0027, \u0027 \u0027);"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":148}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" * Todo class."},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * A simple Task that does not require any other features other"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * than a description of the task."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public final class Todo extends Task {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for a Todo."},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of todo."},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * Returns new Todo by parsing user string input."},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * No input validation is performed. \u0027/done\u0027 flag can be optionally provided"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * to mark as completed."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @param tokenSet User input tokens"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @return Todo"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When description is empty."},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public static Todo parse(UserInputTokenSet tokenSet) throws DukeExceptionIllegalArgument {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        if (tokenSet.get(\"/text\").isEmpty()) {"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of a todo cannot be empty.\");"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        return new Todo("},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.get(\"/text\"),"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"                tokenSet.contains(\"done\"));"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Todo."},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":52}},{"path":"src/main/java/duke/ui/PreformattedMessages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"public class PreformattedMessages {"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"    /** Main program logo */"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"    public static final String WELCOME_SCREEN \u003d"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"            \" ____        _        \\n\""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\\n\";"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    private static final String DUKE_WELCOME \u003d \"Welcome to Duke!\\n\\n\";"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     * Get load screen upon successful task list load."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     * If number of tasks is 0, message printed assumed no task list exists."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     * Otherwise, number of tasks is also printed."},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     * @param numTasks Number of tasks in loaded list."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    public static String getLoadingSuccessMessage(int numTasks) {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        if (numTasks \u003d\u003d 0) {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"            return PreformattedMessages.DUKE_WELCOME"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"                    + \"No existing tasks found.\\n\""},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"                    + \"A new task list has been created to get you started :)\";"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"            return PreformattedMessages.DUKE_WELCOME"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"                    + \"Existing task list loaded successfully.\\n\""},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"                    + \"You have \" + numTasks + \" task\" + (numTasks \u003d\u003d 1 ? \"\" : \"s\") + \" in your list.\";"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * Prints load screen upon failure to write to file."},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     * For read-only file access by user - task list can still be loaded."},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     * Indication to user that file cannot be written to, and serves as important"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * signal to user that changes are not preserved."},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     * @param numTasks Number of tasks in loaded list."},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    public static String getFileWriteErrorMessage(int numTasks) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        return PreformattedMessages.DUKE_WELCOME"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"                + \"Warning: Destination file cannot be written to.\\n\""},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"                + \"Existing task list loaded, but changes will not be saved.\\n\\n\""},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"                + \"You have \" + numTasks + \" task\" + (numTasks \u003d\u003d 1 ? \"\" : \"s\") + \" in your list.\";"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     * Prints load screen upon failure to load file."},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * Occurs when directory cannot be created, or when file cannot be created"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     * or read."},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"    public static String getFileReadErrorMessage() {"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        return PreformattedMessages.DUKE_WELCOME"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"                + \"Warning: Destination file cannot be created/read.\\n\""},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"                + \"New task list created, but changes will not be saved.\";"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     * Prints load screen upon failure to load list."},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     * Occurs when file can be read, but the contents cannot be parsed"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * as a task list."},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    public static String getFileLoadErrorMessage() {"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"        return PreformattedMessages.DUKE_WELCOME"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"                + \"Warning: Existing task list cannot be loaded.\\n\""},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"                + \"A new task list has been created.\";"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":72}},{"path":"src/main/resources/view/InputHistoryBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"\u003cfx:root prefWidth\u003d\"286.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    \u003cLabel fx:id\u003d\"dialog\" wrapText\u003d\"true\" \u003e"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        \u003cpadding\u003e"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"            \u003cInsets top\u003d\"7.0\" bottom\u003d\"7.0\" left\u003d\"8.0\" right\u003d\"8.0\" /\u003e"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"        \u003c/padding\u003e"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    \u003c/Label\u003e"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"pyuxiang":13}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"\u003c?import javafx.scene.control.TextArea?\u003e"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"\u003cAnchorPane maxHeight\u003d\"600.0\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"600.0\" minWidth\u003d\"600.0\" prefHeight\u003d\"600.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"duke.controllers.MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    \u003cTextField fx:id\u003d\"userInput\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"525.0\" /\u003e"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"525.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"40.0\" prefWidth\u003d\"75.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"47.0\" text\u003d\"RESPONSE\" /\u003e"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    \u003cAnchorPane layoutY\u003d\"70.0\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\"\u003e"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        \u003cTextArea fx:id\u003d\"responseContainer\" prefHeight\u003d\"300.0\" prefWidth\u003d\"300.0\" editable\u003d\"false\" focusTraversable\u003d\"false\" /\u003e"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    \u003c/AnchorPane\u003e"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    \u003cLabel layoutX\u003d\"10.0\" layoutY\u003d\"377.0\" text\u003d\"HISTORY\" /\u003e"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" layoutY\u003d\"400.0\" prefHeight\u003d\"200.0\" prefWidth\u003d\"300.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        \u003cVBox fx:id\u003d\"inputHistoryContainer\" /\u003e"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    \u003cLabel layoutX\u003d\"310.0\" layoutY\u003d\"47.0\" text\u003d\"TASKS\" /\u003e"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    \u003cAnchorPane layoutX\u003d\"300.0\" layoutY\u003d\"70.0\" prefHeight\u003d\"531.0\" prefWidth\u003d\"300.0\"\u003e"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        \u003cTextArea fx:id\u003d\"tasklistContainer\" prefHeight\u003d\"531.0\" prefWidth\u003d\"300.0\" editable\u003d\"false\" focusTraversable\u003d\"false\" /\u003e"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    \u003c/AnchorPane\u003e"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"pyuxiang":29}},{"path":"src/test/java/DatetimeParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import static duke.parser.DatetimeParser.parseDate;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.function.Executable;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public class DatetimeParserTest {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    // No idea how to test for current dates..."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    void parseDate_datesAfterCurrent_noExceptions() {"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime curr \u003d LocalDateTime.of(2020, 1, 15, 3, 7, 49, 123456789);"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"            assertEquals(LocalDateTime.of(2020, 1, 15, 4, 8), parseDate(\"4:08\", curr));"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"            fail(\"Should not throw exception.\");"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    void parseDate_invalidMinutes_throwException() {"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"3:5\", now));"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"3:5 2021-08-09\", now));"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    void parseDate_wrongInput_throwException() {"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020\")); // year only"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020-21\")); // no day"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020-21-09\")); // wrong month"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09-09-09\")); // wrong year, size !\u003d 4"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09-09-2020\")); // wrong format, not ISO"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09-09\")); // no year"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9 march\")); // no capitalize"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9 mar\"));"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"mar 9\"));"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"march 9\"));"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"March\")); // no day"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"Mar 2020\"));"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020 Mar\"));"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020 Mar 09\")); // wrong order"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09 09 09\"));"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09 Sep 09\"));"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9.3\")); // wrong minute"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9:3\"));"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9:61\"));"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"90:3\")); // wrong hour"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"30:4\"));"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9.3.2020\")); // no such date"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        // no such date"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    private void assertThrowsIllegal(Executable x) {"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        assertThrows(DukeExceptionIllegalArgument.class, x);"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":68}},{"path":"src/test/java/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Event;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public class EventTest {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    private UserInputTokenSet tokenSet;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    @BeforeEach"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    void init() {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        tokenSet \u003d new UserInputTokenSet();"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_notDone() throws DukeExceptionIllegalArgument {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"/text\", \"event name\");"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"at\", \"2020-09-08\");"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        Event event \u003d Event.parse(tokenSet);"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"event name\", event.getDescription());"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        assertFalse(event.getDone());"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_done() throws DukeExceptionIllegalArgument {"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"/text\", \"event name2\");"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"at\", \"2020-09-28\");"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"done\", \"\");"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        Event event \u003d Event.parse(tokenSet);"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"event name2\", event.getDescription());"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(event.getDone());"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":39}},{"path":"src/test/java/JUnitUtility.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import java.io.ByteArrayInputStream;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.io.InputStream;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import java.io.PrintStream;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class JUnitUtility {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    private static final InputStream STDIN \u003d System.in;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    private static final PrintStream STDOUT \u003d System.out;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    private static final PrintStream STDERR \u003d System.err;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"     * Redirect stdin to different stream with message."},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * @param input initial message in new stream"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public static void prepareStdin(String input) {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        input \u003d String.join(System.lineSeparator(), input.split(\"\\n\"));"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * Redirect stdout to different stream."},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    public static ByteArrayOutputStream prepareStdout() {"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        System.setOut(new PrintStream(out));"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        return out;"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * Resets stdin to original stream."},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public static void resetStdin() {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        System.setIn(STDIN);"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * Resets stdout to original stream."},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public static void resetStdout() {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        System.setOut(STDOUT);"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":44}},{"path":"src/test/java/UserInputTokenSetTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * Test wrapping of UserInputTokenSet dictionary."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" * Relatively trivial."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"public class UserInputTokenSetTest {"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    private UserInputTokenSet tokenSet;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    @BeforeEach"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    void init() {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        tokenSet \u003d new UserInputTokenSet();"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    void set() {"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"text\", \"foo\");"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"randomStringOfCharacters\", \"bar\");"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    void set_get() {"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"text\", \"hello\");"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(tokenSet.get(\"text\"), \"hello\");"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(tokenSet.get(\"\"), \"\");"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(tokenSet.get(\"textDoesNotExist\"), \"\");"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"    void set_contains() {"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        tokenSet.set(\"text\", \"hello\");"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        assertTrue(tokenSet.contains(\"text\"));"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        assertFalse(tokenSet.contains(\"\"));"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        assertFalse(tokenSet.contains(\"textDoesNotExist\"));"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":46}},{"path":"src/test/java/UserInputTokenizerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalCommand;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenSet;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.UserInputTokenizer;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"public class UserInputTokenizerTest {"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_command() throws DukeExceptionIllegalArgument {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"command\");"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"command\", tokenSet.get(\"/command\"));"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"/text\"));"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"\"));"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandText() throws DukeExceptionIllegalArgument {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 text text\");"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"text text\", tokenSet.get(\"/text\"));"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"\"));"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandTextWhiteSpaces() throws DukeExceptionIllegalArgument {"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"  cmd1   text text   text  \");"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"text text text\", tokenSet.get(\"/text\"));"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"\"));"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandTextSlashes() throws DukeExceptionIllegalArgument {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 text text/ /text/ //text text\");"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"text text/ /text/ //text text\", tokenSet.get(\"/text\"));"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"text\"));"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"\"));"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandTextWithOneOption() throws DukeExceptionIllegalArgument {"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 text text /by \");"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"text text\", tokenSet.get(\"/text\"));"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"by\"));"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"text\"));"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"\"));"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandTextWithOneOptionSpecified() throws DukeExceptionIllegalArgument {"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 text text /by then\");"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"text text\", tokenSet.get(\"/text\"));"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"then\", tokenSet.get(\"by\"));"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"text\"));"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"\"));"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandTextWithManyOptionsSpecified() throws DukeExceptionIllegalArgument {"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 text /by then  /at  23/01/1996  morning\");"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"text\", tokenSet.get(\"/text\"));"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"then\", tokenSet.get(\"by\"));"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"23/01/1996 morning\", tokenSet.get(\"at\"));"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"1996\"));"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"text\"));"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"\"));"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandWithManyOptions() throws DukeExceptionIllegalArgument {"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 /by /at\");"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"by\"));"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"at\"));"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"/text\"));"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandWithOneOptionSpecified() throws DukeExceptionIllegalArgument {"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 /by then\");"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"then\", tokenSet.get(\"by\"));"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"/text\"));"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"\", tokenSet.get(\"text\"));"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"    void parse_validInput_commandTextWithCommandOptionSpecified() throws DukeExceptionIllegalArgument {"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"        UserInputTokenSet tokenSet \u003d UserInputTokenizer.parse(\"cmd1 hi /command cmd2 /text hey\");"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd1\", tokenSet.get(\"/command\"));"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"hi\", tokenSet.get(\"/text\"));"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"cmd2\", tokenSet.get(\"command\"));"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"        assertEquals(\"hey\", tokenSet.get(\"text\"));"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"    void parse_faultyInput_noCommand() {"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"        assertThrows(DukeExceptionIllegalCommand.class, () -\u003e UserInputTokenizer.parse(\"\"));"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":109}}]
