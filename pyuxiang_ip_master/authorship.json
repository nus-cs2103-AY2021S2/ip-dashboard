[{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import duke.commands.DukeCommand;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.*;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    private FileLoader loader;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    private TaskList tasks;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    private Ui ui;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    private boolean isLocalTaskList; // in event file cannot be written to"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     * Initializes the main program given directory used to save user tasks."},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     * Attempts to load the task list from the file, displaying the status"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * of the task list depending on load success."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * @param filePath UNIX-like directory path to file."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     *                 Does not need to be initialized beforehand."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public Duke(String filePath) {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        ui.showWelcomeScreen();"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        isLocalTaskList \u003d false;"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            loader \u003d new FileLoader(filePath);"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            tasks \u003d loader.read();"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            loader.throwIfNotWritable(); // can read but cannot write"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            ui.showLoadingSuccess(tasks.size());"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotWritable e) {"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            isLocalTaskList \u003d true;"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            ui.showFileWriteError(tasks.size());"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionFileNotAccessible e) {"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            isLocalTaskList \u003d true;"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            ui.showFileLoadingError();"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            ui.showLoadingError();"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * Executes the main REPL for the program."},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    public void run() {"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        boolean isProgramTerminating \u003d false;"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        while (!isProgramTerminating) {"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"                String input \u003d ui.getUserInput(\"\u003e\u003e\u003e \");"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"                DukeCommand cmd \u003d DukeCommand.parse(input);"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"                cmd.execute(tasks, ui, loader);"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"                isProgramTerminating \u003d cmd.isExit();"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"            } catch (DukeExceptionFileNotWritable e) {"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"                if (isLocalTaskList) {"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"                ui.showError(e);"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"            } catch (DukeException e) {"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"                ui.showError(e);"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":70,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        new Duke(\"./dukeData/tasks.txt\").run();"},{"lineNumber":72,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pyuxiang":69,"-":4}},{"path":"src/main/java/duke/commands/DukeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionCommandNotFound;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Event;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Todo;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public abstract class DukeCommand {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    public boolean isExit() {"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        return false;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * Returns command based on user input line."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * The first-hop parsing occurs here."},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     * The rest of the parsing is offloaded to the individual parsing classes."},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * @param line User input string."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * @return DukeCommand."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionCommandNotFound When command supplied is invalid."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When task parsing error occurs."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    public static DukeCommand parse(String line)"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            throws DukeExceptionCommandNotFound, DukeExceptionIllegalArgument {"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        line \u003d line.strip(); // input sanitization"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        String arg \u003d \"\", cmd \u003d line;"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        if (line.contains(\" \")) {"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            int splitIdx \u003d line.indexOf(\u0027 \u0027);"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            cmd \u003d line.substring(0, splitIdx); // automatically stripped"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            arg \u003d line.substring(splitIdx+1).strip();"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        cmd \u003d cmd.toLowerCase();"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        Task task;"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        switch (cmd) {"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        case \"bye\":"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandBye();"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        case \"list\":"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandList(arg);"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        case \"done\":"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandDone(arg);"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        case \"delete\":"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandDelete(arg);"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        case \"event\":"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Event.parse(arg);"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandAdd(task);"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        case \"todo\":"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Todo.parse(arg);"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandAdd(task);"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        case \"deadline\":"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Deadline.parse(arg);"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandAdd(task);"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        case \"find\":"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"            return new DukeCommandFind(arg);"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        default:"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionCommandNotFound(\"Command \u0027\" + cmd + \"\u0027 is invalid. Valid commands:\""},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"                    + \"\\nbye, list, done, delete, event, todo, deadline\");"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"    public abstract void execute(TaskList tasks, Ui ui, FileLoader loader) throws DukeException;"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":70}},{"path":"src/main/java/duke/commands/DukeCommandAdd.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * Add command."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * Adds task to task list and writes changes to file."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandAdd extends DukeCommand {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    private Task task;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandAdd(Task task) {"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        this.task \u003d task;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public void execute(TaskList tasks, Ui ui, FileLoader loader) throws DukeExceptionFileNotWritable {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        tasks.addTask(task);"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        loader.write(tasks);"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        ui.showMessage("},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"                \"Got it. I\u0027ve added this task:\","},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"                \"  \" + task,"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"                \"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":31}},{"path":"src/main/java/duke/commands/DukeCommandBye.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Exit command."},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * Allows main loop to terminate program."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandBye extends DukeCommand {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    public boolean isExit() {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"        return true;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    public void execute(TaskList tasks, Ui ui, FileLoader loader) {"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        ui.showMessage(\"Bye. Hope to see you again soon!\");"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":22}},{"path":"src/main/java/duke/commands/DukeCommandDelete.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * Delete command."},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * Removes single or all tasks from task list, the latter executed using the \u0027delete all\u0027"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" * keyphrase."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandDelete extends DukeCommand {"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    private int index;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandDelete(int index) {"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        this.index \u003d index;"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandDelete(String arg) throws DukeExceptionIllegalArgument {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        if (arg.equals(\"all\")) {"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"            this.index \u003d -1; // Special delete all"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"                this.index \u003d Integer.parseInt(arg) - 1;"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            } catch (Exception e) {"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionIllegalArgument(\"Need to specify task number to delete.\");"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    public void execute(TaskList tasks, Ui ui, FileLoader loader)"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            throws DukeExceptionFileNotWritable, DukeExceptionIllegalArgument{"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            String reply \u003d ui.getUserInput(\"Confirm deletion of all tasks (y/[n])? \");"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            if (reply.equalsIgnoreCase(\"y\")) {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"                tasks.deleteAll();"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"                loader.write(tasks);"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"                ui.showMessage(\"All tasks successfully deleted.\");"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            } else {"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"                ui.showMessage(\"No tasks deleted.\");"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"            Task task \u003d tasks.getTask(index);"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            tasks.deleteTask(index);"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            loader.write(tasks);"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            ui.showMessage("},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"                    \"Noted. I\u0027ve removed this task:\","},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"                    \"  \" + task,"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"                    \"Now you have \" + tasks.size() + \" tasks in the list.\");"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":59}},{"path":"src/main/java/duke/commands/DukeCommandDone.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * Done command."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * Marks task as done and saves task list to file."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandDone extends DukeCommand {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    private int index;"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandDone(int index) {"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        this.index \u003d index;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandDone(String arg) throws DukeExceptionIllegalArgument {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"            this.index \u003d Integer.parseInt(arg) - 1;"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        } catch (Exception e) {"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Need to specify task number to mark as done.\");"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    public void execute(TaskList tasks, Ui ui, FileLoader loader)"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            throws DukeExceptionFileNotWritable, DukeExceptionIllegalArgument {"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        tasks.setDone(index);"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        loader.write(tasks);"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        ui.showMessage(\"Nice! I\u0027ve marked this task as done:\", \"  \"+tasks.getTask(index));"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":36}},{"path":"src/main/java/duke/commands/DukeCommandFind.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.DateTask;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import java.util.Comparator;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"import java.util.Optional;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":" * Find command."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":" * Filters tasks according to supplied date range and displays list to user."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandFind extends DukeCommand {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    protected Optional\u003cLocalDateTime\u003e from;"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    protected Optional\u003cLocalDateTime\u003e to;"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    protected String search;"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandFind(String input) throws DukeExceptionIllegalArgument {"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"        // Process any keywords first, assumed stripped"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        search \u003d \"\";"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        if (!input.startsWith(\"/from \")\u0026\u0026(!input.startsWith(\"/to \"))) {"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            int searchIndex \u003d input.length();"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            int fromIndex \u003d input.indexOf(\" /from\");"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            int toIndex \u003d input.indexOf(\" /to\");"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            if (fromIndex !\u003d -1 \u0026\u0026 searchIndex \u003e fromIndex) {"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"                searchIndex \u003d fromIndex;"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            if (toIndex !\u003d -1 \u0026\u0026 searchIndex \u003e toIndex) {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"                searchIndex \u003d toIndex;"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            search \u003d input.substring(0, searchIndex);"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            input \u003d input.substring(searchIndex).strip();"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            input \u003d input.strip();"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        // Date parsing"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        from \u003d Optional.empty();"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        to \u003d Optional.empty();"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        if (input.startsWith(\"/from \")) {"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            input \u003d input.substring(6);"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            if (input.contains(\" /to \")) {"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"                String[] dates \u003d input.split(\" /to \");"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"                from \u003d Optional.of(Parser.parseDate(dates[0].strip()));"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"                to \u003d Optional.of(Parser.parseDate(dates[1].strip()));"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"            } else {"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"                from \u003d Optional.of(Parser.parseDate(input));"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        } else if (input.startsWith(\"/to \")) {"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            input \u003d input.substring(4);"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"            if (input.contains(\" /from \")) {"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"                String[] dates \u003d input.split(\" /from \");"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"                to \u003d Optional.of(Parser.parseDate(dates[0].strip()));"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"                from \u003d Optional.of(Parser.parseDate(dates[1].strip()));"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"            } else {"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"                to \u003d Optional.of(Parser.parseDate(input));"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"        if (from.isPresent() \u0026\u0026 to.isPresent() \u0026\u0026 from.get().isAfter(to.get())) {"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument("},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"                    \"\u0027/from\u0027 date must be before \u0027/to\u0027 date.\");"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"    public void execute(TaskList tasks, Ui ui, FileLoader loader) throws DukeExceptionIllegalArgument{"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        boolean datedSearch \u003d (from.isPresent() || to.isPresent());"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cTask\u003e view \u003d new ArrayList\u003c\u003e();"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cInteger\u003e viewIndex \u003d new ArrayList\u003c\u003e();"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"            Task task \u003d tasks.getTask(i);"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"            if (datedSearch) {"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"                if (!(task instanceof DateTask)) {"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"                DateTask datetask \u003d (DateTask) task;"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"                if (from.isPresent() \u0026\u0026 from.get().isAfter(datetask.getDatetime())) {"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"                if (to.isPresent() \u0026\u0026 to.get().isBefore(datetask.getDatetime())) {"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"            if (!task.getDescription().contains(search)) {"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"                continue;"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"            // If date enabled, must sort by DateTasks only."},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"            view.add(task);"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"            viewIndex.add(i+1);"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"        // Empty task view list"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"        if (view.isEmpty()) {"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"            List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\"No tasks matching search term / date range\");"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"            if (from.isPresent()) {"},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"                lines.add(\" from:  \" + Parser.formatDateFull(from.get()));"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"            if (to.isPresent()) {"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"                lines.add(\" till:  \" + Parser.formatDateFull(to.get()));"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"            if (!search.isBlank()) {"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"                lines.add(\" query: \u0027\" + search + \"\u0027\");"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"            ui.showMessage(lines);"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"            return;"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"        // Sorting disabled to allow list indexing... Might re-enable as option"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"        // Print list in sorted order of datetime"},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"        // IntelliJ\u0027s coding recommendations reduced it to this, pretty impressive"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"        // if (datedSearch) {"},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"        //     view.sort(Comparator.comparing(t -\u003e ((DateTask) t).getDatetime()));"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"        // } else {"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"        //    view.sort(Comparator.comparing(Task::getDescription));"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"        // }"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"        // Get output"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"        lines.add(\"Found \" + view.size() + \" task(s) matching search term / date range\");"},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":"        if (from.isPresent()) {"},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\" from:  \" + Parser.formatDateFull(from.get()));"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"        if (to.isPresent()) {"},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\" till:  \" + Parser.formatDateFull(to.get()));"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"        if (!search.isBlank()) {"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"            lines.add(\" query: \u0027\" + search + \"\u0027\");"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":"        lines.add(\"\");"},{"lineNumber":143,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c view.size(); i++) {"},{"lineNumber":144,"author":{"gitId":"pyuxiang"},"content":"            String s \u003d \"\" + viewIndex.get(i) + \". \" + view.get(i).toString();"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"            lines.add(s);"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":"        ui.showMessage(lines);"},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":149,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":149}},{"path":"src/main/java/duke/commands/DukeCommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.commands;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.storage.FileLoader;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Event;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Deadline;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.Task;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" * List command."},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":" * If \u0027toSort\u0027 is provided during construction, the list view will be"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":" * sorted in order of Todo \u003c Event (chronological) \u003c Deadline (chronological)."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"public class DukeCommandList extends DukeCommand {"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    protected boolean toSort;"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    public DukeCommandList(String arg) {"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        toSort \u003d arg.equals(\"sort\");"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    public void execute(TaskList tasks, Ui ui, FileLoader loader) throws DukeExceptionIllegalArgument {"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            ui.showMessage(\"There are no tasks in your list.\");"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        } else if (toSort) {"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            ArrayList\u003cTask\u003e view \u003d new ArrayList\u003c\u003e();"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"                view.add(tasks.getTask(i));"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            // Sort in order: Todo \u003c Event (chronological) \u003c Deadline (chronological)"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            view.sort((t1, t2) -\u003e {"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"                if (t1 instanceof Todo) {"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"                    return -1;"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"                } else if (t2 instanceof Todo) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"                    return 1;"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"                } else if (t1 instanceof Event) {"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"                    if (t2 instanceof Event) {"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"                        return ((Event) t1).getDatetime().compareTo(((Event) t2).getDatetime());"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"                    }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"                    return -1;"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"                } else if (t2 instanceof Event) {"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"                    return 1;"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"                } else if (t1 instanceof Deadline) {"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"                    if (t2 instanceof Deadline) {"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"                        return ((Deadline) t1).getDatetime().compareTo(((Deadline) t2).getDatetime());"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"                    }"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"                    return -1;"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"                } else {"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"                    return 1;"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"            });"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"            for (Task task: view) {"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"                lines.add(\" - \" + task.toString());"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"            ui.showMessage(\"Here are the tasks in your list, in sorted order:\", lines);"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"            ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"                lines.add((i+1) + \". \" + tasks.getTask(i));"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"            ui.showMessage(\"Here are the tasks in your list:\", lines);"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":74}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * General exception class for Duke."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * All exceptions thrown by Duke should inherit from this class."},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"public class DukeException extends Exception {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    protected String description;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    public DukeException(String description) {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"        return description;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":20}},{"path":"src/main/java/duke/exceptions/DukeExceptionCommandNotFound.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if Duke command cannot be parsed."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionCommandNotFound extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionCommandNotFound(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionFileNotAccessible.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if task database file cannot be accessed."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionFileNotAccessible extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionFileNotAccessible(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionFileNotWritable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if task database file cannot be written to."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionFileNotWritable extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionFileNotWritable(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionIllegalArgument.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if wrong user input is supplied."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionIllegalArgument extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionIllegalArgument(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionIllegalDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if wrong date format is supplied by user."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionIllegalDate extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionIllegalDate(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/exceptions/DukeExceptionInvalidTaskString.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.exceptions;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":" * Thrown if task loaded from database file cannot be parsed."},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"public class DukeExceptionInvalidTaskString extends DukeException {"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"    public DukeExceptionInvalidTaskString(String description) {"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":11}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalTime;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" * Parser class."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" * Handles primarily date parsing."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"public class Parser {"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     * List of supported datetime formats for parsing,"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * partially inspired by { @link https://balusc.omnifaces.org/2007/09/dateutil.html }."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter[] DATE_FORMATS \u003d new DateTimeFormatter[]{"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"            // Time"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"            // \"hh a\", \"hh.mm a\", // Same/Next day, 12-hour format, 00 minute"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm\"), // Same/Next day, 24-hour format"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"            // Date"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy\"), // Full date"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy\"),"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM yyyy\"),"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"),"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyyMMdd\"), // Shortcut"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M_yyyy\"), // Year required to parse datetime"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM_yyyy\"),"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM_yyyy\"),"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMM d_yyyy\"),"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMMM d_yyyy\"),"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"            // Datetime"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d/M/yyyy\"),"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMM yyyy\"),"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMMM yyyy\"),"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm yyyy-MM-dd\"),"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M/yyyy H:mm\"),"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM yyyy H:mm\"),"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM yyyy H:mm\"),"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd H:mm\"),"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d/M_yyyy\"), // Year required to parse datetime"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMM_yyyy\"),"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm d MMMM_yyyy\"),"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm MMM d_yyyy\"),"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"H:mm MMMM d_yyyy\"),"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d/M H:mm_yyyy\"),"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMM H:mm_yyyy\"),"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"d MMMM H:mm_yyyy\"),"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMM d H:mm_yyyy\"),"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"MMMM d H:mm_yyyy\"),"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    };"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter ISO_DATETIME_FORMAT \u003d"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"yyyy-MM-dd H:mm\");"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATE_FORMAT \u003d"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E, d MMM\");"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATE_YEAR_FORMAT \u003d"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E, d MMM yyyy\");"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATETIME_FORMAT \u003d"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E h:mm a, d MMM\");"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    private static final DateTimeFormatter READABLE_DATETIME_YEAR_FORMAT \u003d"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter.ofPattern(\"E h:mm a, d MMM yyyy\");"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"     * Parses datetime string relative to current time."},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"     * The datetime string must be in the following specified formats, with text"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"     * months in title case. In some cases, the time or date may be omitted, upon which"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"     * the parsing rules are as follows:"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"     * 1. If only time is supplied, parse as upcoming datetime with the specified time."},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"     * 2. If no time is supplied, parse as upcoming datetime at midnight."},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"     * 3. If year is not supplied, parse as upcoming datetime with the specified time/day/month."},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     * 4. If date and year supplied, parsed as specified datetime."},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"     * e.g. if datetime string is \"13 Jan\" and the current date is \"25 Jan 2021\","},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"     * this will be parsed as \"13 Jan 2022, 00:00\"."},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"     * Available date formats:"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"     * - 13 Sep"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"     * - 13 Sep 2020"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"     * - 13 September"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"     * - 13 September 2020"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"     * - 13/9"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"     * - 13/9/2020"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"     * - Sep 13"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"     * - September 13"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"     * - 2020-09-13"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"     * Available time formats:"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"     * - 9:23"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"     * - 23:09"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"     * Available datetime formats:"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"     * - 13 Sep 9:03"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"     * - 13/9 9:03"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"     * - 9:03 13 Sep"},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"     * - 9:03 13/9/2020"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"     * @param input Datetime string."},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"     * @return LocalDateTime."},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When parsing fails."},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"    public static LocalDateTime parseDate(String input) throws DukeExceptionIllegalArgument {"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"        return parseDate(input, LocalDateTime.now());"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"     * Parses datetime string relative to supplied datetime."},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"     * Method created primarily for mocking. See parsing rules for parseDate."},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"     * @param input Datetime string."},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"     * @param now LocalDateTime."},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"     * @return LocalDateTime."},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When parsing fails."},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"    public static LocalDateTime parseDate(String input, LocalDateTime now) throws DukeExceptionIllegalArgument {"},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"        input \u003d input.strip();"},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"        now \u003d now.withSecond(0).withNano(0);"},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"        String inputAddYear \u003d input+\"_\"+now.getYear();"},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"        for (int i \u003d 0; i \u003c DATE_FORMATS.length; i++) {"},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"            LocalDateTime date;"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"            DateTimeFormatter fmt \u003d DATE_FORMATS[i];"},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"            // No date supplied"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"            if (i \u003d\u003d 0) {"},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"                LocalTime readout;"},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"                try {"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"                    readout \u003d LocalTime.parse(input, fmt);"},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":"                date \u003d now.withHour(readout.getHour()).withMinute(readout.getMinute());"},{"lineNumber":143,"author":{"gitId":"pyuxiang"},"content":"                if (date.isBefore(now)) {"},{"lineNumber":144,"author":{"gitId":"pyuxiang"},"content":"                    date \u003d date.plusDays(1);"},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"            // No time supplied, assume midnight"},{"lineNumber":149,"author":{"gitId":"pyuxiang"},"content":"            else if (i \u003c\u003d 5) {"},{"lineNumber":150,"author":{"gitId":"pyuxiang"},"content":"                LocalDate readout;"},{"lineNumber":151,"author":{"gitId":"pyuxiang"},"content":"                try {"},{"lineNumber":152,"author":{"gitId":"pyuxiang"},"content":"                    readout \u003d LocalDate.parse(input, fmt);"},{"lineNumber":153,"author":{"gitId":"pyuxiang"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":154,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":155,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":156,"author":{"gitId":"pyuxiang"},"content":"                date \u003d readout.atTime(0, 0);"},{"lineNumber":157,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":158,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":159,"author":{"gitId":"pyuxiang"},"content":"            // No time and year supplied, manually added"},{"lineNumber":160,"author":{"gitId":"pyuxiang"},"content":"            else if (i \u003c\u003d 10) {"},{"lineNumber":161,"author":{"gitId":"pyuxiang"},"content":"                LocalDate readout;"},{"lineNumber":162,"author":{"gitId":"pyuxiang"},"content":"                try {"},{"lineNumber":163,"author":{"gitId":"pyuxiang"},"content":"                    readout \u003d LocalDate.parse(inputAddYear, fmt);"},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":165,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":166,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":167,"author":{"gitId":"pyuxiang"},"content":"                date \u003d readout.atTime(0, 0);"},{"lineNumber":168,"author":{"gitId":"pyuxiang"},"content":"                if (date.isBefore(now)) {"},{"lineNumber":169,"author":{"gitId":"pyuxiang"},"content":"                    date \u003d date.plusYears(1);"},{"lineNumber":170,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":171,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":172,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":173,"author":{"gitId":"pyuxiang"},"content":"            // All parameters supplied"},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":"            else if (i \u003c\u003d 18) {"},{"lineNumber":175,"author":{"gitId":"pyuxiang"},"content":"                try {"},{"lineNumber":176,"author":{"gitId":"pyuxiang"},"content":"                    date \u003d LocalDateTime.parse(input, fmt);"},{"lineNumber":177,"author":{"gitId":"pyuxiang"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":178,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":179,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":180,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":181,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"            // No year supplied"},{"lineNumber":183,"author":{"gitId":"pyuxiang"},"content":"            else {"},{"lineNumber":184,"author":{"gitId":"pyuxiang"},"content":"                try {"},{"lineNumber":185,"author":{"gitId":"pyuxiang"},"content":"                    date \u003d LocalDateTime.parse(inputAddYear, fmt);"},{"lineNumber":186,"author":{"gitId":"pyuxiang"},"content":"                } catch (DateTimeParseException e) {"},{"lineNumber":187,"author":{"gitId":"pyuxiang"},"content":"                    continue;"},{"lineNumber":188,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":189,"author":{"gitId":"pyuxiang"},"content":"                if (date.isBefore(now)) {"},{"lineNumber":190,"author":{"gitId":"pyuxiang"},"content":"                    date \u003d date.plusYears(1);"},{"lineNumber":191,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":193,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":194,"author":{"gitId":"pyuxiang"},"content":"            // Otherwise fully-supplied"},{"lineNumber":195,"author":{"gitId":"pyuxiang"},"content":"            return date;"},{"lineNumber":196,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":197,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":198,"author":{"gitId":"pyuxiang"},"content":"        // None of the date formats parsed"},{"lineNumber":199,"author":{"gitId":"pyuxiang"},"content":"        throw new DukeExceptionIllegalArgument(\"Datetime format should adhere to the following format:\""},{"lineNumber":200,"author":{"gitId":"pyuxiang"},"content":"                + \"\\n- Time delimited by \u0027:\u0027, e.g. 9:30\""},{"lineNumber":201,"author":{"gitId":"pyuxiang"},"content":"                + \"\\n- Date delimited by \u0027/\u0027 or \u0027 \u0027, e.g. 9/1, 9 Jan\""},{"lineNumber":202,"author":{"gitId":"pyuxiang"},"content":"                + \"\\n- Date and time separated by a single space \u0027 \u0027\");"},{"lineNumber":203,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":205,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":206,"author":{"gitId":"pyuxiang"},"content":"     * Returns formatted string based on supplied datetime."},{"lineNumber":207,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":208,"author":{"gitId":"pyuxiang"},"content":"     * If task falls on current year but has not expired, no year will be inserted."},{"lineNumber":209,"author":{"gitId":"pyuxiang"},"content":"     * Tasks falling midnight is considered not expired on the same day."},{"lineNumber":210,"author":{"gitId":"pyuxiang"},"content":"     * If task has time specified other than midnight, the time will be inserted."},{"lineNumber":211,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":212,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime."},{"lineNumber":213,"author":{"gitId":"pyuxiang"},"content":"     * @return Formatted datetime string."},{"lineNumber":214,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":215,"author":{"gitId":"pyuxiang"},"content":"    public static String formatDate(LocalDateTime dt) {"},{"lineNumber":216,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":217,"author":{"gitId":"pyuxiang"},"content":"        if (dt.getHour() \u003d\u003d 0 \u0026\u0026 dt.getMinute() \u003d\u003d 0) {"},{"lineNumber":218,"author":{"gitId":"pyuxiang"},"content":"            if (dt.getYear() \u003d\u003d now.getYear() \u0026\u0026 now.isBefore(dt.plusDays(1))) {"},{"lineNumber":219,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATE_FORMAT);"},{"lineNumber":220,"author":{"gitId":"pyuxiang"},"content":"            } else {"},{"lineNumber":221,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATE_YEAR_FORMAT);"},{"lineNumber":222,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":224,"author":{"gitId":"pyuxiang"},"content":"            if (dt.getYear() \u003d\u003d now.getYear() \u0026\u0026 now.isBefore(dt)) {"},{"lineNumber":225,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATETIME_FORMAT);"},{"lineNumber":226,"author":{"gitId":"pyuxiang"},"content":"            } else {"},{"lineNumber":227,"author":{"gitId":"pyuxiang"},"content":"                return dt.format(READABLE_DATETIME_YEAR_FORMAT);"},{"lineNumber":228,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":229,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":230,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":231,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":232,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":233,"author":{"gitId":"pyuxiang"},"content":"     * Returns formatted string as complete datetime."},{"lineNumber":234,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":235,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime."},{"lineNumber":236,"author":{"gitId":"pyuxiang"},"content":"     * @return Formatted datetime string."},{"lineNumber":237,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":238,"author":{"gitId":"pyuxiang"},"content":"    public static String formatDateFull(LocalDateTime dt) {"},{"lineNumber":239,"author":{"gitId":"pyuxiang"},"content":"        return dt.format(READABLE_DATETIME_YEAR_FORMAT);"},{"lineNumber":240,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":241,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":242,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":243,"author":{"gitId":"pyuxiang"},"content":"     * Returns formatted string in ISO format, i.e. \u0027YYYY-MM-DD hh:mm\u0027"},{"lineNumber":244,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":245,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime."},{"lineNumber":246,"author":{"gitId":"pyuxiang"},"content":"     * @return Formatted datetime string."},{"lineNumber":247,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":248,"author":{"gitId":"pyuxiang"},"content":"    public static String formatDateISO(LocalDateTime dt) {"},{"lineNumber":249,"author":{"gitId":"pyuxiang"},"content":"        return dt.format(ISO_DATETIME_FORMAT);"},{"lineNumber":250,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":251}},{"path":"src/main/java/duke/storage/FileLoader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotAccessible;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionFileNotWritable;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import duke.tasks.TaskList;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.io.BufferedReader;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import java.io.File;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import java.io.FileReader;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import java.io.IOException;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public class FileLoader {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    protected File f;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public boolean isWritable;"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    public boolean isReadable;"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     * Loads the string path to the task database."},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     * If uninitialized, will attempt to initialize."},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * Checks whether file is readable/writable prior to loading of tasks."},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * @param pathStr Path to database."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionFileNotAccessible If file cannot be created/read."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    public FileLoader(String pathStr) throws DukeExceptionFileNotAccessible {"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        f \u003d new File(pathStr);"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        isReadable \u003d f.canRead();"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        isWritable \u003d f.canWrite();"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        if (!isReadable) {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"            if (!f.getParentFile().mkdirs()) {"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionFileNotAccessible(\"Unable to create directory to file.\");"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"            try {"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"                f.createNewFile();"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"                isReadable \u003d f.canRead();"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"                isWritable \u003d f.canWrite();"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"            } catch (IOException e) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionFileNotAccessible(\"Unable to create file.\");"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        if (!isReadable) {"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionFileNotAccessible(\"Unable to read file.\");"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * Throws exception if file not writable."},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     * Used to indicate that a file can be read, but cannot be written (read-only)."},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionFileNotWritable When file cannot be written to."},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    public void throwIfNotWritable() throws DukeExceptionFileNotWritable {"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        if (!isWritable) {"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionFileNotWritable(\"Unable to write to file.\");"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * Writes tasks in tasklist to file."},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"     * @param t TaskList."},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionFileNotWritable When file cannot be written to."},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    public void write(TaskList t) throws DukeExceptionFileNotWritable {"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"        if (isWritable) {"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"            try (FileWriter writer \u003d new FileWriter(f, false)){"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"                for (String s: t.asArrayList()) {"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"                    writer.write(s+\u0027\\n\u0027);"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"            } catch (IOException e) {"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"                throw new DukeExceptionFileNotWritable(\"Unable to write to file.\");"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"     * Reads tasks using file pointer initialized in constructor."},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"     * @return TaskList."},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When file cannot be read/loaded."},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"    public TaskList read() throws DukeExceptionFileNotAccessible, DukeExceptionIllegalArgument {"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(f));"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"            String line;"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"            ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"                tasks.add(line);"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"            }"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"            return new TaskList(tasks);"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"        } catch (IOException e) {"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"            // Can happen with directory change"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Error in reading file.\");"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":102}},{"path":"src/main/java/duke/tasks/DateTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * DateTask class."},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Extension of Task class to include a datetime field and"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * the corresponding datetime getter. Field set during construction."},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"public class DateTask extends Task {"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    protected LocalDateTime datetime;"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for DateTask."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of DateTask."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    public DateTask(String description, boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * Returns datetime field of DateTask."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * @return Datetime."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    public LocalDateTime getDatetime() {"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        return datetime;"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":33}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * Deadline class."},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * A time-based class that tracks a description and a deadline."},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * @see duke.tasks.Event"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public class Deadline extends DateTask {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for a Deadline."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Deadline."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime of Deadline."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public Deadline(String description, LocalDateTime dt) {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        this(description, dt, false);"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for a Deadline."},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Deadline."},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime of deadline."},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    public Deadline(String description, LocalDateTime dt, boolean isDone)  {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"        this.datetime \u003d dt;"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     * Returns new Deadline by parsing user string input."},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     * Input validation for date present. Dates should be provided as an argument"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     * to the \u0027/by\u0027 flag, following the description, e.g."},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"     * {@code deadline \u003cdescription\u003e /by \u003cdatetime\u003e}."},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"     * Datetime formats are specified in {@link duke.parser.Parser }."},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     * @param s User input."},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * @return Deadline."},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When description is empty, datetime is empty,"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     *                                      or datetime is invalid."},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"    public static Deadline parse(String s) throws DukeExceptionIllegalArgument {"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        if (s.equals(\"\")) {"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of a deadline cannot be empty.\");"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        String[] tokens \u003d s.split(\" /by \");"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        if (tokens[0].equals(\"\")) {"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of a deadline cannot be empty.\");"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        if (tokens.length \u003d\u003d 1 || tokens[1].equals(\"\")) {"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument("},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"                    \"An deadline must have both description and time,\\ndelimited by \u0027/by\u0027.\");"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime dt \u003d Parser.parseDate(tokens[1].strip());"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        return new Deadline(tokens[0], dt);"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Deadline."},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + Parser.formatDate(datetime) + \")\";"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     * For minified printing into file."},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Deadline."},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"    public String toFileString() {"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"        return \"D\\t\" + ((isDone) ? 1 : 0) + \"\\t\" + description + \"\\t\" + Parser.formatDateISO(datetime);"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":88}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * Deadline class."},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" * A time-based class that tracks a description and an event time."},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":" * @see duke.tasks.Deadline"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public class Event extends DateTask {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for an Event."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Event."},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime of Event."},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"    public Event(String description, LocalDateTime dt) {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        this(description, dt, false);"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for an Event."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Event."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @param dt LocalDateTime of Event."},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    public Event(String description, LocalDateTime dt, boolean isDone) {"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        this.datetime \u003d dt;"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * Returns new Event by parsing user string input."},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     * Input validation for date present. Dates should be provided as an argument"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     * to the \u0027/at\u0027 flag, following the description, e.g."},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     * {@code event \u003cdescription\u003e /at \u003cdatetime\u003e}."},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"     * Datetime formats are specified in {@link duke.parser.Parser }."},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"     * @param s User input."},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     * @return Event."},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When description is empty, datetime is empty,"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     *                                      or datetime is invalid."},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    public static Event parse(String s) throws DukeExceptionIllegalArgument {"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        if (s.equals(\"\")) {"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of an event cannot be empty.\");"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        String[] tokens \u003d s.split(\" /at \");"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        if (tokens[0].equals(\"\")) {"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of an event cannot be empty.\");"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        if (tokens.length \u003d\u003d 1 || tokens[1].equals(\"\")) {"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument("},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"                    \"An event must have both description and time,\\ndelimited by \u0027/at\u0027.\");"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime dt \u003d Parser.parseDate(tokens[1].strip());"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"        return new Event(tokens[0], dt);"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Event."},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + Parser.formatDate(datetime) + \")\";"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"     * For minified printing into file."},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Event."},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"    public String toFileString() {"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"        return \"E\\t\" + ((isDone) ? 1 : 0) + \"\\t\" + description + \"\\t\" + Parser.formatDateISO(datetime);"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":87}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * Task class."},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * Bulk of the definition comes from the original webpage by CS2103 at"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * { @link https://nus-cs2103-ay2021s2.github.io/website/schedule/week2/project.html }."},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" * General class representing all tasks. Should not be instantiated directly."},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"public class Task {"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    protected String description;"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"    protected boolean isDone;"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for Task."},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Task"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    public Task(String description) {"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        this(description, false);"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for Task."},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of Task."},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"        this.description \u003d description;"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * Marks task as done."},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     * No exception thrown if task is already marked as done."},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"    public void setDone() {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"        isDone \u003d true;"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"     * Returns description of Task."},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * @return Description."},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"    public String getDescription() {"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        return description;"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     * Returns status icon representing completion of Task."},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"     * @return Tick or cross."},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"    public String getStatusIcon() {"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        return (isDone ? \"\\u2713\": \"\\u2718\");"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     * Returns Task by parsing a task string."},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"     * @param s Task string."},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * @return Task."},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument If invalid task string supplied."},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"    public static Task parseFileString(String s) throws DukeExceptionIllegalArgument {"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"        String[] args \u003d s.split(\" \\\\| \");"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"        boolean isDone \u003d args[1].equals(\"1\");"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"        Task task;"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        switch (args[0]) {"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        case \"E\":"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Event.parse(args[2] + \" /at \" + args[3]);"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"            break;"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"        case \"T\":"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Todo.parse(args[2]);"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"            break;"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"        case \"D\":"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"            task \u003d Deadline.parse(args[2] + \" /by \" + args[3]);"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"            break;"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"        default:"},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Incorrect task list data.\");"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"        if (isDone) {"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"            task.setDone();"},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"        return task;"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Task."},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"        return \"[\" + getStatusIcon() + \"] \" + getDescription();"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"     * For minified printing into file."},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Task."},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"    public String toFileString() {"},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"        return toString();"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":113}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    ArrayList\u003cTask\u003e tasks; // composition"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for TaskList."},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     * Creates empty TaskList."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"    public TaskList() {"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for TaskList"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * Initializes a TaskList based on an array of unparsed task strings."},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * @param taskStrings List of task Strings."},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When parsing fails."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    public TaskList(ArrayList\u003cString\u003e taskStrings) throws DukeExceptionIllegalArgument {"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"        tasks \u003d new ArrayList\u003c\u003e(); // if fail, none imported"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        boolean isImportSuccess \u003d true;"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        for (String s: taskStrings) {"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"            Task t \u003d Task.parseFileString(s);"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"            tasks.add(t);"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * Sets a task within the list as done."},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     * Uses 1-based indexing."},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"     * @param taskIndex Index of task in list."},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument If the 1-based index is invalid."},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    public void setDone(int taskIndex) throws DukeExceptionIllegalArgument {"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        getTask(taskIndex).setDone();"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     * Gets a task from the list using the index."},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * Uses 1-based indexing."},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"     * @param taskIndex Index of task in list."},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"     * @return Task."},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument If the 1-based index is invalid."},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    public Task getTask(int taskIndex) throws DukeExceptionIllegalArgument {"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        if (tasks.size() \u003c\u003d taskIndex || taskIndex \u003c 0) {"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The task number must be valid.\");"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"        return tasks.get(taskIndex);"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"     * Removes a task from the list using the index."},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"     * Uses 1-based indexing."},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"     * @param taskIndex Index of task in list."},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument If the 1-based index is invalid."},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"    public void deleteTask(int taskIndex) throws DukeExceptionIllegalArgument {"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        if (tasks.size() \u003c\u003d taskIndex || taskIndex \u003c 0) {"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The task number must be valid.\");"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"        tasks.remove(taskIndex);"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     * Removes all tasks from the list."},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"    public void deleteAll() {"},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"        tasks.clear();"},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"     * Appends a task to the list"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":"     * @param t Task."},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"    public void addTask(Task t) {"},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"        tasks.add(t);"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"     * Returns the size of the task list."},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"     * @return Size of list."},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"    public int size() {"},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"        return tasks.size();"},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"     * Returns an ArrayList of parsed task strings."},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"     * For writing into file."},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"     * @return ArrayList of task Strings."},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"    public ArrayList\u003cString\u003e asArrayList() {"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"        ArrayList\u003cString\u003e taskStrings \u003d new ArrayList\u003c\u003e();"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":"        for (Task t: tasks) {"},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"            taskStrings.add(t.toFileString());"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"        return taskStrings;"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":119}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":" * Todo class."},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":" * A simple Task that does not require any other features other"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":" * than a description of the task."},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"public class Todo extends Task {"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for a Todo."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of todo."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    public Todo(String description) {"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"        this(description, false);"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"     * Constructor for a Todo."},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * @param description Description of todo."},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     * @param isDone Whether task is completed."},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"        super(description, isDone);"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     * Returns new Todo by parsing user string input."},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     * No input validation is performed."},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     * @param s User input."},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     * @return Todo"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When description is empty."},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"    public static Todo parse(String s) throws DukeExceptionIllegalArgument {"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        if (s.equals(\"\")) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"The description of a todo cannot be empty.\");"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        return new Todo(s);"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     * For pretty printing on stdout."},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Todo."},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"     * For minified printing into file."},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"     * @return String representation of Todo."},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"    public String toFileString() {"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"        return \"T\\t\" + ((isDone) ? 1 : 0) + \"\\t\" + description;"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":66}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeException;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import java.io.BufferedReader;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.io.InputStreamReader;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import java.util.Arrays;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":" * Handles I/O for program."},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":" *"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":" * Uses System.out and System.in exclusively."},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":" */"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"public class Ui {"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    private final BufferedReader in;"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    private static final String BORDER \u003d \"    ____________________________________________________________\";"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    private static final String INDENT \u003d \"     \";"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"     * Creates reader for stdin"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"    public Ui() {"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        in \u003d new BufferedReader(new InputStreamReader(System.in));"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"     * Returns one line of user input from stdin."},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"     * Blocking call."},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"     * @return User input."},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When I/O Exception occurs."},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"    public String getUserInput() throws DukeExceptionIllegalArgument {"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"            return in.readLine();"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        } catch (IOException e) {"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":"            throw new DukeExceptionIllegalArgument(\"Failed to read input.\");"},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"     * Returns one line of user input from stdin, with message prompt to user."},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"     * @param pre Message prompt."},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"     * @return User input."},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"     * @throws DukeExceptionIllegalArgument When I/O Exception occurs."},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":"    public String getUserInput(String pre) throws DukeExceptionIllegalArgument {"},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        System.out.print(pre);"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        return getUserInput();"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"     * Send exception for pretty printing."},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"     * Exception message can be composed of multiple lines."},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"     * @param e Exception."},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    public void showError(DukeException e) {"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"        String message \u003d String.valueOf(e).strip();"},{"lineNumber":68,"author":{"gitId":"pyuxiang"},"content":"        if (message.contains(\"\\n\")) {"},{"lineNumber":69,"author":{"gitId":"pyuxiang"},"content":"            int index \u003d message.indexOf(\u0027\\n\u0027);"},{"lineNumber":70,"author":{"gitId":"pyuxiang"},"content":"            String firstLine \u003d message.substring(0, index);"},{"lineNumber":71,"author":{"gitId":"pyuxiang"},"content":"            String[] restLines \u003d message.substring(index+1).split(\"\\n\");"},{"lineNumber":72,"author":{"gitId":"pyuxiang"},"content":"            List\u003cString\u003e lines \u003d Arrays.stream(restLines).map(s -\u003e \"  \"+s).collect(Collectors.toList());"},{"lineNumber":73,"author":{"gitId":"pyuxiang"},"content":"            showMessage(\"☹ OOPS!!! \" + firstLine, lines);"},{"lineNumber":74,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":75,"author":{"gitId":"pyuxiang"},"content":"            showMessage(\"☹ OOPS!!! \" + message);"},{"lineNumber":76,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":78,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":79,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":80,"author":{"gitId":"pyuxiang"},"content":"     * Prints main program logo"},{"lineNumber":81,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"pyuxiang"},"content":"    public void showWelcomeScreen() {"},{"lineNumber":83,"author":{"gitId":"pyuxiang"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":84,"author":{"gitId":"pyuxiang"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":85,"author":{"gitId":"pyuxiang"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":86,"author":{"gitId":"pyuxiang"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":87,"author":{"gitId":"pyuxiang"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":88,"author":{"gitId":"pyuxiang"},"content":"        System.out.print(logo);"},{"lineNumber":89,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":91,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"pyuxiang"},"content":"     * Prints load screen upon successful task list load."},{"lineNumber":93,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"pyuxiang"},"content":"     * If number of tasks is 0, message printed assumed no task list exists."},{"lineNumber":95,"author":{"gitId":"pyuxiang"},"content":"     * Otherwise, number of tasks is also printed."},{"lineNumber":96,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":97,"author":{"gitId":"pyuxiang"},"content":"     * @param numTasks Number of tasks in loaded list."},{"lineNumber":98,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":99,"author":{"gitId":"pyuxiang"},"content":"    public void showLoadingSuccess(int numTasks) {"},{"lineNumber":100,"author":{"gitId":"pyuxiang"},"content":"        if (numTasks \u003d\u003d 0) {"},{"lineNumber":101,"author":{"gitId":"pyuxiang"},"content":"            showMessage("},{"lineNumber":102,"author":{"gitId":"pyuxiang"},"content":"                    \"Welcome to Duke!\","},{"lineNumber":103,"author":{"gitId":"pyuxiang"},"content":"                    \"\","},{"lineNumber":104,"author":{"gitId":"pyuxiang"},"content":"                    \"No existing tasks found.\","},{"lineNumber":105,"author":{"gitId":"pyuxiang"},"content":"                    \"A new task list has been created to get you started :)\");"},{"lineNumber":106,"author":{"gitId":"pyuxiang"},"content":"        } else {"},{"lineNumber":107,"author":{"gitId":"pyuxiang"},"content":"            showMessage("},{"lineNumber":108,"author":{"gitId":"pyuxiang"},"content":"                    \"Welcome to Duke!\","},{"lineNumber":109,"author":{"gitId":"pyuxiang"},"content":"                    \"\","},{"lineNumber":110,"author":{"gitId":"pyuxiang"},"content":"                    \"Existing task list loaded successfully.\","},{"lineNumber":111,"author":{"gitId":"pyuxiang"},"content":"                    \"You have \" + numTasks + \" task\" + (numTasks \u003d\u003d 1 ? \"\" : \"s\") + \" in your list.\");"},{"lineNumber":112,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":115,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":116,"author":{"gitId":"pyuxiang"},"content":"     * Prints load screen upon failure to write to file."},{"lineNumber":117,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":118,"author":{"gitId":"pyuxiang"},"content":"     * For read-only file access by user - task list can still be loaded."},{"lineNumber":119,"author":{"gitId":"pyuxiang"},"content":"     * Indication to user that file cannot be written to, and serves as important"},{"lineNumber":120,"author":{"gitId":"pyuxiang"},"content":"     * signal to user that changes are not preserved."},{"lineNumber":121,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"pyuxiang"},"content":"     * @param numTasks Number of tasks in loaded list."},{"lineNumber":123,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"pyuxiang"},"content":"    public void showFileWriteError(int numTasks) {"},{"lineNumber":125,"author":{"gitId":"pyuxiang"},"content":"        showMessage("},{"lineNumber":126,"author":{"gitId":"pyuxiang"},"content":"                \"Welcome to Duke!\","},{"lineNumber":127,"author":{"gitId":"pyuxiang"},"content":"                \"\","},{"lineNumber":128,"author":{"gitId":"pyuxiang"},"content":"                \"Warning: Destination file cannot be written to.\","},{"lineNumber":129,"author":{"gitId":"pyuxiang"},"content":"                \"Existing task list loaded, but changes will not be saved.\","},{"lineNumber":130,"author":{"gitId":"pyuxiang"},"content":"                \"\","},{"lineNumber":131,"author":{"gitId":"pyuxiang"},"content":"                \"You have \" + numTasks + \" task\" + (numTasks \u003d\u003d 1 ? \"\" : \"s\") + \" in your list.\");"},{"lineNumber":132,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":134,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"pyuxiang"},"content":"     * Prints load screen upon failure to load file."},{"lineNumber":136,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":137,"author":{"gitId":"pyuxiang"},"content":"     * Occurs when directory cannot be created, or when file cannot be created"},{"lineNumber":138,"author":{"gitId":"pyuxiang"},"content":"     * or read."},{"lineNumber":139,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":140,"author":{"gitId":"pyuxiang"},"content":"    public void showFileLoadingError() {"},{"lineNumber":141,"author":{"gitId":"pyuxiang"},"content":"        showMessage("},{"lineNumber":142,"author":{"gitId":"pyuxiang"},"content":"                \"Welcome to Duke!\","},{"lineNumber":143,"author":{"gitId":"pyuxiang"},"content":"                \"\","},{"lineNumber":144,"author":{"gitId":"pyuxiang"},"content":"                \"Warning: Destination file cannot be created/read.\","},{"lineNumber":145,"author":{"gitId":"pyuxiang"},"content":"                \"New task list created, but changes will not be saved.\");"},{"lineNumber":146,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":148,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"pyuxiang"},"content":"     * Prints load screen upon failure to load list."},{"lineNumber":150,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":151,"author":{"gitId":"pyuxiang"},"content":"     * Occurs when file can be read, but the contents cannot be parsed"},{"lineNumber":152,"author":{"gitId":"pyuxiang"},"content":"     * as a task list."},{"lineNumber":153,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":154,"author":{"gitId":"pyuxiang"},"content":"    public void showLoadingError() {"},{"lineNumber":155,"author":{"gitId":"pyuxiang"},"content":"        showMessage("},{"lineNumber":156,"author":{"gitId":"pyuxiang"},"content":"                \"Welcome to Duke!\","},{"lineNumber":157,"author":{"gitId":"pyuxiang"},"content":"                \"\","},{"lineNumber":158,"author":{"gitId":"pyuxiang"},"content":"                \"Warning: Existing task list cannot be loaded.\","},{"lineNumber":159,"author":{"gitId":"pyuxiang"},"content":"                \"A new task list has been created.\");"},{"lineNumber":160,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":161,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":162,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":163,"author":{"gitId":"pyuxiang"},"content":"     * Pretty prints messages on stdout."},{"lineNumber":164,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":165,"author":{"gitId":"pyuxiang"},"content":"     * The most general method. Prefix and postfix string arguments are"},{"lineNumber":166,"author":{"gitId":"pyuxiang"},"content":"     * provided for convenience, in particular for prefix to avoid concatenating"},{"lineNumber":167,"author":{"gitId":"pyuxiang"},"content":"     * with potentially long list of lines."},{"lineNumber":168,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":169,"author":{"gitId":"pyuxiang"},"content":"     * @param pre Prefix message."},{"lineNumber":170,"author":{"gitId":"pyuxiang"},"content":"     * @param lines List of messages."},{"lineNumber":171,"author":{"gitId":"pyuxiang"},"content":"     * @param post Postfix message."},{"lineNumber":172,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":173,"author":{"gitId":"pyuxiang"},"content":"    public void showMessage(String pre, List\u003cString\u003e lines, String post) {"},{"lineNumber":174,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":175,"author":{"gitId":"pyuxiang"},"content":"        System.out.println(BORDER);"},{"lineNumber":176,"author":{"gitId":"pyuxiang"},"content":"        if (!pre.isEmpty()) {"},{"lineNumber":177,"author":{"gitId":"pyuxiang"},"content":"            System.out.print(INDENT);"},{"lineNumber":178,"author":{"gitId":"pyuxiang"},"content":"            System.out.println(pre);"},{"lineNumber":179,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"pyuxiang"},"content":"        for (String line: lines) {"},{"lineNumber":181,"author":{"gitId":"pyuxiang"},"content":"            System.out.print(INDENT);"},{"lineNumber":182,"author":{"gitId":"pyuxiang"},"content":"            System.out.println(line);"},{"lineNumber":183,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":184,"author":{"gitId":"pyuxiang"},"content":"        if (!post.isEmpty()) {"},{"lineNumber":185,"author":{"gitId":"pyuxiang"},"content":"            System.out.print(INDENT);"},{"lineNumber":186,"author":{"gitId":"pyuxiang"},"content":"            System.out.println(post);"},{"lineNumber":187,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":188,"author":{"gitId":"pyuxiang"},"content":"        System.out.println(BORDER);"},{"lineNumber":189,"author":{"gitId":"pyuxiang"},"content":"        System.out.println();"},{"lineNumber":190,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":191,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":192,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":193,"author":{"gitId":"pyuxiang"},"content":"     * Pretty prints messages on stdout."},{"lineNumber":194,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":195,"author":{"gitId":"pyuxiang"},"content":"     * Convenience function."},{"lineNumber":196,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":197,"author":{"gitId":"pyuxiang"},"content":"     * @param pre Prefix message."},{"lineNumber":198,"author":{"gitId":"pyuxiang"},"content":"     * @param lines List of messages."},{"lineNumber":199,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":200,"author":{"gitId":"pyuxiang"},"content":"    public void showMessage(String pre, List\u003cString\u003e lines) {"},{"lineNumber":201,"author":{"gitId":"pyuxiang"},"content":"        showMessage(pre, lines, \"\");"},{"lineNumber":202,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":203,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":204,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":205,"author":{"gitId":"pyuxiang"},"content":"     * Pretty prints messages on stdout."},{"lineNumber":206,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":207,"author":{"gitId":"pyuxiang"},"content":"     * Convenience function."},{"lineNumber":208,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"pyuxiang"},"content":"     * @param lines List of messages."},{"lineNumber":210,"author":{"gitId":"pyuxiang"},"content":"     * @param post Postfix message."},{"lineNumber":211,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"pyuxiang"},"content":"    public void showMessage(List\u003cString\u003e lines, String post) {"},{"lineNumber":213,"author":{"gitId":"pyuxiang"},"content":"        lines.add(post);"},{"lineNumber":214,"author":{"gitId":"pyuxiang"},"content":"        showMessage(\"\", lines, post);"},{"lineNumber":215,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":216,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":217,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":218,"author":{"gitId":"pyuxiang"},"content":"     * Pretty prints messages on stdout."},{"lineNumber":219,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":220,"author":{"gitId":"pyuxiang"},"content":"     * Convenience function."},{"lineNumber":221,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":222,"author":{"gitId":"pyuxiang"},"content":"     * @param lines List of messages."},{"lineNumber":223,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":224,"author":{"gitId":"pyuxiang"},"content":"    public void showMessage(List\u003cString\u003e lines) {"},{"lineNumber":225,"author":{"gitId":"pyuxiang"},"content":"        showMessage(\"\", lines, \"\");"},{"lineNumber":226,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":227,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":228,"author":{"gitId":"pyuxiang"},"content":"    /**"},{"lineNumber":229,"author":{"gitId":"pyuxiang"},"content":"     * Pretty prints messages on stdout."},{"lineNumber":230,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":231,"author":{"gitId":"pyuxiang"},"content":"     * Convenience function."},{"lineNumber":232,"author":{"gitId":"pyuxiang"},"content":"     *"},{"lineNumber":233,"author":{"gitId":"pyuxiang"},"content":"     * @param lines Variable number of messages."},{"lineNumber":234,"author":{"gitId":"pyuxiang"},"content":"     */"},{"lineNumber":235,"author":{"gitId":"pyuxiang"},"content":"    public void showMessage(String ... lines) {"},{"lineNumber":236,"author":{"gitId":"pyuxiang"},"content":"        showMessage(\"\", Arrays.asList(lines), \"\");"},{"lineNumber":237,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":238,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":238}},{"path":"src/test/java/JUnitUtility.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"public class JUnitUtility {"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"    private static final InputStream STDIN \u003d System.in;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"    private static final PrintStream STDOUT \u003d System.out;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"    private static final PrintStream STDERR \u003d System.err;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"    public static void prepareStdin(String input) {"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"        input \u003d String.join(System.lineSeparator(), input.split(\"\\n\"));"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"        System.setIn(new ByteArrayInputStream(input.getBytes()));"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"    public static ByteArrayOutputStream prepareStdout() {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"        ByteArrayOutputStream out \u003d new ByteArrayOutputStream();"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"        System.setOut(new PrintStream(out));"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"        return out;"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    public static void resetStdin() {"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        System.setIn(STDIN);"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"    public static void resetStdout() {"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        System.setOut(STDOUT);"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":27}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import duke.parser.Parser;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.function.Executable;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalDateTime;"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import java.time.LocalTime;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import static duke.parser.Parser.parseDate;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"public class ParserTest {"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    // No idea how to test for current dates..."},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"    void parseDate_datesAfterCurrent_noExceptions() {"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime curr \u003d LocalDateTime.of(2020, 1, 15, 3, 7, 49, 123456789);"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"            assertEquals(LocalDateTime.of(2020, 1, 15, 4, 8), parseDate(\"4:08\", curr));"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"            fail(\"Should not throw exception.\");"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"    void parseDate_invalidMinutes_throwException() {"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        LocalDateTime now \u003d LocalDateTime.now();"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"3:5\", now));"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"3:5 2021-08-09\", now));"},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    void parseDate_wrongInput_throwException() {"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020\")); // year only"},{"lineNumber":38,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020-21\")); // no day"},{"lineNumber":39,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020-21-09\")); // wrong month"},{"lineNumber":40,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09-09-09\")); // wrong year, size !\u003d 4"},{"lineNumber":41,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09-09-2020\")); // wrong format, not ISO"},{"lineNumber":42,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09-09\")); // no year"},{"lineNumber":43,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":44,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9 march\")); // no capitalize"},{"lineNumber":45,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9 mar\"));"},{"lineNumber":46,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"mar 9\"));"},{"lineNumber":47,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"march 9\"));"},{"lineNumber":48,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"March\")); // no day"},{"lineNumber":49,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"Mar 2020\"));"},{"lineNumber":50,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020 Mar\"));"},{"lineNumber":51,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"2020 Mar 09\")); // wrong order"},{"lineNumber":52,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09 09 09\"));"},{"lineNumber":53,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"09 Sep 09\"));"},{"lineNumber":54,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":55,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9.3\")); // wrong minute"},{"lineNumber":56,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9:3\"));"},{"lineNumber":57,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9:61\"));"},{"lineNumber":58,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"90:3\")); // wrong hour"},{"lineNumber":59,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"30:4\"));"},{"lineNumber":60,"author":{"gitId":"pyuxiang"},"content":"        assertThrowsIllegal(() -\u003e parseDate(\"9.3.2020\")); // no such date"},{"lineNumber":61,"author":{"gitId":"pyuxiang"},"content":"         // no such date"},{"lineNumber":62,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":64,"author":{"gitId":"pyuxiang"},"content":"    private void assertThrowsIllegal(Executable x) {"},{"lineNumber":65,"author":{"gitId":"pyuxiang"},"content":"        assertThrows(DukeExceptionIllegalArgument.class, x);"},{"lineNumber":66,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":67}},{"path":"src/test/java/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"import duke.exceptions.DukeExceptionIllegalArgument;"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"import duke.ui.Ui;"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.AfterAll;"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"import java.io.*;"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"// Very helpful: https://stackoverflow.com/questions/6415728/junit-testing-with-simulated-user-input"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"// and this : https://stackoverflow.com/questions/1119385/junit-test-for-system-out-println/1119559#1119559"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"public class UiTest {"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"    @BeforeEach"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"    void init() {}"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"    void getUserInput_normalInput_noException() {"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"        // ByteArrayOutputStream out \u003d JUnitUtility.prepareStdout(); ... out.toString();"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"        JUnitUtility.prepareStdin(\"random input\\n\");"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"            String result \u003d ui.getUserInput();"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"            assertEquals(\"random input\", result);"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"        } catch (DukeExceptionIllegalArgument e) {"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"            fail(\"Should not throw exception.\");"},{"lineNumber":30,"author":{"gitId":"pyuxiang"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"pyuxiang"},"content":""},{"lineNumber":33,"author":{"gitId":"pyuxiang"},"content":"    @AfterAll"},{"lineNumber":34,"author":{"gitId":"pyuxiang"},"content":"    static void teardown() {"},{"lineNumber":35,"author":{"gitId":"pyuxiang"},"content":"        JUnitUtility.resetStdin();"},{"lineNumber":36,"author":{"gitId":"pyuxiang"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pyuxiang"},"content":"}"}],"authorContributionMap":{"pyuxiang":37}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pyuxiang"},"content":"hi"},{"lineNumber":2,"author":{"gitId":"pyuxiang"},"content":"todo"},{"lineNumber":3,"author":{"gitId":"pyuxiang"},"content":"delete"},{"lineNumber":4,"author":{"gitId":"pyuxiang"},"content":"deadline"},{"lineNumber":5,"author":{"gitId":"pyuxiang"},"content":"event"},{"lineNumber":6,"author":{"gitId":"pyuxiang"},"content":"add"},{"lineNumber":7,"author":{"gitId":"pyuxiang"},"content":"list"},{"lineNumber":8,"author":{"gitId":"pyuxiang"},"content":"todo hi /at"},{"lineNumber":9,"author":{"gitId":"pyuxiang"},"content":"done 0"},{"lineNumber":10,"author":{"gitId":"pyuxiang"},"content":"done 2"},{"lineNumber":11,"author":{"gitId":"pyuxiang"},"content":"done 1"},{"lineNumber":12,"author":{"gitId":"pyuxiang"},"content":"delete a"},{"lineNumber":13,"author":{"gitId":"pyuxiang"},"content":"delete 0"},{"lineNumber":14,"author":{"gitId":"pyuxiang"},"content":"delete 2"},{"lineNumber":15,"author":{"gitId":"pyuxiang"},"content":"delete 1"},{"lineNumber":16,"author":{"gitId":"pyuxiang"},"content":"deadline"},{"lineNumber":17,"author":{"gitId":"pyuxiang"},"content":"deadline /by"},{"lineNumber":18,"author":{"gitId":"pyuxiang"},"content":"deadline  /by"},{"lineNumber":19,"author":{"gitId":"pyuxiang"},"content":"deadline y /by"},{"lineNumber":20,"author":{"gitId":"pyuxiang"},"content":"deadline u /by yu"},{"lineNumber":21,"author":{"gitId":"pyuxiang"},"content":"event hi /at time"},{"lineNumber":22,"author":{"gitId":"pyuxiang"},"content":"list"},{"lineNumber":23,"author":{"gitId":"pyuxiang"},"content":"list test"},{"lineNumber":24,"author":{"gitId":"pyuxiang"},"content":"done 2"},{"lineNumber":25,"author":{"gitId":"pyuxiang"},"content":"delete 1"},{"lineNumber":26,"author":{"gitId":"pyuxiang"},"content":"list"},{"lineNumber":27,"author":{"gitId":"pyuxiang"},"content":"done 1"},{"lineNumber":28,"author":{"gitId":"pyuxiang"},"content":"list"},{"lineNumber":29,"author":{"gitId":"pyuxiang"},"content":"bye"}],"authorContributionMap":{"pyuxiang":29}}]
