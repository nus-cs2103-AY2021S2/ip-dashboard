[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"lirc572"},"content":"![Text UI Test](https://github.com/lirc572/ip/workflows/Text%20UI%20Test/badge.svg)"},{"lineNumber":4,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":14,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":15,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":16,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":17,"author":{"gitId":"-"},"content":"1. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":19,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":21,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"lirc572":2,"-":23}},{"path":"src/main/java/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lirc572"},"content":"public class DeadlineTask extends Task {"},{"lineNumber":2,"author":{"gitId":"lirc572"},"content":"    private String dueTime;"},{"lineNumber":3,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":4,"author":{"gitId":"lirc572"},"content":"    public DeadlineTask(String name) {"},{"lineNumber":5,"author":{"gitId":"lirc572"},"content":"        super(name);"},{"lineNumber":6,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":8,"author":{"gitId":"lirc572"},"content":"    public DeadlineTask(String name, String dueTime) {"},{"lineNumber":9,"author":{"gitId":"lirc572"},"content":"        super(name);"},{"lineNumber":10,"author":{"gitId":"lirc572"},"content":"        this.dueTime \u003d dueTime;"},{"lineNumber":11,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":13,"author":{"gitId":"lirc572"},"content":"    public void setDueTime(String dueTime) {"},{"lineNumber":14,"author":{"gitId":"lirc572"},"content":"        this.dueTime \u003d dueTime;"},{"lineNumber":15,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":17,"author":{"gitId":"lirc572"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"lirc572"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"lirc572"},"content":"        return \"[D]\" + super.toString() + (this.dueTime !\u003d null ? String.format(\" (by: %s)\", this.dueTime) : \"\");"},{"lineNumber":20,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lirc572"},"content":"}"}],"authorContributionMap":{"lirc572":21}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lirc572"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"lirc572"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"lirc572"},"content":"import java.util.Set;"},{"lineNumber":4,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":5,"author":{"gitId":"lirc572"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"lirc572"},"content":" * Todo:"},{"lineNumber":7,"author":{"gitId":"lirc572"},"content":" * - exceptions yet to be handled:"},{"lineNumber":8,"author":{"gitId":"lirc572"},"content":" * - number of tasks \u003e 100"},{"lineNumber":9,"author":{"gitId":"lirc572"},"content":" * - multiple spaces in between tokens"},{"lineNumber":10,"author":{"gitId":"lirc572"},"content":" * - done command"},{"lineNumber":11,"author":{"gitId":"lirc572"},"content":" * - w/o number"},{"lineNumber":12,"author":{"gitId":"lirc572"},"content":" * - number out of range"},{"lineNumber":13,"author":{"gitId":"lirc572"},"content":" * - help command"},{"lineNumber":14,"author":{"gitId":"lirc572"},"content":" * - Task as abstract class with 3 subclasses (T/D/E)"},{"lineNumber":15,"author":{"gitId":"lirc572"},"content":" * - TaskList as a class"},{"lineNumber":16,"author":{"gitId":"lirc572"},"content":" */"},{"lineNumber":17,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":19,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":20,"author":{"gitId":"lirc572"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"lirc572"},"content":"     * The task list"},{"lineNumber":22,"author":{"gitId":"lirc572"},"content":"     */"},{"lineNumber":23,"author":{"gitId":"lirc572"},"content":"    public static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":24,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":25,"author":{"gitId":"lirc572"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"lirc572"},"content":"     * All exit commands are listed here"},{"lineNumber":27,"author":{"gitId":"lirc572"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"lirc572"},"content":"    private static final Set\u003cString\u003e EXIT_COMMANDS \u003d Set.of("},{"lineNumber":29,"author":{"gitId":"lirc572"},"content":"            \"bye\", \"exit\", \"quit\""},{"lineNumber":30,"author":{"gitId":"lirc572"},"content":"    );"},{"lineNumber":31,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":32,"author":{"gitId":"lirc572"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"lirc572"},"content":"     * Print one line with spaces in front"},{"lineNumber":34,"author":{"gitId":"lirc572"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"lirc572"},"content":"     * @param line the line to print"},{"lineNumber":36,"author":{"gitId":"lirc572"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"lirc572"},"content":"    public static void printLine(String line) {"},{"lineNumber":38,"author":{"gitId":"lirc572"},"content":"        System.out.println(\"     \" + line);"},{"lineNumber":39,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":41,"author":{"gitId":"lirc572"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"lirc572"},"content":"     * Print a horizontal line"},{"lineNumber":43,"author":{"gitId":"lirc572"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"lirc572"},"content":"    public static void printHorizontalLine() {"},{"lineNumber":45,"author":{"gitId":"lirc572"},"content":"        System.out.println(\"    \" + \"____________________________________________________________\");"},{"lineNumber":46,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":48,"author":{"gitId":"lirc572"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"lirc572"},"content":"     * Print an empty line"},{"lineNumber":50,"author":{"gitId":"lirc572"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"lirc572"},"content":"    public static void printEmptyLine() {"},{"lineNumber":52,"author":{"gitId":"lirc572"},"content":"        System.out.println();"},{"lineNumber":53,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":55,"author":{"gitId":"lirc572"},"content":"    /**"},{"lineNumber":56,"author":{"gitId":"lirc572"},"content":"     * Tokenize a command"},{"lineNumber":57,"author":{"gitId":"lirc572"},"content":"     *"},{"lineNumber":58,"author":{"gitId":"lirc572"},"content":"     * @param command a line of command"},{"lineNumber":59,"author":{"gitId":"lirc572"},"content":"     * @return tokenized command as a String array"},{"lineNumber":60,"author":{"gitId":"lirc572"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"lirc572"},"content":"    public static String[] tokenizeCommand(String command) {"},{"lineNumber":62,"author":{"gitId":"lirc572"},"content":"        ArrayList\u003cString\u003e tokens \u003d new ArrayList\u003c\u003e();"},{"lineNumber":63,"author":{"gitId":"lirc572"},"content":"        boolean newToken \u003d true;"},{"lineNumber":64,"author":{"gitId":"lirc572"},"content":"        boolean unmatchedQuote \u003d false;"},{"lineNumber":65,"author":{"gitId":"lirc572"},"content":"        char quotationMark \u003d \u0027 \u0027;"},{"lineNumber":66,"author":{"gitId":"lirc572"},"content":"        for (char ch : command.toCharArray()) {"},{"lineNumber":67,"author":{"gitId":"lirc572"},"content":"            if (!unmatchedQuote) {"},{"lineNumber":68,"author":{"gitId":"lirc572"},"content":"                // if not a whitespace character"},{"lineNumber":69,"author":{"gitId":"lirc572"},"content":"                if (ch !\u003d \u0027 \u0027 \u0026\u0026 ch !\u003d \u0027\\t\u0027) {"},{"lineNumber":70,"author":{"gitId":"lirc572"},"content":"                    // if right after a whitespace character"},{"lineNumber":71,"author":{"gitId":"lirc572"},"content":"                    if (newToken) {"},{"lineNumber":72,"author":{"gitId":"lirc572"},"content":"                        // start of a quoted token"},{"lineNumber":73,"author":{"gitId":"lirc572"},"content":"                        if (ch \u003d\u003d \u0027\"\u0027 || ch \u003d\u003d \u0027\\\u0027\u0027) {"},{"lineNumber":74,"author":{"gitId":"lirc572"},"content":"                            quotationMark \u003d ch;"},{"lineNumber":75,"author":{"gitId":"lirc572"},"content":"                            unmatchedQuote \u003d true;"},{"lineNumber":76,"author":{"gitId":"lirc572"},"content":"                            tokens.add(\"\");"},{"lineNumber":77,"author":{"gitId":"lirc572"},"content":"                        } else {"},{"lineNumber":78,"author":{"gitId":"lirc572"},"content":"                            tokens.add(String.valueOf(ch));"},{"lineNumber":79,"author":{"gitId":"lirc572"},"content":"                            newToken \u003d false;"},{"lineNumber":80,"author":{"gitId":"lirc572"},"content":"                        }"},{"lineNumber":81,"author":{"gitId":"lirc572"},"content":"                    } else {"},{"lineNumber":82,"author":{"gitId":"lirc572"},"content":"                        tokens.set(tokens.size() - 1, tokens.get(tokens.size() - 1) + ch);"},{"lineNumber":83,"author":{"gitId":"lirc572"},"content":"                    }"},{"lineNumber":84,"author":{"gitId":"lirc572"},"content":"                } else {"},{"lineNumber":85,"author":{"gitId":"lirc572"},"content":"                    newToken \u003d true;"},{"lineNumber":86,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":87,"author":{"gitId":"lirc572"},"content":"            } else {"},{"lineNumber":88,"author":{"gitId":"lirc572"},"content":"                if (ch !\u003d quotationMark) {"},{"lineNumber":89,"author":{"gitId":"lirc572"},"content":"                    tokens.set(tokens.size() - 1, tokens.get(tokens.size() - 1) + ch);"},{"lineNumber":90,"author":{"gitId":"lirc572"},"content":"                } else {"},{"lineNumber":91,"author":{"gitId":"lirc572"},"content":"                    unmatchedQuote \u003d false;"},{"lineNumber":92,"author":{"gitId":"lirc572"},"content":"                    newToken \u003d true;"},{"lineNumber":93,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"lirc572"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"lirc572"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"lirc572"},"content":"        return (String[]) tokens.toArray();"},{"lineNumber":97,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":99,"author":{"gitId":"lirc572"},"content":"    /**"},{"lineNumber":100,"author":{"gitId":"lirc572"},"content":"     * Process a command"},{"lineNumber":101,"author":{"gitId":"lirc572"},"content":"     *"},{"lineNumber":102,"author":{"gitId":"lirc572"},"content":"     * @param command the command to process"},{"lineNumber":103,"author":{"gitId":"lirc572"},"content":"     * @return whether the program should continue (\u003ccode\u003etrue\u003c/code\u003e if not an exit command)"},{"lineNumber":104,"author":{"gitId":"lirc572"},"content":"     */"},{"lineNumber":105,"author":{"gitId":"lirc572"},"content":"    public static boolean processCommand(String command) throws Exception {"},{"lineNumber":106,"author":{"gitId":"lirc572"},"content":"        String[] tokens \u003d command.split(\" \");"},{"lineNumber":107,"author":{"gitId":"lirc572"},"content":"        printHorizontalLine();"},{"lineNumber":108,"author":{"gitId":"lirc572"},"content":"        if (EXIT_COMMANDS.contains(command)) {"},{"lineNumber":109,"author":{"gitId":"lirc572"},"content":"            printLine(\"Bye. Hope to see you again soon!\");"},{"lineNumber":110,"author":{"gitId":"lirc572"},"content":"        } else {"},{"lineNumber":111,"author":{"gitId":"lirc572"},"content":"            if (tokens[0].equals(\"list\")) {"},{"lineNumber":112,"author":{"gitId":"lirc572"},"content":"                printLine(\"Here are the tasks in your list:\");"},{"lineNumber":113,"author":{"gitId":"lirc572"},"content":"                int index \u003d 0;"},{"lineNumber":114,"author":{"gitId":"lirc572"},"content":"                for (Task task : tasks) {"},{"lineNumber":115,"author":{"gitId":"lirc572"},"content":"                    printLine(String.format(\"%d.%s\", ++index, task.toString()));"},{"lineNumber":116,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":117,"author":{"gitId":"lirc572"},"content":"            } else if (tokens[0].equals(\"done\")) {"},{"lineNumber":118,"author":{"gitId":"lirc572"},"content":"                if (tokens.length \u003c 2) {"},{"lineNumber":119,"author":{"gitId":"lirc572"},"content":"                    throw new Exception(\"Please provide a valid task number!\");"},{"lineNumber":120,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":121,"author":{"gitId":"lirc572"},"content":"                try {"},{"lineNumber":122,"author":{"gitId":"lirc572"},"content":"                    int taskNumber \u003d Integer.parseInt(tokens[1]);"},{"lineNumber":123,"author":{"gitId":"lirc572"},"content":"                    if (taskNumber \u003c 1) {"},{"lineNumber":124,"author":{"gitId":"lirc572"},"content":"                        throw new Exception(\"Please provide a valid task number!\");"},{"lineNumber":125,"author":{"gitId":"lirc572"},"content":"                    }"},{"lineNumber":126,"author":{"gitId":"lirc572"},"content":"                    if (taskNumber \u003c\u003d tasks.size()) {"},{"lineNumber":127,"author":{"gitId":"lirc572"},"content":"                        tasks.get(taskNumber - 1).setIsDone(true);"},{"lineNumber":128,"author":{"gitId":"lirc572"},"content":"                        printLine(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":129,"author":{"gitId":"lirc572"},"content":"                        printLine(String.format(\"  %s\", tasks.get(Integer.parseInt(tokens[1]) - 1)));"},{"lineNumber":130,"author":{"gitId":"lirc572"},"content":"                    } else {"},{"lineNumber":131,"author":{"gitId":"lirc572"},"content":"                        throw new Exception(\"Task does not exist!\");"},{"lineNumber":132,"author":{"gitId":"lirc572"},"content":"                    }"},{"lineNumber":133,"author":{"gitId":"lirc572"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":134,"author":{"gitId":"lirc572"},"content":"                    throw new Exception(\"Please provide a valid task number!\");"},{"lineNumber":135,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":136,"author":{"gitId":"lirc572"},"content":"            } else if (tokens[0].equals(\"delete\")) {"},{"lineNumber":137,"author":{"gitId":"lirc572"},"content":"                if (tokens.length \u003c 2) {"},{"lineNumber":138,"author":{"gitId":"lirc572"},"content":"                    throw new Exception(\"Please provide a valid task number!\");"},{"lineNumber":139,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":140,"author":{"gitId":"lirc572"},"content":"                try {"},{"lineNumber":141,"author":{"gitId":"lirc572"},"content":"                    int taskNumber \u003d Integer.parseInt(tokens[1]);"},{"lineNumber":142,"author":{"gitId":"lirc572"},"content":"                    if (taskNumber \u003c 1) {"},{"lineNumber":143,"author":{"gitId":"lirc572"},"content":"                        throw new Exception(\"Please provide a valid task number!\");"},{"lineNumber":144,"author":{"gitId":"lirc572"},"content":"                    }"},{"lineNumber":145,"author":{"gitId":"lirc572"},"content":"                    if (taskNumber \u003c\u003d tasks.size()) {"},{"lineNumber":146,"author":{"gitId":"lirc572"},"content":"                        Task task \u003d tasks.get(taskNumber - 1);"},{"lineNumber":147,"author":{"gitId":"lirc572"},"content":"                        tasks.remove(taskNumber - 1);"},{"lineNumber":148,"author":{"gitId":"lirc572"},"content":"                        printLine(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":149,"author":{"gitId":"lirc572"},"content":"                        printLine(String.format(\"  %s\", task));"},{"lineNumber":150,"author":{"gitId":"lirc572"},"content":"                        printLine(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"},{"lineNumber":151,"author":{"gitId":"lirc572"},"content":"                    } else {"},{"lineNumber":152,"author":{"gitId":"lirc572"},"content":"                        throw new Exception(\"Task does not exist!\");"},{"lineNumber":153,"author":{"gitId":"lirc572"},"content":"                    }"},{"lineNumber":154,"author":{"gitId":"lirc572"},"content":"                } catch (NumberFormatException e) {"},{"lineNumber":155,"author":{"gitId":"lirc572"},"content":"                    throw new Exception(\"Please provide a valid task number!\");"},{"lineNumber":156,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":157,"author":{"gitId":"lirc572"},"content":"            } else if (tokens[0].equals(\"todo\")) {"},{"lineNumber":158,"author":{"gitId":"lirc572"},"content":"                if (tokens.length \u003c 2) {"},{"lineNumber":159,"author":{"gitId":"lirc572"},"content":"                    throw new Exception(\"Please provide a task name!\");"},{"lineNumber":160,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":161,"author":{"gitId":"lirc572"},"content":"                Task task \u003d new TodoTask(tokens[1]);"},{"lineNumber":162,"author":{"gitId":"lirc572"},"content":"                tasks.add(task);"},{"lineNumber":163,"author":{"gitId":"lirc572"},"content":"                printLine(\"Got it! I\u0027ve added this task:\");"},{"lineNumber":164,"author":{"gitId":"lirc572"},"content":"                printLine(\"  \" + task);"},{"lineNumber":165,"author":{"gitId":"lirc572"},"content":"                printLine(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"},{"lineNumber":166,"author":{"gitId":"lirc572"},"content":"            } else if (tokens[0].equals(\"deadline\")) {"},{"lineNumber":167,"author":{"gitId":"lirc572"},"content":"                if (tokens.length \u003c 2) {"},{"lineNumber":168,"author":{"gitId":"lirc572"},"content":"                    throw new Exception(\"Please provide a task name!\");"},{"lineNumber":169,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":170,"author":{"gitId":"lirc572"},"content":"                boolean dueTimeNotProvided \u003d true;"},{"lineNumber":171,"author":{"gitId":"lirc572"},"content":"                for (int index \u003d 2; index \u003c tokens.length; index++) {"},{"lineNumber":172,"author":{"gitId":"lirc572"},"content":"                    if (tokens[index].equals(\"/by\")) {"},{"lineNumber":173,"author":{"gitId":"lirc572"},"content":"                        dueTimeNotProvided \u003d false;"},{"lineNumber":174,"author":{"gitId":"lirc572"},"content":"                        if (index + 1 \u003c tokens.length) {"},{"lineNumber":175,"author":{"gitId":"lirc572"},"content":"                            Task task \u003d new DeadlineTask(tokens[1], tokens[index + 1]);"},{"lineNumber":176,"author":{"gitId":"lirc572"},"content":"                            tasks.add(task);"},{"lineNumber":177,"author":{"gitId":"lirc572"},"content":"                            printLine(\"Got it! I\u0027ve added this task:\");"},{"lineNumber":178,"author":{"gitId":"lirc572"},"content":"                            printLine(\"  \" + task);"},{"lineNumber":179,"author":{"gitId":"lirc572"},"content":"                            printLine(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"},{"lineNumber":180,"author":{"gitId":"lirc572"},"content":"                        } else {"},{"lineNumber":181,"author":{"gitId":"lirc572"},"content":"                            throw new Exception(\"Please provide a valid due time!\");"},{"lineNumber":182,"author":{"gitId":"lirc572"},"content":"                        }"},{"lineNumber":183,"author":{"gitId":"lirc572"},"content":"                        break;"},{"lineNumber":184,"author":{"gitId":"lirc572"},"content":"                    }"},{"lineNumber":185,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":186,"author":{"gitId":"lirc572"},"content":"                if (dueTimeNotProvided) {"},{"lineNumber":187,"author":{"gitId":"lirc572"},"content":"                    Task task \u003d new DeadlineTask(tokens[1]);"},{"lineNumber":188,"author":{"gitId":"lirc572"},"content":"                    tasks.add(task);"},{"lineNumber":189,"author":{"gitId":"lirc572"},"content":"                    printLine(\"Got it! I\u0027ve added this task:\");"},{"lineNumber":190,"author":{"gitId":"lirc572"},"content":"                    printLine(\"  \" + task);"},{"lineNumber":191,"author":{"gitId":"lirc572"},"content":"                    printLine(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"},{"lineNumber":192,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":193,"author":{"gitId":"lirc572"},"content":"            } else if (tokens[0].equals(\"event\")) {"},{"lineNumber":194,"author":{"gitId":"lirc572"},"content":"                if (tokens.length \u003c 2) {"},{"lineNumber":195,"author":{"gitId":"lirc572"},"content":"                    throw new Exception(\"Please provide a task name!\");"},{"lineNumber":196,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":197,"author":{"gitId":"lirc572"},"content":"                boolean eventTimeNotProvided \u003d true;"},{"lineNumber":198,"author":{"gitId":"lirc572"},"content":"                for (int index \u003d 2; index \u003c tokens.length; index++) {"},{"lineNumber":199,"author":{"gitId":"lirc572"},"content":"                    if (tokens[index].equals(\"/at\")) {"},{"lineNumber":200,"author":{"gitId":"lirc572"},"content":"                        eventTimeNotProvided \u003d false;"},{"lineNumber":201,"author":{"gitId":"lirc572"},"content":"                        if (index + 1 \u003c tokens.length) {"},{"lineNumber":202,"author":{"gitId":"lirc572"},"content":"                            Task task \u003d new EventTask(tokens[1], tokens[index + 1]);"},{"lineNumber":203,"author":{"gitId":"lirc572"},"content":"                            tasks.add(task);"},{"lineNumber":204,"author":{"gitId":"lirc572"},"content":"                            printLine(\"Got it! I\u0027ve added this task:\");"},{"lineNumber":205,"author":{"gitId":"lirc572"},"content":"                            printLine(\"  \" + task);"},{"lineNumber":206,"author":{"gitId":"lirc572"},"content":"                            printLine(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"},{"lineNumber":207,"author":{"gitId":"lirc572"},"content":"                        } else {"},{"lineNumber":208,"author":{"gitId":"lirc572"},"content":"                            throw new Exception(\"Please provide a valid event time!\");"},{"lineNumber":209,"author":{"gitId":"lirc572"},"content":"                        }"},{"lineNumber":210,"author":{"gitId":"lirc572"},"content":"                        break;"},{"lineNumber":211,"author":{"gitId":"lirc572"},"content":"                    }"},{"lineNumber":212,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":213,"author":{"gitId":"lirc572"},"content":"                if (eventTimeNotProvided) {"},{"lineNumber":214,"author":{"gitId":"lirc572"},"content":"                    Task task \u003d new EventTask(tokens[1]);"},{"lineNumber":215,"author":{"gitId":"lirc572"},"content":"                    tasks.add(task);"},{"lineNumber":216,"author":{"gitId":"lirc572"},"content":"                    printLine(\"Got it! I\u0027ve added this task:\");"},{"lineNumber":217,"author":{"gitId":"lirc572"},"content":"                    printLine(\"  \" + task);"},{"lineNumber":218,"author":{"gitId":"lirc572"},"content":"                    printLine(String.format(\"Now you have %d tasks in the list.\", tasks.size()));"},{"lineNumber":219,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":220,"author":{"gitId":"lirc572"},"content":"            } else {"},{"lineNumber":221,"author":{"gitId":"lirc572"},"content":"                throw new Exception(\"Unknown command!\");"},{"lineNumber":222,"author":{"gitId":"lirc572"},"content":"            }"},{"lineNumber":223,"author":{"gitId":"lirc572"},"content":"        }"},{"lineNumber":224,"author":{"gitId":"lirc572"},"content":"        printHorizontalLine();"},{"lineNumber":225,"author":{"gitId":"lirc572"},"content":"        printEmptyLine();"},{"lineNumber":226,"author":{"gitId":"lirc572"},"content":"        return !EXIT_COMMANDS.contains(command);"},{"lineNumber":227,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":229,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":230,"author":{"gitId":"lirc572"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":231,"author":{"gitId":"lirc572"},"content":"        String logo \u003d \" ____        _        \\n\" +"},{"lineNumber":232,"author":{"gitId":"lirc572"},"content":"                \"|  _ \\\\ _   _| | _____ \\n\" +"},{"lineNumber":233,"author":{"gitId":"lirc572"},"content":"                \"| | | | | | | |/ / _ \\\\\\n\" +"},{"lineNumber":234,"author":{"gitId":"lirc572"},"content":"                \"| |_| | |_| |   \u003c  __/\\n\" +"},{"lineNumber":235,"author":{"gitId":"lirc572"},"content":"                \"|____/ \\\\__,_|_|\\\\_\\\\___|\";"},{"lineNumber":236,"author":{"gitId":"lirc572"},"content":"        printHorizontalLine();"},{"lineNumber":237,"author":{"gitId":"lirc572"},"content":"        printEmptyLine();"},{"lineNumber":238,"author":{"gitId":"lirc572"},"content":"        for (String line : logo.split(\"\\n\")) {"},{"lineNumber":239,"author":{"gitId":"lirc572"},"content":"            printLine(line);"},{"lineNumber":240,"author":{"gitId":"lirc572"},"content":"        }"},{"lineNumber":241,"author":{"gitId":"lirc572"},"content":"        printEmptyLine();"},{"lineNumber":242,"author":{"gitId":"lirc572"},"content":"        printLine(\"Who is the ultimate Personal Assistant Chatbot that helps keep track of various things?\");"},{"lineNumber":243,"author":{"gitId":"lirc572"},"content":"        printLine(\"Sou, watashi desu!\");"},{"lineNumber":244,"author":{"gitId":"lirc572"},"content":"        printHorizontalLine();"},{"lineNumber":245,"author":{"gitId":"lirc572"},"content":"        printEmptyLine();"},{"lineNumber":246,"author":{"gitId":"lirc572"},"content":"        for (;;) {"},{"lineNumber":247,"author":{"gitId":"lirc572"},"content":"            try {"},{"lineNumber":248,"author":{"gitId":"lirc572"},"content":"                if (!processCommand(sc.nextLine())) {"},{"lineNumber":249,"author":{"gitId":"lirc572"},"content":"                    break;"},{"lineNumber":250,"author":{"gitId":"lirc572"},"content":"                }"},{"lineNumber":251,"author":{"gitId":"lirc572"},"content":"            } catch (Exception e) {"},{"lineNumber":252,"author":{"gitId":"lirc572"},"content":"                printLine(\"Error: \" + e.getMessage());"},{"lineNumber":253,"author":{"gitId":"lirc572"},"content":"            }"},{"lineNumber":254,"author":{"gitId":"lirc572"},"content":"        }"},{"lineNumber":255,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"lirc572":252,"-":4}},{"path":"src/main/java/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lirc572"},"content":"public class EventTask extends Task {"},{"lineNumber":2,"author":{"gitId":"lirc572"},"content":"    private String eventTime;"},{"lineNumber":3,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":4,"author":{"gitId":"lirc572"},"content":"    public EventTask(String name) {"},{"lineNumber":5,"author":{"gitId":"lirc572"},"content":"        super(name);"},{"lineNumber":6,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":8,"author":{"gitId":"lirc572"},"content":"    public EventTask(String name, String eventTime) {"},{"lineNumber":9,"author":{"gitId":"lirc572"},"content":"        super(name);"},{"lineNumber":10,"author":{"gitId":"lirc572"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":11,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":13,"author":{"gitId":"lirc572"},"content":"    public void setEventTime(String eventTime) {"},{"lineNumber":14,"author":{"gitId":"lirc572"},"content":"        this.eventTime \u003d eventTime;"},{"lineNumber":15,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":17,"author":{"gitId":"lirc572"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"lirc572"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"lirc572"},"content":"        return \"[E]\" + super.toString() + (this.eventTime !\u003d null ? String.format(\" (at: %s)\", this.eventTime) : \"\");"},{"lineNumber":20,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"lirc572"},"content":"}"}],"authorContributionMap":{"lirc572":21}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lirc572"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"lirc572"},"content":"    private boolean isDone;"},{"lineNumber":3,"author":{"gitId":"lirc572"},"content":"    private final String name;"},{"lineNumber":4,"author":{"gitId":"lirc572"},"content":"    public Task(String name) {"},{"lineNumber":5,"author":{"gitId":"lirc572"},"content":"        this.name \u003d name;"},{"lineNumber":6,"author":{"gitId":"lirc572"},"content":"        this.isDone \u003d false;"},{"lineNumber":7,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"lirc572"},"content":"    public String getName() {"},{"lineNumber":9,"author":{"gitId":"lirc572"},"content":"        return this.name;"},{"lineNumber":10,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"lirc572"},"content":"    public boolean getIsDone() {"},{"lineNumber":12,"author":{"gitId":"lirc572"},"content":"        return this.isDone;"},{"lineNumber":13,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"lirc572"},"content":"    public void setIsDone(boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"lirc572"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":16,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":18,"author":{"gitId":"lirc572"},"content":"    @Override"},{"lineNumber":19,"author":{"gitId":"lirc572"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitId":"lirc572"},"content":"        return String.format(\"[%s] %s\", this.getIsDone()? \"X\" : \" \", this.getName());"},{"lineNumber":21,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"lirc572"},"content":"}"}],"authorContributionMap":{"lirc572":22}},{"path":"src/main/java/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lirc572"},"content":"public class TodoTask extends Task {"},{"lineNumber":2,"author":{"gitId":"lirc572"},"content":"    public TodoTask(String name) {"},{"lineNumber":3,"author":{"gitId":"lirc572"},"content":"        super(name);"},{"lineNumber":4,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"lirc572"},"content":""},{"lineNumber":6,"author":{"gitId":"lirc572"},"content":"    @Override"},{"lineNumber":7,"author":{"gitId":"lirc572"},"content":"    public String toString() {"},{"lineNumber":8,"author":{"gitId":"lirc572"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":9,"author":{"gitId":"lirc572"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"lirc572"},"content":"}"}],"authorContributionMap":{"lirc572":10}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lirc572"},"content":"list"},{"lineNumber":2,"author":{"gitId":"lirc572"},"content":"todo borrow_book"},{"lineNumber":3,"author":{"gitId":"lirc572"},"content":"deadline return_book /by Sunday"},{"lineNumber":4,"author":{"gitId":"lirc572"},"content":"event project_meeting /at Mon_2-4pm"},{"lineNumber":5,"author":{"gitId":"lirc572"},"content":"list"},{"lineNumber":6,"author":{"gitId":"lirc572"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"lirc572"},"content":"list"},{"lineNumber":8,"author":{"gitId":"lirc572"},"content":"done 2"},{"lineNumber":9,"author":{"gitId":"lirc572"},"content":"list"},{"lineNumber":10,"author":{"gitId":"lirc572"},"content":"done 3"},{"lineNumber":11,"author":{"gitId":"lirc572"},"content":"list"},{"lineNumber":12,"author":{"gitId":"lirc572"},"content":"deadline"},{"lineNumber":13,"author":{"gitId":"lirc572"},"content":"todo"},{"lineNumber":14,"author":{"gitId":"lirc572"},"content":"event"},{"lineNumber":15,"author":{"gitId":"lirc572"},"content":"deadline submit_assignment /by"},{"lineNumber":16,"author":{"gitId":"lirc572"},"content":"event lecture /at"},{"lineNumber":17,"author":{"gitId":"lirc572"},"content":"excuseme"},{"lineNumber":18,"author":{"gitId":"lirc572"},"content":"delete 2"},{"lineNumber":19,"author":{"gitId":"lirc572"},"content":"list"},{"lineNumber":20,"author":{"gitId":"lirc572"},"content":"delete 1"},{"lineNumber":21,"author":{"gitId":"lirc572"},"content":"list"},{"lineNumber":22,"author":{"gitId":"lirc572"},"content":"quit"}],"authorContributionMap":{"lirc572":22}}]
