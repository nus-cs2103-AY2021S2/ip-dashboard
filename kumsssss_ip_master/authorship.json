[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    String by;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"        this.by \u003d by;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":13}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.io.InputStreamReader;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    //keeps taking in user input and carrying out manage method"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    //until the input is \"bye\""},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public static void main(String[] args) throws IOException {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        BufferedReader br \u003d new BufferedReader(new InputStreamReader(System.in));"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Hey there! This is Kums\");"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"How can i help?\");"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        int listLength \u003d 0;"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"---------------------------------------\");"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"        String command \u003d br.readLine();"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        String[] arr \u003d command.split(\" \");"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"---------------------------------------\");"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        while (!command.equals(\"bye\")) {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            try {"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"                TaskManager.manage(list, arr);"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"            } catch (DukeException e) {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"                System.out.println(e.getMessage());"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"---------------------------------------\");"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"            command \u003d br.readLine();"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"            arr \u003d command.split(\" \");"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"---------------------------------------\");"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"---------------------------------------\");"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":30,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    public DukeException(String message) {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"        super(message);"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":7}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Event extends Task{"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    String dateAndTime;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public Event(String description, String dateAndTime) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"        this.dateAndTime \u003d dateAndTime;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + dateAndTime + \")\";"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":13}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    String description;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    boolean isDone;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    public Task(String description) {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"        this.description \u003d description;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    void completed() {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        this.isDone \u003d true;"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"        return this.isDone ? \"[X] \" + description : \"[ ] \" + description;"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":18}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class TaskManager {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public static int listLength \u003d 0;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    //checks the type of instruction given based on the first word in the user input"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    //throws exception if insufficient/wrong instruction given"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    //increments listLength if a valid task and decrements if a delete instruction"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    //adds a task to the list if task given and removes if a delete instruction"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    //prints all tasks if input is list"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    //completes a certain task if input is done"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    public static void manage(ArrayList\u003cTask\u003e list, String[] info) throws DukeException {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        int length \u003d info.length;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"done\")) {"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"            if (length \u003d\u003d 1) {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"                throw new DukeException(\"OOPS! Task completed is not specified\");"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"            if (Integer.parseInt(info[1]) \u003e listLength || Integer.parseInt(info[1]) \u003c\u003d 0) {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"                throw new DukeException(\"OOPS! There is no such specified task\");"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"            Task tobeDone \u003d list.get(Integer.parseInt(info[1]) - 1);"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"            tobeDone.completed();"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"    \" + tobeDone);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        }  else if (info[0].equals(\"list\")) {"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"            for (int i \u003d 0;  i \u003c listLength; i++) {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"                System.out.println( (i+1) + \".\"  + list.get(i));"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"delete\")) {"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"            int taskIndex \u003d Integer.parseInt(info[1]) - 1;"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"            if (taskIndex \u003e listLength || taskIndex \u003c 0) {"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"                throw new DukeException(\"OOPS!!! There is no task in that line to delete\");"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\" Noted. I\u0027ve removed this task:\");"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"            System.out.println(list.remove(taskIndex));"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"            listLength--;"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"Now you have \" + listLength + \" tasks in the list.\");"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        }else {"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"            Task task \u003d null;"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"            if (info[0].equals(\"todo\")) {"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"                if (length \u003d\u003d 1) {"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"                    throw new DukeException(\"OOPS!!! The description of a todo cannot be empty\");"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"                StringBuffer sb \u003d new StringBuffer();"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"                for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"                    sb.append(info[i]);"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"                    if (i !\u003d info.length - 1) { sb.append(\" \"); }"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"                task \u003d new ToDo(sb.toString());"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"            } else if (info[0].equals(\"event\") || info[0].equals(\"deadline\")){"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"                if (length \u003d\u003d 1) {"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"                    if (info[0].equals(\"event\")) {"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"                        throw new DukeException(\"OOPS! Specifics are needed for this event\");"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"                    } else {"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"                        throw new DukeException(\"OOPS! Specifics are needed for this deadline\");"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"                    }"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"                StringBuffer description \u003d new StringBuffer();"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"                StringBuffer dateAndTime \u003d new StringBuffer();"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"                boolean descriptionDone \u003d false;"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"                for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"                    if (info[i].equals(\"/at\") || info[i].equals(\"/by\")) {"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"                        descriptionDone \u003d true;"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"                        i++;"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"                    }"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"                    if (descriptionDone) {"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"                        dateAndTime.append(info[i]);"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"                        if (i !\u003d info.length - 1) { dateAndTime.append(\" \"); }"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"                    } else {"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"                        description.append(info[i]);"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"                        if (i !\u003d info.length - 1) { description.append(\" \"); }"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"                    }"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"                if (info[0].equals(\"event\")) {"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"                    task \u003d new Event(description.toString(), dateAndTime.toString());"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"                } else if (info[0].equals(\"deadline\")) {"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"                    task \u003d new Deadline(description.toString(), dateAndTime.toString());"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"            } else {"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"                throw new DukeException(\"Sorry but I don\u0027t understand what that means! :-(\");"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"            list.add(task);"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"            listLength++;"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"    \" + task);"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"            System.out.println(\"Now you have \" + (listLength) + \" tasks in the list.\");"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":91}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    public ToDo(String description) {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"        super(description);"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"todo 2101"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"deadline 2103T /by Wed"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"event Party at Louis\u0027 house /at Sunday 9-11pm"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"delete 2"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"list"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"bye"}],"authorContributionMap":{"kumsssss":6}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"kumsssss":1,"-":37}}]
