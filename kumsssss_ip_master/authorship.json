[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"    mainClassName \u003d \"Duke\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"},{"lineNumber":57,"author":{"gitId":"-"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"    enableAssertions \u003d true"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":16,"-":45}},{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class AddCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public AddCommand(String[] info) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        assert info.length \u003e 0 : \"Empty command\";"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * adds a task to the list using the given information."},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath to the file to store the given tasks into"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the provided information is invalid"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"todo\")) {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            tasks.addTodo(info);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"event\")) {"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"            tasks.addEvent(info);"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"deadline\")) {"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"            tasks.addDeadline(info);"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        storage.store(tasks);"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        return ui.addedTask(tasks);"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":37}},{"path":"src/main/java/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class ByeCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        return true;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"     * Stores all the tasks into a file. Filepath of the file"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * will be obtained from the Storage object."},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains filepath of the file to store the given tasks into"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * @throws IOException if no such file exist in the directory the filepath directs to"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        storage.store(tasks);"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        return ui.bye();"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":25}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public abstract class Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public abstract boolean isBye();"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":9}},{"path":"src/main/java/Date.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"public class Date {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    private LocalDate date;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public Date(String date) {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.date \u003d LocalDate.parse(date);"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"     * Returns the date object in a MMM dd yyyy format."},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     * @return a string representing the date in the object"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    public String toFormattedString() {"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        return date.toString();"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":24}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected Date by;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public Deadline(String description, Date by, String type) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        super(description, type);"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * displays the deadline details and whether it is completed."},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * @return String showing the information regarding the Deadline object"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.toFormattedString() + \")\";"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":22}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public DeleteCommand(String[] info) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * removes a task from the list using the given information."},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * The information may not be accurate and throw a DukeException"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * if the provided information is inaccurate."},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath of the file to store the given tasks into"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the provided information is invalid"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d tasks.delete(info);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        int listLength \u003d tasks.getListLength();"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        storage.store(tasks);"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        return ui.deletedTask(task, listLength);"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":33}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":" * An example of a custom control using FXML."},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":" * containing text from the speaker."},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":" */"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"public class DialogBox extends HBox {"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    private Label dialog;"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    private ImageView displayPicture;"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"            fxmlLoader.load();"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        } catch (IOException e) {"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"            e.printStackTrace();"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"        dialog.setText(text);"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        displayPicture.setImage(img);"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"    private void flip() {"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        Collections.reverse(tmp);"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"        return new DialogBox(text, img);"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"        db.flip();"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        return db;"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":59}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class DoneCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public DoneCommand(String[] info) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * changes the state of a task to completed."},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath of the file to store the given tasks into"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the information given is invalid"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException {"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d tasks.done(info);"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        storage.store(tasks);"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        return ui.didTask(task);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":30}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    private Storage storage;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    private TaskList tasks;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    private Ui ui;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"     * Creates a Duke object"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"     * @param filePath string that shows the filepath to the file that stores past data."},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    public Duke(String filePath) {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        } catch (IOException e) {"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"            ui.showLoadingError();"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"     * Runs the main Duke program"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    public void run() {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        ui.intro();"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        ui.showLine();"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        boolean isBye \u003d false;"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        while (!isBye) {"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"            try {"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"                ui.showLine();"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"                isBye \u003d c.isBye();"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"                ui.showLine();"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"            } catch (DukeException | IOException e) {"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"     * You should have your own function to generate a response to user input."},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"     * Replace this stub with your completed method."},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"    String getResponse(String input) {"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"            Command c \u003d Parser.parse(input);"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"            return c.execute(tasks, ui, storage);"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        } catch (DukeException | IOException e) {"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"            return ui.showError(e.getMessage());"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":55,"-":3}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    public DukeException(String message) {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"        super(message);"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":7}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected Date date;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    protected String duration;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    public Event(String description, Date date, String duration, String type) {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"        super(description, type);"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.date \u003d date;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.duration \u003d duration;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * converts the Event object to a String"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * @return String showing the details of the Event object"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.toFormattedString() + \" \" + duration + \")\";"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":21}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class FindCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public FindCommand(String[] info) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        return false;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        StringBuilder keyword \u003d new StringBuilder();"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"            keyword.append(info[i]);"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"            if (i !\u003d info.length - 1) {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"                keyword.append(\" \");"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        TaskList filteredList \u003d tasks.find(keyword.toString());"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        return ui.printFilteredList(filteredList);"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":25}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":" * A GUI for Duke using FXML."},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    private Duke duke \u003d new Duke(\"text-ui-test/data.txt\");"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"            stage.show();"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        } catch (IOException e) {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"            e.printStackTrace();"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":31}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    private VBox dialogContainer;"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    private TextField userInput;"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"    private Button sendButton;"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    private Duke duke;"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/tzuyu.png\"));"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/irene.png\"));"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    private String welcomeMessage \u003d \"Hey there! This is Irene\" + \"\\n\" + \"How can I help?\";"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"    public void initialize() {"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcomeMessage, dukeImage));"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        duke \u003d d;"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"    private void handleUserInput() {"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        );"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"        userInput.clear();"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":51}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Parser {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"     * returns the Command to be carried out based on the input string."},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"     * @param command String containing user input"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"     * @return Command object based on the instruction of the String"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the string is not a valid instruction"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public static Command parse(String command) throws DukeException {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        String[] info \u003d command.split(\" \");"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"todo\") || info[0].equals(\"event\") || info[0].equals(\"deadline\")) {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"            checkAddCommand(info);"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"            return new AddCommand(info);"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"done\")) {"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"            checkDoneCommand(info);"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"            return new DoneCommand(info);"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"delete\")) {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            checkDeleteCommand(info);"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"            return new DeleteCommand(info);"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"list\")) {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"            checkPrintCommand(info);"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"            return new PrintCommand(info);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"bye\")) {"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"            checkByeCommand(info);"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"            return new ByeCommand();"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"find\")) {"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"            checkFindCommand(info);"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"            return new FindCommand(info);"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Sorry but I don\u0027t understand what that means! :(\");"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"    private static void checkFindCommand(String[] info) throws DukeException {"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        if (info.length \u003d\u003d 1) {"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! No keyword is given!\");"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"    private static void checkByeCommand(String[] info) throws DukeException {"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"        if (info.length \u003e 1) {"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Please remove the additional information provided!\");"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"    private static void checkPrintCommand(String[] info) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"        if (info.length \u003e 1) {"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Please remove the additional information provided!\");"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"    private static void checkDeleteCommand(String[] info) throws DukeException {"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        int length \u003d info.length;"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"        if (length \u003d\u003d 1) {"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Please provide the number of the task to delete\");"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"            int taskNumber \u003d Integer.parseInt(info[1]);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Please provide a valid command :(\");"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"    private static void checkDoneCommand(String[] info) throws DukeException {"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"        int length \u003d info.length;"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"        if (length \u003d\u003d 1) {"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! Task completed is not specified\");"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"            int taskNumber \u003d Integer.parseInt(info[1]);"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Please provide a valid command :(\");"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"    private static void checkAddCommand(String[] info) throws DukeException {"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"        int length \u003d info.length;"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"todo\") \u0026\u0026 length \u003d\u003d 1) {"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty\");"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"event\") \u0026\u0026 length \u003d\u003d 1) {"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! Specifics are needed for this event\");"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"deadline\") \u0026\u0026 length \u003d\u003d 1) {"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! Specifics are needed for this deadline\");"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":88}},{"path":"src/main/java/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class PrintCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public PrintCommand(String[] info) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * prints the tasks stored in the TaskList object."},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath to the file to store the given tasks into"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the provided inormation is invalid"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        return ui.printList(tasks);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":26}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.io.FileReader;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"public class Storage {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    private String filePath;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public Storage(String filePath) {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * stores the tasks in the TaskList object into a file."},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * tasks will be stored in a specific string format,"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * each task occupying one line."},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     * @param list TaskList containing all the tasks of the user"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * @throws IOException if filepath is wrong"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    void store(TaskList list) throws IOException {"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e tasks \u003d list.getList();"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        for (Task task : tasks) {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            String s \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"            if (task.type.equals(\"T\")) {"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone ? \"T\" + \" , \" + \"1\" + \" , \" + task.description"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"                        : \"T\" + \" , \" + \"0\" + \" , \" + task.description;"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"            } else if (task.type.equals(\"E\")) {"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"                Event myTask \u003d (Event) task;"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"                        ? \"E\" + \" , \" + \"1\" + \" , \" + task.description + \" , \" + myTask.date + \" , \" + myTask.duration"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"                        : \"E\" + \" , \" + \"0\" + \" , \" + task.description + \" , \" + myTask.date + \" , \" + myTask.duration;"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"            } else if (task.type.equals(\"D\")) {"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"                Deadline myTask \u003d (Deadline) task;"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone ? \"D\" + \" , \" + \"1\" + \" , \" + task.description + \" , \" + myTask.by"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"                        : \"D\" + \" , \" + \"0\" + \" , \" + task.description + \" , \" + myTask.by;"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"            fw.write(s + System.lineSeparator());"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        fw.close();"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"     * loads the tasks stored in the file into a ArrayList of Tasks."},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"     * if file is empty, empty list is returned"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"     * @return ArrayList of Tasks given by the user previously"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"     * @throws IOException if the file is misread or file cannot be found"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"    ArrayList\u003cTask\u003e load() throws IOException {"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        FileReader fr \u003d new FileReader(file);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"        BufferedReader br \u003d new BufferedReader(fr);"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        String task \u003d br.readLine();"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"        while (task !\u003d null) {"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"            Task taskObject \u003d null;"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"            String[] taskInfo \u003d task.split(\" , \");"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"            if (taskInfo[0].equals(\"T\")) {"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new ToDo(taskInfo[2], \"T\");"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ? true : false;"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"            } else if (taskInfo[0].equals(\"E\")) {"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(taskInfo[3]);"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new Event(taskInfo[2], date, taskInfo[4], \"E\");"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ? true : false;"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"            } else if (taskInfo[0].equals(\"D\")) {"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(taskInfo[3]);"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new Deadline(taskInfo[2], date, \"D\");"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ? true : false;"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"            list.add(taskObject);"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"            task \u003d br.readLine();"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"        return list;"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":83}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String type;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public Task(String description, String type) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.description \u003d description;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.isDone \u003d false;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        this.type \u003d type;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    void completed() {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        this.isDone \u003d true;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * converts the task object into a string"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @return string containing information about the task object"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        return this.isDone ? \"[X] \" + description : \"[ ] \" + description;"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":25}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    private int listLength;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        this.listLength \u003d taskList.size();"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    public TaskList() {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        this.listLength \u003d 0;"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * creates a Task object and adds it to the TaskList object"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     * @param info String array containing details of the user input"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the user input is not specified properly"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    void addTodo(String[] info) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        int length \u003d info.length;"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        StringBuffer sb \u003d new StringBuffer();"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            sb.append(info[i]);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"            if (i !\u003d info.length - 1) {"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"                sb.append(\" \");"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d new ToDo(sb.toString(), \"T\");"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        taskList.add(task);"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        listLength++;"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"    void addEvent(String[] info) {"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        StringBuffer description \u003d new StringBuffer();"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"        StringBuffer dateAndTime \u003d new StringBuffer();"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        boolean isDescriptionDone \u003d false;"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"            if (info[i].equals(\"/at\")) {"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"                isDescriptionDone \u003d true;"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"                i++;"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"            if (isDescriptionDone) {"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"                dateAndTime.append(info[i]);"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"                if (i !\u003d info.length - 1) {"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"                    dateAndTime.append(\" \");"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"            } else {"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"                description.append(info[i]);"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"                if (i !\u003d info.length - 1) {"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"                    description.append(\" \");"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"        String[] details \u003d dateAndTime.toString().split(\" \");"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        Date date \u003d new Date(details[0]);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d new Event(description.toString(), date, details[1], \"E\");"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        taskList.add(task);"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"        listLength++;"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"    void addDeadline(String[] info) {"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"        StringBuffer description \u003d new StringBuffer();"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"        StringBuffer dateAndTime \u003d new StringBuffer();"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"        boolean isDescriptionDone \u003d false;"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"            if (info[i].equals(\"/by\")) {"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"                isDescriptionDone \u003d true;"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"                i++;"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"            if (isDescriptionDone) {"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"                dateAndTime.append(info[i]);"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"                if (i !\u003d info.length - 1) {"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"                    dateAndTime.append(\" \");"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"            } else {"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"                description.append(info[i]);"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"                if (i !\u003d info.length - 1) {"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"                    description.append(\" \");"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"        Date date \u003d new Date(dateAndTime.toString());"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d new Deadline(description.toString(), date, \"D\");"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"        taskList.add(task);"},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":"        listLength++;"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":95,"author":{"gitId":"kumsssss"},"content":"     * removes a task from the TaskList. The task is determined by the user input"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"     * found in the string array."},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"     * @param info String array containing user input"},{"lineNumber":99,"author":{"gitId":"kumsssss"},"content":"     * @return Task that has been removed"},{"lineNumber":100,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the task number provided is less than 0 or more than the number of tasks in the TaskList"},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":"    Task delete(String[] info) throws DukeException {"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"        int taskIndex \u003d Integer.parseInt(info[1]) - 1;"},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"        if (taskIndex \u003e\u003d listLength || taskIndex \u003c 0) {"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS!!! There is no task in that line to delete\");"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d taskList.remove(taskIndex);"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"        listLength--;"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"        return task;"},{"lineNumber":110,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":113,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":114,"author":{"gitId":"kumsssss"},"content":"     * changes the state of the task to completed. The task is determined by the user input"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"     * found in the string array."},{"lineNumber":116,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":117,"author":{"gitId":"kumsssss"},"content":"     * @param info String array containing user input"},{"lineNumber":118,"author":{"gitId":"kumsssss"},"content":"     * @return Task that has been completed"},{"lineNumber":119,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the task number provided is less than 0 or more than the number of tasks in the TaskList"},{"lineNumber":120,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"kumsssss"},"content":"    Task done(String[] info) throws DukeException {"},{"lineNumber":122,"author":{"gitId":"kumsssss"},"content":"        int taskNumber \u003d Integer.parseInt(info[1]);"},{"lineNumber":123,"author":{"gitId":"kumsssss"},"content":"        assert taskNumber \u003c\u003d 0 : \"invalid number\";"},{"lineNumber":124,"author":{"gitId":"kumsssss"},"content":"        if (taskNumber \u003e listLength) {"},{"lineNumber":125,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Invalid number! You only have \" + listLength + \" tasks!\");"},{"lineNumber":126,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":127,"author":{"gitId":"kumsssss"},"content":"        Task tobeDone \u003d taskList.get(Integer.parseInt(info[1]) - 1);"},{"lineNumber":128,"author":{"gitId":"kumsssss"},"content":"        tobeDone.completed();"},{"lineNumber":129,"author":{"gitId":"kumsssss"},"content":"        return tobeDone;"},{"lineNumber":130,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":132,"author":{"gitId":"kumsssss"},"content":"    TaskList find(String keyword) throws DukeException {"},{"lineNumber":133,"author":{"gitId":"kumsssss"},"content":"        String keywordLowerCased \u003d keyword.toLowerCase();"},{"lineNumber":134,"author":{"gitId":"kumsssss"},"content":"        TaskList filteredList \u003d new TaskList();"},{"lineNumber":135,"author":{"gitId":"kumsssss"},"content":"        for (Task task : taskList) {"},{"lineNumber":136,"author":{"gitId":"kumsssss"},"content":"            String description \u003d task.description.toLowerCase();"},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"            if (description.contains(keywordLowerCased)) {"},{"lineNumber":138,"author":{"gitId":"kumsssss"},"content":"                filteredList.taskList.add(task);"},{"lineNumber":139,"author":{"gitId":"kumsssss"},"content":"                filteredList.listLength++;"},{"lineNumber":140,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":141,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":142,"author":{"gitId":"kumsssss"},"content":"        return filteredList;"},{"lineNumber":143,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":145,"author":{"gitId":"kumsssss"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":146,"author":{"gitId":"kumsssss"},"content":"        return taskList;"},{"lineNumber":147,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":149,"author":{"gitId":"kumsssss"},"content":"    public int getListLength() {"},{"lineNumber":150,"author":{"gitId":"kumsssss"},"content":"        return listLength;"},{"lineNumber":151,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":153,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":153}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    public ToDo(String description, String type) {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"        super(description, type);"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"     * converts the object to a string"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"     * @return String containing details about the Task"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":16}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.io.InputStreamReader;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    private BufferedReader reader;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public Ui() {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        this.reader \u003d new BufferedReader(new InputStreamReader(System.in));"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    String intro() {"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        return \"Hey there! This is Einstein\" + \"\\n\" + \"How can I help?\";"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    void showLine() {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"---------------------------------------\");"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    String showError(String message) {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        return message;"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    String bye() {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        return \"Bye. Hope to see you again soon!\";"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"    String readCommand() throws IOException {"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"        return this.reader.readLine();"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"    String showLoadingError() {"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        return \"OOPS! The file hasn\u0027t been created yet\";"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"     * Prints lines to show the user what task has been added."},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"     * @param tasks TaskList of all the tasks"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"    String addedTask(TaskList tasks) {"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        int numberOfTasks \u003d tasks.getListLength();"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d tasks.getList().get(numberOfTasks - 1);"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        String result \u003d \"Got it. I\u0027ve added this task:\" + \"\\n\" + \"    \" + task.toString() + \"\\n\""},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"                + \"Now you have \" + (numberOfTasks) + \" tasks in the list.\";"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"        return result;"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"    \" + task);"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"Now you have \" + (numberOfTasks) + \" tasks in the list.\");"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"     * prints all the task in the list"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"     * @param tasks TaskList containing all the user\u0027s tasks"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"    String printList(TaskList tasks) {"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e list \u003d tasks.getList();"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"        String result \u003d \"Here are the tasks in your list:\";"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"            Task task \u003d list.get(i);"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"            result \u003d result + \"\\n\" + (i + 1) + task.toString();"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"            //System.out.println((i + 1) + \".\" + list.get(i));"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"        return result;"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"     * notifies the user that a specific task has been removed from the TaskList."},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"     * @param task Task that has been removed"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"     * @param listLength number of tasks left in the list"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"    String deletedTask(Task task, int listLength) {"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"        String result \u003d \"Noted. I\u0027ve removed this task:\" + \"\\n\" + task.toString() + \"\\n\" + \"Now you have \""},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"                + listLength + \" tasks in the list.\";"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"        return result;"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"Noted. I\u0027ve removed this task:\");"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(task);"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"Now you have \" + listLength + \" tasks in the list.\");"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"     * notifies the user that a specific task has been completed."},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"     * @param task Task that has just been completed"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"kumsssss"},"content":"    String didTask(Task task) {"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"        String result \u003d \"Nice! I\u0027ve marked this task as done:\" + \"\\n\" + \"    \" + task.toString();"},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"        return result;"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":99,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"    \" + task);"},{"lineNumber":100,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":"    String printFilteredList(TaskList tasks) {"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e list \u003d tasks.getList();"},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"        int listLength \u003d tasks.getListLength();"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"        String result \u003d \"Here are the matching tasks in your list:\";"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"        //System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 0; i \u003c listLength; i++) {"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"            Task task \u003d list.get(i);"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"            result \u003d result + \"\\n\" + (i + 1) + task.toString();"},{"lineNumber":110,"author":{"gitId":"kumsssss"},"content":"            //System.out.println((i + 1) + \".\" + list.get(i));"},{"lineNumber":111,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"        return result;"},{"lineNumber":113,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":114,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":114}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"kumsssss":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"kumsssss":19}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public void testCorrectCommand() throws DukeException {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        Command c \u003d Parser.parse(\"bye\");"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        Command c2 \u003d Parser.parse(\"list\");"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        assertEquals(c.isBye(), true);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        assertEquals(c2.isBye(), false);"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":13}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class TaskListTest {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public void testListLength() {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        int length \u003d tasks.getListLength();"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        assertEquals(length, 0);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":12}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class ToDoTest {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public void testToDoDescription() {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        ToDo td \u003d new ToDo(\"run\", \"T\");"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        assertEquals(td.description, \"run\");"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        assertEquals(td.isDone, false);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        td.completed();"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        assertEquals(td.isDone, true);"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":14}},{"path":"text-ui-test/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"T , 0 , 2103 iP"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"D , 0 , run  , 2021-02-03"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"E , 0 , OP1 presentation  , 2021-02-04 , 2-4pm"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"D , 0 , slides for 2101  , 2021-02-03"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"E , 0 , 2107 quiz  , 2021-02-04 , 10-12pm"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"D , 0 , run  , 2021-02-02"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e master"}],"authorContributionMap":{"kumsssss":9}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"todo 2101"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"deadline 2103T /by Wed"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"event Party at Louis\u0027 house /at Sunday 9-11pm"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"delete 2"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"list"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"bye"}],"authorContributionMap":{"kumsssss":6}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"kumsssss":1,"-":37}}]
