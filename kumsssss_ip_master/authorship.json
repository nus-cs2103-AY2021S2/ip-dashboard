[{"path":"src/main/java/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class AddCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public AddCommand(String[] info) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * adds a task to the list using the given information."},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath to the file to store the given tasks into"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the provided information is invalid"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        tasks.add(info);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        ui.addedTask(tasks);"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":27}},{"path":"src/main/java/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class ByeCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        return true;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"     * Stores all the tasks into a file. Filepath of the file"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * will be obtained from the Storage object."},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains filepath of the file to store the given tasks into"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * @throws IOException if no such file exist in the directory the filepath directs to"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        storage.store(tasks);"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        ui.bye();"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":25}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public abstract class Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public abstract boolean isBye();"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException, IOException;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":9}},{"path":"src/main/java/Date.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"public class Date {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    private LocalDate date;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public Date(String date) {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.date \u003d LocalDate.parse(date);"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"     * Returns the date object in a MMM dd yyyy format."},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     * @return a string representing the date in the object"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    public String toFormattedString() {"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        return date.toString();"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":24}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class Deadline extends Task {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected Date by;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public Deadline(String description, Date by, String type) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        super(description,type);"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.by \u003d by;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * displays the deadline details and whether it is completed."},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * @return String showing the information regarding the Deadline object"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.toFormattedString() + \")\";"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":22}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public DeleteCommand(String[] info) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * removes a task from the list using the given information."},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     * The information may not be accurate and throw a DukeException"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * if the provided information is inaccurate."},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath of the file to store the given tasks into"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the provided information is invalid"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d tasks.delete(info);"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        int listLength \u003d tasks.getListLength();"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        ui.deletedTask(task, listLength);"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":30}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class DoneCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public DoneCommand(String[] info) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * changes the state of a task to completed."},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath of the file to store the given tasks into"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the information given is invalid"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d tasks.done(info);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        ui.didTask(task);"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":27}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import java.io.InputStreamReader;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    private Storage storage;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    private TaskList tasks;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    private Ui ui;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    public Duke(String filePath) {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        ui \u003d new Ui();"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        } catch (IOException e) {"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"            ui.showLoadingError();"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    public void run()  {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        ui.intro();"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        ui.showLine();"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        boolean isBye \u003d false;"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        while (!isBye) {"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"            try {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"                String fullCommand \u003d ui.readCommand();"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"                Command c \u003d Parser.parse(fullCommand);"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"                ui.showLine();"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"                c.execute(tasks, ui, storage);"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"                isBye \u003d c.isBye();"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"                ui.showLine();"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"            } catch (DukeException | IOException e) {"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"                ui.showError(e.getMessage());"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        new Duke(\"text-ui-test/data.txt\").run();"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kumsssss":40,"-":4}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    public DukeException(String message) {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"        super(message);"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":7}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Event extends Task{"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected Date date;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    protected String duration;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    public Event(String description, Date date, String duration, String type) {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"        super(description, type);"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.date \u003d date;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.duration \u003d duration;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * converts the Event object to a String"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * @return String showing the details of the Event object"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + date.toFormattedString() + \" \" + duration + \")\";"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":21}},{"path":"src/main/java/FileWriting.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.FileWriter;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class FileWriting {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public static void writeToFile(String path, ArrayList\u003cTask\u003e list) throws IOException {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        for (Task task : list) {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"            String s \u003d \"\";"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"            if (task.type.equals(\"T\")) {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone ? \"T\" + \" , \" + \"1\" + \" , \" + task.description"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"                        : \"T\" + \" , \" + \"0\" + \" , \" + task.description;"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"            } else if (task.type.equals(\"E\")) {"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"                Event myTask \u003d (Event) task;"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"                        ? \"E\" + \" , \" + \"1\" + \" , \" + task.description + \" , \" + myTask.date + \" , \" + myTask.duration"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"                        : \"E\" + \" , \" + \"0\" + \" , \" + task.description + \" , \" + myTask.date + \" , \" + myTask.duration;"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            } else if (task.type.equals(\"D\")) {"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"                Deadline myTask \u003d (Deadline) task;"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone ? \"D\" + \" , \" + \"1\" + \" , \" + task.description + \" , \" + myTask.by"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"                        : \"D\" + \" , \" + \"0\" + \" , \" + task.description + \" , \" + myTask.by;"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"            fw.write(s + System.lineSeparator());"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        fw.close();"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":31}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class FindCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public FindCommand(String[] info) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        return false;"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        StringBuilder keyword \u003d new StringBuilder();"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"            keyword.append(info[i]);"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            if (i !\u003d info.length - 1) {"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"                keyword.append(\" \");"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        TaskList filteredList \u003d tasks.find(keyword.toString());"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        ui.printFilteredList(filteredList);"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":27}},{"path":"src/main/java/ListUpdater.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.BufferedReader;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import java.io.FileReader;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"public class ListUpdater {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public static ArrayList\u003cTask\u003e update(ArrayList\u003cTask\u003e list, String path) throws IOException {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        File file \u003d new File(path);"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        FileReader fr \u003d new FileReader(file);"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        BufferedReader br \u003d new BufferedReader(fr);"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        String task \u003d br.readLine();"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        while (task !\u003d null) {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"            Task taskObject \u003d null;"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"            String[] taskInfo \u003d task.split(\" , \");"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"            if (taskInfo[0].equals(\"T\")) {"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new ToDo(taskInfo[2], \"T\");"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ?  true :  false;"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"            } else if (taskInfo[0].equals(\"E\")) {"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(taskInfo[3]);"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new Event(taskInfo[2], date, taskInfo[4], \"E\");"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ?  true :  false;"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"            } else if (taskInfo[0].equals(\"D\")) {"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(taskInfo[3]);"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new Deadline(taskInfo[2], date, \"D\");"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ?  true :  false;"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"            list.add(taskObject);"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"            task \u003d br.readLine();"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"        return list;"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":35}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Parser {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"     * returns the Command to be carried out based on the input string."},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"     * @param command String containing user input"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"     * @return Command object based on the instruction of the String"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the string is not a valid instruction"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    public static Command parse(String command) throws DukeException {"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        String[] info \u003d command.split(\" \");"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"todo\") || info[0].equals(\"event\") || info[0].equals(\"deadline\")) {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"            return new AddCommand(info);"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"done\")) {"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"            return new DoneCommand(info);"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"delete\")) {"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"            return new DeleteCommand(info);"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"list\")) {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"            return new PrintCommand(info);"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"bye\")){"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"            return new ByeCommand();"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"find\")) {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"            return new FindCommand(info);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Sorry but I don\u0027t understand what that means! :-(\");"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":29}},{"path":"src/main/java/PrintCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class PrintCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String[] info;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    public PrintCommand(String[] info) {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"        this.info \u003d info;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    public boolean isBye() {"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        return info[0].equals(\"bye\");"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * prints the tasks stored in the TaskList object."},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * @param tasks a TaskList object that contains the tasks of the user"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * @param ui helps to print statement to let user know what has been done"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @param storage contains the filepath to the file to store the given tasks into"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the provided inormation is invalid"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        ui.printList(tasks);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":26}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.*;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"public class Storage {"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    private String filePath;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public Storage(String filePath) {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"     * stores the tasks in the TaskList object into a file."},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"     * tasks will be stored in a specific string format,"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"     * each task occupying one line."},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * @param list TaskList containing all the tasks of the user"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     * @throws IOException if filepath is wrong"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    void store(TaskList list) throws IOException {"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e tasks \u003d list.getList();"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        for (Task task : tasks) {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"            String s \u003d \"\";"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"            if (task.type.equals(\"T\")) {"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone ? \"T\" + \" , \" + \"1\" + \" , \" + task.description"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"                        : \"T\" + \" , \" + \"0\" + \" , \" + task.description;"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"            } else if (task.type.equals(\"E\")) {"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"                Event myTask \u003d (Event) task;"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"                        ? \"E\" + \" , \" + \"1\" + \" , \" + task.description + \" , \" + myTask.date + \" , \" + myTask.duration"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"                        : \"E\" + \" , \" + \"0\" + \" , \" + task.description + \" , \" + myTask.date + \" , \" + myTask.duration;"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"            } else if (task.type.equals(\"D\")) {"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"                Deadline myTask \u003d (Deadline) task;"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"                s \u003d task.isDone ? \"D\" + \" , \" + \"1\" + \" , \" + task.description + \" , \" + myTask.by"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"                        : \"D\" + \" , \" + \"0\" + \" , \" + task.description + \" , \" + myTask.by;"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"            fw.write(s + System.lineSeparator());"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"        fw.close();"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"     * loads the tasks stored in the file into a ArrayList of Tasks."},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"     * if file is empty, empty list is returned"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"     * @return ArrayList of Tasks given by the user previously"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"     * @throws IOException if the file is misread or file cannot be found"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"    ArrayList\u003cTask\u003e load() throws IOException {"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"        FileReader fr \u003d new FileReader(file);"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"        BufferedReader br \u003d new BufferedReader(fr);"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"        String task \u003d br.readLine();"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"        while (task !\u003d null) {"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"            Task taskObject \u003d null;"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"            String[] taskInfo \u003d task.split(\" , \");"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"            if (taskInfo[0].equals(\"T\")) {"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new ToDo(taskInfo[2], \"T\");"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ?  true :  false;"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"            } else if (taskInfo[0].equals(\"E\")) {"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(taskInfo[3]);"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new Event(taskInfo[2], date, taskInfo[4], \"E\");"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ?  true :  false;"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"            } else if (taskInfo[0].equals(\"D\")) {"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(taskInfo[3]);"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"                taskObject \u003d new Deadline(taskInfo[2], date, \"D\");"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"                taskObject.isDone \u003d taskInfo[1].equals(\"1\") ?  true :  false;"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"            list.add(taskObject);"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"            task \u003d br.readLine();"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"        return list;"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":79}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    protected String type;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    public Task(String description, String type) {"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"        this.description \u003d description;"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.isDone \u003d false;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        this.type \u003d type;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    void completed() {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        this.isDone \u003d true;"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"     * converts the task object into a string"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * @return string containing information about the task object"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        return this.isDone ? \"[X] \" + description : \"[ ] \" + description;"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":25}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class TaskList {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    private ArrayList\u003cTask\u003e taskList;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    private int listLength;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        this.taskList \u003d taskList;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        this.listLength \u003d taskList.size();"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    public TaskList() {"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        this.listLength \u003d 0;"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"     * creates a Task object and adds it to the TaskList object"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"     * @param info String array containing details of the user input"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the user input is not specified properly"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"    void add(String[] info) throws DukeException {"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"        int length \u003d info.length;"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d null;"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"todo\")) {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"            if (length \u003d\u003d 1) {"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty\");"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"            StringBuffer sb \u003d new StringBuffer();"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"            for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"                sb.append(info[i]);"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"                if (i !\u003d info.length - 1) {"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"                    sb.append(\" \");"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"            task \u003d new ToDo(sb.toString(), \"T\");"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"event\") || info[0].equals(\"deadline\")) {"},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"            if (length \u003d\u003d 1) {"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"                if (info[0].equals(\"event\")) {"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"                    throw new DukeException(\"OOPS! Specifics are needed for this event\");"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"                } else {"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"                    throw new DukeException(\"OOPS! Specifics are needed for this deadline\");"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"            StringBuffer description \u003d new StringBuffer();"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"            StringBuffer dateAndTime \u003d new StringBuffer();"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"            boolean isDescriptionDone \u003d false;"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"            for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"                if (info[i].equals(\"/at\") || info[i].equals(\"/by\")) {"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"                    isDescriptionDone \u003d true;"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"                    i++;"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"                if (isDescriptionDone) {"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"                    dateAndTime.append(info[i]);"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"                    if (i !\u003d info.length - 1) {"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"                        dateAndTime.append(\" \");"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"                    }"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"                } else {"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"                    description.append(info[i]);"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"                    if (i !\u003d info.length - 1) {"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"                        description.append(\" \");"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"                    }"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"            if (info[0].equals(\"event\")) {"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"                String[] details \u003d dateAndTime.toString().split(\" \");"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(details[0]);"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"                task \u003d new Event(description.toString(), date, details[1], \"E\");"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"            } else if (info[0].equals(\"deadline\")) {"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(dateAndTime.toString());"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"                task \u003d new Deadline(description.toString(), date, \"D\");"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        taskList.add(task);"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"        listLength++;"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"     * removes a task from the TaskList. The task is determined by the user input"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"     * found in the string array."},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"     * @param info String array containing user input"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"     * @return Task that has been removed"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the task number provided is less than 0 or more than the number of tasks in the TaskList"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":"    Task delete(String[] info) throws DukeException {"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"        int taskIndex \u003d Integer.parseInt(info[1]) - 1;"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"        if (taskIndex \u003e listLength || taskIndex \u003c 0) {"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS!!! There is no task in that line to delete\");"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":95,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d taskList.remove(taskIndex);"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"        listLength--;"},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"        return task;"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":100,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":"     * changes the state of the task to completed. The task is determined by the user input"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"     * found in the string array."},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"     * @param info String array containing user input"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"     * @return Task that has been completed"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"     * @throws DukeException if the task number provided is less than 0 or more than the number of tasks in the TaskList"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"    Task done(String[] info) throws DukeException {"},{"lineNumber":110,"author":{"gitId":"kumsssss"},"content":"        if (info.length \u003d\u003d 1) {"},{"lineNumber":111,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! Task completed is not specified\");"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"kumsssss"},"content":"        if (Integer.parseInt(info[1]) \u003e listLength || Integer.parseInt(info[1]) \u003c\u003d 0) {"},{"lineNumber":114,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! There is no such specified task\");"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":116,"author":{"gitId":"kumsssss"},"content":"        Task tobeDone \u003d taskList.get(Integer.parseInt(info[1]) - 1);"},{"lineNumber":117,"author":{"gitId":"kumsssss"},"content":"        tobeDone.completed();"},{"lineNumber":118,"author":{"gitId":"kumsssss"},"content":"        return tobeDone;"},{"lineNumber":119,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":120,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":121,"author":{"gitId":"kumsssss"},"content":"    TaskList find(String keyword) throws DukeException {"},{"lineNumber":122,"author":{"gitId":"kumsssss"},"content":"        if (keyword.length() \u003d\u003d 0) {"},{"lineNumber":123,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! No keyword is given!\");"},{"lineNumber":124,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"kumsssss"},"content":"        String keywordLowerCased \u003d keyword.toLowerCase();"},{"lineNumber":126,"author":{"gitId":"kumsssss"},"content":"        TaskList filteredList \u003d new TaskList();"},{"lineNumber":127,"author":{"gitId":"kumsssss"},"content":"        for (Task task : taskList) {"},{"lineNumber":128,"author":{"gitId":"kumsssss"},"content":"            String description \u003d task.description.toLowerCase();"},{"lineNumber":129,"author":{"gitId":"kumsssss"},"content":"            if (description.contains(keywordLowerCased)) {"},{"lineNumber":130,"author":{"gitId":"kumsssss"},"content":"                filteredList.taskList.add(task);"},{"lineNumber":131,"author":{"gitId":"kumsssss"},"content":"                filteredList.listLength++;"},{"lineNumber":132,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":133,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":134,"author":{"gitId":"kumsssss"},"content":"        return filteredList;"},{"lineNumber":135,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":136,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":137,"author":{"gitId":"kumsssss"},"content":"    public ArrayList\u003cTask\u003e getList() {"},{"lineNumber":138,"author":{"gitId":"kumsssss"},"content":"        return taskList;"},{"lineNumber":139,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":141,"author":{"gitId":"kumsssss"},"content":"    public int getListLength() {"},{"lineNumber":142,"author":{"gitId":"kumsssss"},"content":"        return listLength;"},{"lineNumber":143,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":145,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":145}},{"path":"src/main/java/TaskManager.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"public class TaskManager {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"    int listLength;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    ArrayList\u003cTask\u003e list;"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    String path;"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    public TaskManager(ArrayList\u003cTask\u003e list, int listLength, String path) {"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        this.list \u003d list;"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        this.listLength \u003d listLength;"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        this.path \u003d path;"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    //checks the type of instruction given based on the first word in the user input"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    //throws exception if insufficient/wrong instruction given"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"    //increments listLength if a valid task and decrements if a delete instruction"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    //adds a task to the list if task given and removes if a delete instruction"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":"    //prints all tasks if input is list"},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"    //completes a certain task if input is done"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"    void done(String[] info) throws DukeException {"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"        if (info.length \u003d\u003d 1) {"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! Task completed is not specified\");"},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        if (Integer.parseInt(info[1]) \u003e listLength || Integer.parseInt(info[1]) \u003c\u003d 0) {"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS! There is no such specified task\");"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"        Task tobeDone \u003d list.get(Integer.parseInt(info[1]) - 1);"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        tobeDone.completed();"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"    \" + tobeDone);"},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"    void printList() {"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 0;  i \u003c listLength; i++) {"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"            System.out.println( (i+1) + \".\"  + list.get(i));"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    void delete(String[] info) throws DukeException {"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"        int taskIndex \u003d Integer.parseInt(info[1]) - 1;"},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"        if (taskIndex \u003e listLength || taskIndex \u003c 0) {"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"OOPS!!! There is no task in that line to delete\");"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\" Noted. I\u0027ve removed this task:\");"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        System.out.println(list.remove(taskIndex));"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        listLength--;"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Now you have \" + listLength + \" tasks in the list.\");"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"    void add(String[] info) throws DukeException {"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":"        int length \u003d info.length;"},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d null;"},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"todo\")) {"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"            if (length \u003d\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty\");"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"            StringBuffer sb \u003d new StringBuffer();"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"            for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"                sb.append(info[i]);"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"                if (i !\u003d info.length - 1) {"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"                    sb.append(\" \");"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"            task \u003d new ToDo(sb.toString(), \"T\");"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"event\") || info[0].equals(\"deadline\")) {"},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":"            if (length \u003d\u003d 1) {"},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"                if (info[0].equals(\"event\")) {"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"                    throw new DukeException(\"OOPS! Specifics are needed for this event\");"},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"                } else {"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"                    throw new DukeException(\"OOPS! Specifics are needed for this deadline\");"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"            StringBuffer description \u003d new StringBuffer();"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"            StringBuffer dateAndTime \u003d new StringBuffer();"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"            boolean isDescriptionDone \u003d false;"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"            for (int i \u003d 1; i \u003c info.length; i++) {"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"                if (info[i].equals(\"/at\") || info[i].equals(\"/by\")) {"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":"                    isDescriptionDone \u003d true;"},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":"                    i++;"},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"                if (isDescriptionDone) {"},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"                    dateAndTime.append(info[i]);"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"                    if (i !\u003d info.length - 1) {"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"                        dateAndTime.append(\" \");"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"                    }"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"                } else {"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"                    description.append(info[i]);"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"                    if (i !\u003d info.length - 1) {"},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":"                        description.append(\" \");"},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"                    }"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"                }"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"            if (info[0].equals(\"event\")) {"},{"lineNumber":95,"author":{"gitId":"kumsssss"},"content":"                String[] details \u003d dateAndTime.toString().split(\" \");"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(details[0]);"},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"                task \u003d new Event(description.toString(), date, details[1], \"E\");"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"            } else if (info[0].equals(\"deadline\")) {"},{"lineNumber":99,"author":{"gitId":"kumsssss"},"content":"                Date date \u003d new Date(dateAndTime.toString());"},{"lineNumber":100,"author":{"gitId":"kumsssss"},"content":"                task \u003d new Deadline(description.toString(), date, \"D\");"},{"lineNumber":101,"author":{"gitId":"kumsssss"},"content":"            }"},{"lineNumber":102,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":103,"author":{"gitId":"kumsssss"},"content":"        list.add(task);"},{"lineNumber":104,"author":{"gitId":"kumsssss"},"content":"        listLength++;"},{"lineNumber":105,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":106,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"    \" + task);"},{"lineNumber":107,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Now you have \" + (listLength) + \" tasks in the list.\");"},{"lineNumber":108,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"kumsssss"},"content":"    void manage(String[] info) throws DukeException {"},{"lineNumber":110,"author":{"gitId":"kumsssss"},"content":"        if (info[0].equals(\"done\")) {"},{"lineNumber":111,"author":{"gitId":"kumsssss"},"content":"            done(info);"},{"lineNumber":112,"author":{"gitId":"kumsssss"},"content":"        }  else if (info[0].equals(\"list\")) {"},{"lineNumber":113,"author":{"gitId":"kumsssss"},"content":"            printList();"},{"lineNumber":114,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"delete\")) {"},{"lineNumber":115,"author":{"gitId":"kumsssss"},"content":"            delete(info);"},{"lineNumber":116,"author":{"gitId":"kumsssss"},"content":"        }else if (info[0].equals(\"event\")) {"},{"lineNumber":117,"author":{"gitId":"kumsssss"},"content":"            add(info);"},{"lineNumber":118,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"todo\")) {"},{"lineNumber":119,"author":{"gitId":"kumsssss"},"content":"            add(info);"},{"lineNumber":120,"author":{"gitId":"kumsssss"},"content":"        } else if (info[0].equals(\"deadline\")) {"},{"lineNumber":121,"author":{"gitId":"kumsssss"},"content":"            add(info);"},{"lineNumber":122,"author":{"gitId":"kumsssss"},"content":"        } else {"},{"lineNumber":123,"author":{"gitId":"kumsssss"},"content":"            throw new DukeException(\"Sorry but I don\u0027t understand what that means! :-(\");"},{"lineNumber":124,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":125,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":126,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":126}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"public class ToDo extends Task {"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"    public ToDo(String description, String type) {"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"        super(description, type);"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"     * converts the object to a string"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"     * @return String containing details about the Task"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":16}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import java.io.BufferedReader;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import java.io.InputStreamReader;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"public class Ui {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"    BufferedReader reader;"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"    public Ui() {"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        this.reader \u003d new BufferedReader(new InputStreamReader(System.in));"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"    void intro() {"},{"lineNumber":15,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Hey there! This is Kums\");"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"How can i help?\");"},{"lineNumber":17,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":19,"author":{"gitId":"kumsssss"},"content":"    void showLine() {"},{"lineNumber":20,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"---------------------------------------\");"},{"lineNumber":21,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":23,"author":{"gitId":"kumsssss"},"content":"    void showError(String message) {"},{"lineNumber":24,"author":{"gitId":"kumsssss"},"content":"        System.out.println(message);"},{"lineNumber":25,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":27,"author":{"gitId":"kumsssss"},"content":"    void bye() {"},{"lineNumber":28,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":29,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":31,"author":{"gitId":"kumsssss"},"content":"    String readCommand() throws IOException {"},{"lineNumber":32,"author":{"gitId":"kumsssss"},"content":"        return this.reader.readLine();"},{"lineNumber":33,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":35,"author":{"gitId":"kumsssss"},"content":"    void showLoadingError() {"},{"lineNumber":36,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"OOPS! The file hasn\u0027t been created yet\");"},{"lineNumber":37,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":39,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":40,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"kumsssss"},"content":"     * Prints lines to show the user what task has been added."},{"lineNumber":42,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":43,"author":{"gitId":"kumsssss"},"content":"     * @param tasks TaskList of all the tasks"},{"lineNumber":44,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"kumsssss"},"content":"    void addedTask(TaskList tasks) {"},{"lineNumber":46,"author":{"gitId":"kumsssss"},"content":"        int numberOfTasks \u003d tasks.getListLength();"},{"lineNumber":47,"author":{"gitId":"kumsssss"},"content":"        Task task \u003d tasks.getList().get(numberOfTasks - 1);"},{"lineNumber":48,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");"},{"lineNumber":49,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"    \" + task);"},{"lineNumber":50,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Now you have \" + (numberOfTasks) + \" tasks in the list.\");"},{"lineNumber":51,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":53,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":54,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"kumsssss"},"content":"     * prints all the task in the list"},{"lineNumber":56,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":57,"author":{"gitId":"kumsssss"},"content":"     * @param tasks TaskList containing all the user\u0027s tasks"},{"lineNumber":58,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"kumsssss"},"content":"    void printList(TaskList tasks) {"},{"lineNumber":60,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e list \u003d tasks.getList();"},{"lineNumber":61,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Here are the tasks in your list:\");"},{"lineNumber":62,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 0;  i \u003c list.size(); i++) {"},{"lineNumber":63,"author":{"gitId":"kumsssss"},"content":"            System.out.println( (i+1) + \".\"  + list.get(i));"},{"lineNumber":64,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":67,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":68,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"kumsssss"},"content":"     * notifies the user that a specific task has been removed from the TaskList."},{"lineNumber":70,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"kumsssss"},"content":"     * @param task Task that has been removed"},{"lineNumber":72,"author":{"gitId":"kumsssss"},"content":"     * @param listLength number of tasks left in the list"},{"lineNumber":73,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":74,"author":{"gitId":"kumsssss"},"content":"    void deletedTask(Task task, int listLength) {"},{"lineNumber":75,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\" Noted. I\u0027ve removed this task:\");"},{"lineNumber":76,"author":{"gitId":"kumsssss"},"content":"        System.out.println(task);"},{"lineNumber":77,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Now you have \" + listLength + \" tasks in the list.\");"},{"lineNumber":78,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":80,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":81,"author":{"gitId":"kumsssss"},"content":"    /**"},{"lineNumber":82,"author":{"gitId":"kumsssss"},"content":"     * notifies the user that a specific task has been completed."},{"lineNumber":83,"author":{"gitId":"kumsssss"},"content":"     *"},{"lineNumber":84,"author":{"gitId":"kumsssss"},"content":"     * @param task Task that has just been completed"},{"lineNumber":85,"author":{"gitId":"kumsssss"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"kumsssss"},"content":"    void didTask(Task task) {"},{"lineNumber":87,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");"},{"lineNumber":88,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"    \" + task);"},{"lineNumber":89,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":91,"author":{"gitId":"kumsssss"},"content":"    void printFilteredList(TaskList tasks) {"},{"lineNumber":92,"author":{"gitId":"kumsssss"},"content":"        ArrayList\u003cTask\u003e list \u003d tasks.getList();"},{"lineNumber":93,"author":{"gitId":"kumsssss"},"content":"        int listLength \u003d tasks.getListLength();"},{"lineNumber":94,"author":{"gitId":"kumsssss"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");"},{"lineNumber":95,"author":{"gitId":"kumsssss"},"content":"        for (int i \u003d 0;  i \u003c listLength; i++) {"},{"lineNumber":96,"author":{"gitId":"kumsssss"},"content":"            System.out.println( (i+1) + \".\"  + list.get(i));"},{"lineNumber":97,"author":{"gitId":"kumsssss"},"content":"        }"},{"lineNumber":98,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":99}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public void testCorrectCommand() throws DukeException {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        Command c \u003d Parser.parse(\"bye\");"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        Command c2 \u003d Parser.parse(\"list\");"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        assertEquals(c.isBye(), true);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        assertEquals(c2.isBye(), false);"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":13}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class TaskListTest {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public void testListLength() {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        TaskList tasks \u003d new TaskList();"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        int length \u003d tasks.getListLength();"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        assertEquals(length, 0);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":12}},{"path":"src/test/java/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":""},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"public class ToDoTest {"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"kumsssss"},"content":"    public void testToDoDescription() {"},{"lineNumber":8,"author":{"gitId":"kumsssss"},"content":"        ToDo td \u003d new ToDo(\"run\", \"T\");"},{"lineNumber":9,"author":{"gitId":"kumsssss"},"content":"        assertEquals(td.description, \"run\");"},{"lineNumber":10,"author":{"gitId":"kumsssss"},"content":"        assertEquals(td.isDone, false);"},{"lineNumber":11,"author":{"gitId":"kumsssss"},"content":"        td.completed();"},{"lineNumber":12,"author":{"gitId":"kumsssss"},"content":"        assertEquals(td.isDone, true);"},{"lineNumber":13,"author":{"gitId":"kumsssss"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"kumsssss"},"content":"}"}],"authorContributionMap":{"kumsssss":14}},{"path":"text-ui-test/data.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"T , 1 , 2101"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"E , 1 , mahjong  , 2021-01-29 , 2-5pm"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"T , 0 , 2101 videos"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"D , 0 , run 400m  , 2021-01-28"}],"authorContributionMap":{"kumsssss":4}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kumsssss"},"content":"todo 2101"},{"lineNumber":2,"author":{"gitId":"kumsssss"},"content":"deadline 2103T /by Wed"},{"lineNumber":3,"author":{"gitId":"kumsssss"},"content":"event Party at Louis\u0027 house /at Sunday 9-11pm"},{"lineNumber":4,"author":{"gitId":"kumsssss"},"content":"delete 2"},{"lineNumber":5,"author":{"gitId":"kumsssss"},"content":"list"},{"lineNumber":6,"author":{"gitId":"kumsssss"},"content":"bye"}],"authorContributionMap":{"kumsssss":6}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"kumsssss"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/Duke.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"kumsssss":1,"-":37}}]
