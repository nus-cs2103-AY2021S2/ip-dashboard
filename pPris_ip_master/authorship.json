[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class Deadline extends Task {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    private String deadline;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    public Deadline(String desc, String deadline) {"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"        this.deadline \u003d deadline;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        return \"[D][\" + getStatusIcon() + \"] \" + description"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"                + \" (by: \" + deadline + \")\";"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":14}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.util.Scanner;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import java.util.ArrayList;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    // use collection for holding all tasks"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    private static final ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    // formatting for print messages"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    private static final String lines \u003d \"    ______________________________________________\";"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    private static final String indent \u003d \"      \";"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private static final String taskIndent \u003d \"  \"; // just an extra indent for listing tasks"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"     * Mark specified task done"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"     * @param i off-by-one index of a task in array list"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    private static void markDone(int i) throws InvalidArgumentException {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        if (i \u003c 1 || i \u003e taskList.size()) {"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(invalidNumErrMsg(i, 1, taskList.size()));"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        taskList.get(i - 1).markAsDone();"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        print(new String[]{\"Good work! I\u0027ve marked this task done:\","},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"                taskIndent + taskList.get(i - 1)});"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    private static void printTaskList() {"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        System.out.println(indent + \"Your tasks:\");"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":""},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"            System.out.print(taskIndent);"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"            System.out.println(indent + (i + 1) + \".\" + taskList.get(i));"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        System.out.println();"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        System.out.println(indent + \"You have \" + taskList.size() + \" tasks. \");"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":""},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"    // helper method to format chat bot responses"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    // prints all strings in messages array in a separate indented line"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    // maybe can think of splitting strings that are too long into different lines"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    private static void print(String[] messages) {"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":""},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        for (int i \u003d 0; i \u003c messages.length; i++) {"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"            System.out.println(indent + messages[i]);"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":""},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":""},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"    // print formatted single-line message"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"    private static void print(String message) {"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":""},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"        System.out.println(indent + message);"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":""},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":""},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"    private static void addTask(Task t) {"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"        taskList.add(t);"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":""},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"        String[] messages \u003d {"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"                \"Success. I\u0027ve added this task:\","},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"                taskIndent + t // standardize this indent,"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"        };"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":""},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"        print(messages);"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":""},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"    private static String invalidNumErrMsg(int i, int min, int max) {"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"        String errMsg \u003d \"Invalid list index given: \" + i"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"                + \". Number needs to be between \" + min + \" and \" + max + \" (inclusive). \";"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"        return errMsg;"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":""},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"    private static void deleteTask(int i) throws InvalidArgumentException {"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"        if (i \u003c 1 || i \u003e taskList.size()) {"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(invalidNumErrMsg(i, 1, taskList.size()));"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":""},{"lineNumber":89,"author":{"gitId":"pPris"},"content":"        print(new String[]{\"Got you. I\u0027ve deleted this task:\","},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"                taskIndent + taskList.get(i - 1)});"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":""},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"        taskList.remove(i - 1);"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"pPris"},"content":""},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"    // for every new command to support, need to add to cases here and if statements in parse method"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"    // could simplify it somehow"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"    // todo definitely need to simplify, too much duplication?"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"    // but how else do you want to detect the first word if not for the space?"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"    private static void handleOnlyFirstArgGiven(String command)"},{"lineNumber":100,"author":{"gitId":"pPris"},"content":"            throws MissingArgumentException, UnsupportedCommandException {"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"        String errMsg;"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":""},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"        switch (command) {"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"        case \"todo\":"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include a description for your todo.\";"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"        case \"event\":"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include a description and an /at argument for your event.\";"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"        case \"deadline\":"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include a description and a /by argument for your deadline.\";"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"        case \"done\":"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include the list item number of the task to mark done.\";"},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"        case \"delete\":"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include the list item number of the task to delete.\";"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":120,"author":{"gitId":"pPris"},"content":"            throw new UnsupportedCommandException();"},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":""},{"lineNumber":123,"author":{"gitId":"pPris"},"content":"        throw new MissingArgumentException(errMsg);"},{"lineNumber":124,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":""},{"lineNumber":126,"author":{"gitId":"pPris"},"content":""},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"    // for missing second/third arguments"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"    // replace String taskType with Enum later"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"    private static String determineErrMsg(String taskType, int positionMissing) {"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"        String errMsg \u003d \"\";"},{"lineNumber":131,"author":{"gitId":"pPris"},"content":""},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"        switch (taskType) {"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"        case \"todo\":"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Missing argument \" + positionMissing + \". Please include a todo description.\";"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"        case \"event\":"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"            if (positionMissing \u003d\u003d 2) {"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing argument \" + positionMissing + \". Please include an event description.\";"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"            } else if (positionMissing \u003d\u003d 3) {"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing an /at argument. Please include an event timing.\";"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":142,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":143,"author":{"gitId":"pPris"},"content":"        case \"deadline\":"},{"lineNumber":144,"author":{"gitId":"pPris"},"content":"            if (positionMissing \u003d\u003d 2) {"},{"lineNumber":145,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing argument \" + positionMissing + \". Please include a description of the deadline.\";"},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"            } else if (positionMissing \u003d\u003d 3) {"},{"lineNumber":147,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing a /by argument. Please include a deadline.\";"},{"lineNumber":148,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":149,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":150,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":151,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Missing arguments for this task type.\";"},{"lineNumber":152,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":153,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":154,"author":{"gitId":"pPris"},"content":"        return errMsg;"},{"lineNumber":155,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"pPris"},"content":""},{"lineNumber":157,"author":{"gitId":"pPris"},"content":"    private static void parseNextArgs(String firstWord, String userInput, int firstSpaceIndex)"},{"lineNumber":158,"author":{"gitId":"pPris"},"content":"            throws MissingArgumentException, UnsupportedCommandException, InvalidArgumentException {"},{"lineNumber":159,"author":{"gitId":"pPris"},"content":"        // some variables declared upfront"},{"lineNumber":160,"author":{"gitId":"pPris"},"content":"        // todo declare these variables in if blocks below for readability"},{"lineNumber":161,"author":{"gitId":"pPris"},"content":"        String desc;"},{"lineNumber":162,"author":{"gitId":"pPris"},"content":"        String thirdArg;"},{"lineNumber":163,"author":{"gitId":"pPris"},"content":"        int secondCmdIndex \u003d 0;"},{"lineNumber":164,"author":{"gitId":"pPris"},"content":""},{"lineNumber":165,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":166,"author":{"gitId":"pPris"},"content":"            if (firstWord.equals(\"done\")) {"},{"lineNumber":167,"author":{"gitId":"pPris"},"content":""},{"lineNumber":168,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1).trim();"},{"lineNumber":169,"author":{"gitId":"pPris"},"content":"                int secondArg \u003d Integer.parseInt(desc);"},{"lineNumber":170,"author":{"gitId":"pPris"},"content":""},{"lineNumber":171,"author":{"gitId":"pPris"},"content":"                markDone(secondArg);"},{"lineNumber":172,"author":{"gitId":"pPris"},"content":""},{"lineNumber":173,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"todo\")) {"},{"lineNumber":174,"author":{"gitId":"pPris"},"content":""},{"lineNumber":175,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1).trim();"},{"lineNumber":176,"author":{"gitId":"pPris"},"content":"                addTask(new Todo(desc));"},{"lineNumber":177,"author":{"gitId":"pPris"},"content":""},{"lineNumber":178,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"deadline\")) {"},{"lineNumber":179,"author":{"gitId":"pPris"},"content":""},{"lineNumber":180,"author":{"gitId":"pPris"},"content":"                secondCmdIndex \u003d userInput.indexOf(\"/by\"); // assuming valid"},{"lineNumber":181,"author":{"gitId":"pPris"},"content":"                int byIndex \u003d secondCmdIndex; // for readability"},{"lineNumber":182,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1, byIndex - 1).trim();"},{"lineNumber":183,"author":{"gitId":"pPris"},"content":"                thirdArg \u003d userInput.substring(byIndex + 3).trim();"},{"lineNumber":184,"author":{"gitId":"pPris"},"content":""},{"lineNumber":185,"author":{"gitId":"pPris"},"content":"                addTask(new Deadline(desc, thirdArg));"},{"lineNumber":186,"author":{"gitId":"pPris"},"content":""},{"lineNumber":187,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"event\")) {"},{"lineNumber":188,"author":{"gitId":"pPris"},"content":""},{"lineNumber":189,"author":{"gitId":"pPris"},"content":"                secondCmdIndex \u003d userInput.indexOf(\"/at\"); // assuming valid"},{"lineNumber":190,"author":{"gitId":"pPris"},"content":"                int atIndex \u003d secondCmdIndex; // for readability"},{"lineNumber":191,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1, atIndex - 1).trim();"},{"lineNumber":192,"author":{"gitId":"pPris"},"content":"                thirdArg \u003d userInput.substring(atIndex + 3).trim();"},{"lineNumber":193,"author":{"gitId":"pPris"},"content":""},{"lineNumber":194,"author":{"gitId":"pPris"},"content":"                addTask(new Event(desc, thirdArg));"},{"lineNumber":195,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"delete\")) {"},{"lineNumber":196,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1).trim();"},{"lineNumber":197,"author":{"gitId":"pPris"},"content":"                int secondArg \u003d Integer.parseInt(desc);"},{"lineNumber":198,"author":{"gitId":"pPris"},"content":""},{"lineNumber":199,"author":{"gitId":"pPris"},"content":"                deleteTask(secondArg);"},{"lineNumber":200,"author":{"gitId":"pPris"},"content":"            } else {"},{"lineNumber":201,"author":{"gitId":"pPris"},"content":"                throw new UnsupportedCommandException();"},{"lineNumber":202,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":203,"author":{"gitId":"pPris"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":204,"author":{"gitId":"pPris"},"content":"            if (secondCmdIndex \u003d\u003d -1) {"},{"lineNumber":205,"author":{"gitId":"pPris"},"content":"                throw new MissingArgumentException(determineErrMsg(firstWord, 3), e);"},{"lineNumber":206,"author":{"gitId":"pPris"},"content":"            } else if (firstSpaceIndex + 1 \u003e secondCmdIndex - 1) {"},{"lineNumber":207,"author":{"gitId":"pPris"},"content":"                throw new MissingArgumentException(determineErrMsg(firstWord, 2), e);"},{"lineNumber":208,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":209,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":210,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":211,"author":{"gitId":"pPris"},"content":""},{"lineNumber":212,"author":{"gitId":"pPris"},"content":"    // this check could be done using an enum property?"},{"lineNumber":213,"author":{"gitId":"pPris"},"content":"    private static void checkIfTooManyArgs(String command) throws InvalidArgumentException {"},{"lineNumber":214,"author":{"gitId":"pPris"},"content":"        switch (command) {"},{"lineNumber":215,"author":{"gitId":"pPris"},"content":"        case \"bye\":"},{"lineNumber":216,"author":{"gitId":"pPris"},"content":"        case \"list\":"},{"lineNumber":217,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(\"Too many commands provided. Did you mean \u0027\" + command + \"\u0027?\");"},{"lineNumber":218,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":219,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":220,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":221,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"pPris"},"content":""},{"lineNumber":223,"author":{"gitId":"pPris"},"content":"    private static void checkInvalidOnEmptyList(String command) throws InvalidArgumentException {"},{"lineNumber":224,"author":{"gitId":"pPris"},"content":"        if (taskList.isEmpty() \u0026\u0026 (command.equals(\"done\") || command.equals(\"delete\"))) {"},{"lineNumber":225,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(\"This command cannot be done on an empty task list.\");"},{"lineNumber":226,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":228,"author":{"gitId":"pPris"},"content":""},{"lineNumber":229,"author":{"gitId":"pPris"},"content":""},{"lineNumber":230,"author":{"gitId":"pPris"},"content":"    private static boolean checkAndHandleIfOneArgIsValid(String command)"},{"lineNumber":231,"author":{"gitId":"pPris"},"content":"            throws MissingArgumentException, UnsupportedCommandException {"},{"lineNumber":232,"author":{"gitId":"pPris"},"content":"        // check if only one argument needed"},{"lineNumber":233,"author":{"gitId":"pPris"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":234,"author":{"gitId":"pPris"},"content":"            printExitMsg();"},{"lineNumber":235,"author":{"gitId":"pPris"},"content":"            return false;"},{"lineNumber":236,"author":{"gitId":"pPris"},"content":"        } else if (command.equals(\"list\")) {"},{"lineNumber":237,"author":{"gitId":"pPris"},"content":"            printTaskList();"},{"lineNumber":238,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":239,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":240,"author":{"gitId":"pPris"},"content":""},{"lineNumber":241,"author":{"gitId":"pPris"},"content":"        // print correct error message when insufficient arguments"},{"lineNumber":242,"author":{"gitId":"pPris"},"content":"        handleOnlyFirstArgGiven(command); // try catch block not necessary, because of throws"},{"lineNumber":243,"author":{"gitId":"pPris"},"content":"        return true;"},{"lineNumber":244,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":245,"author":{"gitId":"pPris"},"content":""},{"lineNumber":246,"author":{"gitId":"pPris"},"content":""},{"lineNumber":247,"author":{"gitId":"pPris"},"content":"    // format your exception printing here"},{"lineNumber":248,"author":{"gitId":"pPris"},"content":"    private static void printException(String errMsg) {"},{"lineNumber":249,"author":{"gitId":"pPris"},"content":"        print(new String[]{\"Oops, Kiwi couldn\u0027t process that.\", taskIndent + errMsg});"},{"lineNumber":250,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"pPris"},"content":""},{"lineNumber":252,"author":{"gitId":"pPris"},"content":"    // parse done, todos, deadline, event, delete commands"},{"lineNumber":253,"author":{"gitId":"pPris"},"content":"    // make enums for supported commands?"},{"lineNumber":254,"author":{"gitId":"pPris"},"content":"    // return whether to keep scanner open"},{"lineNumber":255,"author":{"gitId":"pPris"},"content":"    private static boolean parseInputLine(String userInput)  {"},{"lineNumber":256,"author":{"gitId":"pPris"},"content":""},{"lineNumber":257,"author":{"gitId":"pPris"},"content":"        // SETTING UP THE VARIABLES NEEDED FOR ERROR CHECKING / PARSING"},{"lineNumber":258,"author":{"gitId":"pPris"},"content":"        int firstSpaceIndex \u003d userInput.indexOf(\" \"); // todo can consider using split(\" \", 2)?"},{"lineNumber":259,"author":{"gitId":"pPris"},"content":"        String firstWord;"},{"lineNumber":260,"author":{"gitId":"pPris"},"content":""},{"lineNumber":261,"author":{"gitId":"pPris"},"content":"        if (firstSpaceIndex \u003d\u003d -1) {"},{"lineNumber":262,"author":{"gitId":"pPris"},"content":"            firstWord \u003d userInput.trim();"},{"lineNumber":263,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":264,"author":{"gitId":"pPris"},"content":"            firstWord \u003d userInput.substring(0, firstSpaceIndex);"},{"lineNumber":265,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":266,"author":{"gitId":"pPris"},"content":""},{"lineNumber":267,"author":{"gitId":"pPris"},"content":""},{"lineNumber":268,"author":{"gitId":"pPris"},"content":"        // ERROR CHECKING AND PROCESSING DIFFERENT COMMANDS"},{"lineNumber":269,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":270,"author":{"gitId":"pPris"},"content":"            // check for commands that are invalid on an empty task list"},{"lineNumber":271,"author":{"gitId":"pPris"},"content":"            checkInvalidOnEmptyList(firstWord);"},{"lineNumber":272,"author":{"gitId":"pPris"},"content":""},{"lineNumber":273,"author":{"gitId":"pPris"},"content":"            // if there\u0027s only one arg, this function handles whether the one arg is valid"},{"lineNumber":274,"author":{"gitId":"pPris"},"content":"            // and responds accordingly, or whether it\u0027s invalid and prints out the correct"},{"lineNumber":275,"author":{"gitId":"pPris"},"content":"            // error messages"},{"lineNumber":276,"author":{"gitId":"pPris"},"content":"            if (firstSpaceIndex \u003d\u003d -1) {"},{"lineNumber":277,"author":{"gitId":"pPris"},"content":"                return checkAndHandleIfOneArgIsValid(firstWord);"},{"lineNumber":278,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":279,"author":{"gitId":"pPris"},"content":""},{"lineNumber":280,"author":{"gitId":"pPris"},"content":"            // check if more than one arg provided for commands that require only one"},{"lineNumber":281,"author":{"gitId":"pPris"},"content":"            checkIfTooManyArgs(firstWord);"},{"lineNumber":282,"author":{"gitId":"pPris"},"content":""},{"lineNumber":283,"author":{"gitId":"pPris"},"content":"            // just enough args"},{"lineNumber":284,"author":{"gitId":"pPris"},"content":"            parseNextArgs(firstWord, userInput, firstSpaceIndex);"},{"lineNumber":285,"author":{"gitId":"pPris"},"content":""},{"lineNumber":286,"author":{"gitId":"pPris"},"content":"        } catch (UnsupportedCommandException | InvalidArgumentException | MissingArgumentException e) {"},{"lineNumber":287,"author":{"gitId":"pPris"},"content":"            // is it better to detect unsupported first command earlier?"},{"lineNumber":288,"author":{"gitId":"pPris"},"content":"            // currently being detected at the end of many if blocks"},{"lineNumber":289,"author":{"gitId":"pPris"},"content":"//            print(new String[]{e.getMessage()});"},{"lineNumber":290,"author":{"gitId":"pPris"},"content":"            printException(e.getMessage());"},{"lineNumber":291,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":292,"author":{"gitId":"pPris"},"content":"        } catch (Exception e) {"},{"lineNumber":293,"author":{"gitId":"pPris"},"content":"            String errMsg \u003d \"didn\u0027t expect this exception \" + e;"},{"lineNumber":294,"author":{"gitId":"pPris"},"content":"//            print(new String[]{errMsg});"},{"lineNumber":295,"author":{"gitId":"pPris"},"content":"            printException(errMsg);"},{"lineNumber":296,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":297,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":298,"author":{"gitId":"pPris"},"content":""},{"lineNumber":299,"author":{"gitId":"pPris"},"content":"        return true;"},{"lineNumber":300,"author":{"gitId":"pPris"},"content":"        // catch exceptions where substring end is wrong i.e. extra arguments not found?"},{"lineNumber":301,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":302,"author":{"gitId":"pPris"},"content":""},{"lineNumber":303,"author":{"gitId":"pPris"},"content":"    public static void printExitMsg() {"},{"lineNumber":304,"author":{"gitId":"pPris"},"content":"        print(\"Bye. See you again soon!\");"},{"lineNumber":305,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":306,"author":{"gitId":"pPris"},"content":""},{"lineNumber":307,"author":{"gitId":"pPris"},"content":"    public static void intro() {"},{"lineNumber":308,"author":{"gitId":"pPris"},"content":"        String logo \u003d \" ______\\n\""},{"lineNumber":309,"author":{"gitId":"pPris"},"content":"                        + \"/______\\\\ Kiwi\u0027s\\n\""},{"lineNumber":310,"author":{"gitId":"pPris"},"content":"                        + \"|______|     Inn\\n\""},{"lineNumber":311,"author":{"gitId":"pPris"},"content":"                        + \"####################\";"},{"lineNumber":312,"author":{"gitId":"pPris"},"content":""},{"lineNumber":313,"author":{"gitId":"pPris"},"content":"        // intro message"},{"lineNumber":314,"author":{"gitId":"pPris"},"content":"        System.out.println(logo);"},{"lineNumber":315,"author":{"gitId":"pPris"},"content":"        print(new String[]{\"Welcome, traveller. I\u0027m Kiwi.\", \"What would you like to do today?\"});"},{"lineNumber":316,"author":{"gitId":"pPris"},"content":""},{"lineNumber":317,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":318,"author":{"gitId":"pPris"},"content":""},{"lineNumber":319,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":320,"author":{"gitId":"pPris"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":321,"author":{"gitId":"pPris"},"content":""},{"lineNumber":322,"author":{"gitId":"pPris"},"content":"        intro();"},{"lineNumber":323,"author":{"gitId":"pPris"},"content":""},{"lineNumber":324,"author":{"gitId":"pPris"},"content":"        // variables to reuse"},{"lineNumber":325,"author":{"gitId":"pPris"},"content":"        String userInput;"},{"lineNumber":326,"author":{"gitId":"pPris"},"content":"        boolean remainOpen \u003d true;"},{"lineNumber":327,"author":{"gitId":"pPris"},"content":""},{"lineNumber":328,"author":{"gitId":"pPris"},"content":"        while (remainOpen) {"},{"lineNumber":329,"author":{"gitId":"pPris"},"content":"            userInput \u003d sc.nextLine().trim();"},{"lineNumber":330,"author":{"gitId":"pPris"},"content":"            remainOpen \u003d parseInputLine(userInput);"},{"lineNumber":331,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":332,"author":{"gitId":"pPris"},"content":""},{"lineNumber":333,"author":{"gitId":"pPris"},"content":"        sc.close();"},{"lineNumber":334,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":335,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":331,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class Event extends Task {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    private String eventTiming;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    public Event(String desc, String eventTiming) {"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"        this.eventTiming \u003d eventTiming;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"        return \"[E][\" + getStatusIcon() + \"] \" + description"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"                + \" (at: \" + eventTiming + \")\";"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":13}},{"path":"src/main/java/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class InvalidArgumentException extends Exception {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    // use this for done and delete"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    public InvalidArgumentException(String errMsg) {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"        super(errMsg);"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    // not sure how to throw exception from helper method instead of constructor"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    /*"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    public static InvalidArgumentException invalidNumber(int i, int min, int max) {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        String errMsg \u003d \"Invalid argument given: \" + i"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"                + \". Number needs to be between \" + min + \"and \" + max + \" (exclusive). \";"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        return new InvalidArgumentException(errMsg);"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"//    public InvalidArgumentException invalidNumber(int i, int min, int max) {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"//        super(\"Invalid argument given: \" + i + \". Number needs to be between \" + min + \"and \" + max + \" (exclusive). \");"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"//    }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":21}},{"path":"src/main/java/MissingArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class MissingArgumentException extends Exception {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    public MissingArgumentException(String errorMessage, Throwable err) {"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"        super(errorMessage, err);"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    public MissingArgumentException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":9}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public abstract class Task {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    public Task(String description) {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"        this.description \u003d description;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d false;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    public String getStatusIcon() {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        return (isDone ? \"/\" : \" \"); // todo check if custom symbols okay"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    // return type?"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    public void markAsDone() {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d true;"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":23}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class Todo extends Task {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    public Todo(String desc) {"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        return \"[T][\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":9}},{"path":"src/main/java/UnsupportedCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class UnsupportedCommandException extends Exception {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    public UnsupportedCommandException(String errorMessage, Throwable err) {"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"        super(errorMessage, err);"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    // todo - can print out the command that was inputted wrongly"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    public UnsupportedCommandException(String errorMessage) {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"        super(errorMessage);"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    public UnsupportedCommandException() {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        super(\"I don\u0027t recognise this command. Please try something else.\");"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""}],"authorContributionMap":{"pPris":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"todo tea"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"deadline coffee /by 4pm"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"deadline /by 4pm"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"deadline coffee"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"deadline"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"Deadline"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"event read books /at 4-6pm monday"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"event /at 4-6pm monday"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"event read books"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"event"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"done"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"blah"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"task 1"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"task 2 3"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"delete 0"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"delete 5"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"delete 19"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"bye"}],"authorContributionMap":{"pPris":31}},{"path":"text-ui-test/runtemptest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"REM THIS FILE IS CREATED FOR TEMPORARY TESTING PURPOSES WHILE DOING A LEVEL"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":")"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"java -classpath ..\\bin Duke \u003c scratch.txt"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"REM FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"pPris":22}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"REM java -classpath ..\\bin Duke \u003c scratch.txt"}],"authorContributionMap":{"pPris":2,"-":21}},{"path":"text-ui-test/scratch.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"done"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"delete 2"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"todo tea"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"todo"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"deadline coffee /by 4pm"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"deadline /by 4pm"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"deadline coffee"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"deadline"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"Deadline"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"event read books /at 4-6pm monday"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"event /at 4-6pm monday"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"event read books"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"event"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"delete 2"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"bye"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""}],"authorContributionMap":{"pPris":21}}]
