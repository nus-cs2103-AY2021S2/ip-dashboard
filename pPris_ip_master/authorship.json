[{"path":"improvementstodo.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"level 7"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"save after every change by updating only the specific change, instead of overwriting entire file?"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"prevent user from not using ;;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"offer to correct it to ;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"parsing and unparsing assumes that the file was parsed corrrectly"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"--\u003e need to throw exceptions in case it wasn\u0027t"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    --\u003e i.e. data corrupted"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    create tests that check tasks.txt"}],"authorContributionMap":{"pPris":12}},{"path":"src/data/sampletasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"T;;read book;;false"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"D;;return book;;false;;Sunday"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"E;;project meeting;;false;;Mon 2-4pm"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"D;;do homework;;false;;no idea :-p"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"T;;copythisfileandpastetotasks.txt;;false"}],"authorContributionMap":{"pPris":5}},{"path":"src/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"T;;1238o-4;;false"}],"authorContributionMap":{"pPris":1}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import static java.lang.Boolean.parseBoolean;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":" * Represents a task with a deadline."},{"lineNumber":7,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"public class Deadline extends Task {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    private final LocalDateTime deadline;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"     * Creates a deadline object"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"     * @param desc description of the deadline object"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"     * @param deadline date/time that the deadline task is due"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    public Deadline(String desc, String deadline) {"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        this.deadline \u003d ParseDateTime.parse(deadline);"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    private Deadline(String desc, String deadline, boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        super(desc, isDone);"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        this.deadline \u003d ParseDateTime.parse(deadline);"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        return \"[D][\" + getStatusIcon() + \"] \" + description"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"                + \" (by: \" + ParseDateTime.readableString(deadline) + \")\";"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    public String unparse() {"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        return \"D\" + delimiter + description + delimiter + isDone"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"                + delimiter + ParseDateTime.unparse(deadline) + System.lineSeparator();"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    // note that this parsing is different from parsing user inputs."},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    // since this parsing for hard disk storage is separate from that parsing,"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    // the /at /by style of inputs won\u0027t affect this if they change, i think"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"     * Creates a deadline object based on user input."},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     * @param oneLine One line of user input to be parsed into a deadline"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * @return Deadline Object"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    public static Deadline parse(String oneLine) {"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        // some repetition in this function across all types of tasks but abstracting them might be costly"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"        assert oneLine.startsWith(\"T\" + delimiter);"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":""},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        int descStartIdx \u003d oneLine.indexOf(delimiter);"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        int descEndIdx \u003d oneLine.indexOf(delimiter, descStartIdx + 1);"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"        String desc \u003d oneLine.substring(descStartIdx + delimiter.length(), descEndIdx);"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":""},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        int doneEndIdx \u003d oneLine.indexOf(delimiter, descEndIdx + 1);"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        String doneStr \u003d oneLine.substring(descEndIdx + delimiter.length(), doneEndIdx);"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        boolean isDone \u003d parseBoolean(doneStr);"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":""},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        String deadline \u003d oneLine.substring(doneEndIdx + delimiter.length());"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":""},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"        return new Deadline(desc, deadline, isDone);"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":""},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"    // for testing purposes"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"    public static void main(String[] args) {"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"        Deadline t \u003d new Deadline(\"hello world\", \"7am on wed\");"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"        System.out.println(t);"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"        t.markAsDone();"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"        System.out.println(t);"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"        System.out.println(t.unparse());"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"        System.out.println(parse(t.unparse()));"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"        // test with other cases without relying on t"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":""},{"lineNumber":75,"author":{"gitId":"pPris"},"content":""},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":76}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import java.util.Scanner;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    // todo should duke be instantiated?"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    private static TaskList taskList;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"     * Entry point of the duke programme"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"     * @param args Irrelevant argument"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":""},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            taskList \u003d TaskList.setupTaskList();"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        } catch (IOException e) {"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            Ui.print(new String[]{\"Something went wrong in loading the task file and parsing\","},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"                    e.getMessage()});"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        Ui.intro();"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        // variables to reuse"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        String userInput;"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        Parser parser \u003d new Parser(taskList);"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        boolean remainOpen \u003d true;"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        while (remainOpen) {"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"            userInput \u003d sc.nextLine().trim();"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"            remainOpen \u003d parser.parseInputLine(userInput);"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":""},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        sc.close();"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":32,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import static java.lang.Boolean.parseBoolean;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.time.LocalDateTime;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"public class Event extends Task {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    private LocalDateTime eventTiming; // todo make a custom class for datetimes"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public Event(String desc, String eventTiming) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"        this.eventTiming \u003d ParseDateTime.parse(eventTiming);"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    private Event(String desc, String eventTiming, boolean isDone) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        super(desc, isDone);"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        this.eventTiming \u003d ParseDateTime.parse(eventTiming);"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        return \"[E][\" + getStatusIcon() + \"] \" + description"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"                + \" (at: \" + ParseDateTime.readableString(eventTiming) + \")\";"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    public String unparse() {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        // should abstract e here away"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        return \"E\" + delimiter + description + delimiter + isDone"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"                + delimiter + ParseDateTime.unparse(eventTiming) + System.lineSeparator();"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":""},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    //E;;desc;;true;;timing"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    public static Event parse(String oneLine) {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        // some repetition in this function across all types of tasks but abstracting them might be costly"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        assert oneLine.startsWith(\"T\" + delimiter);"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":""},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        int descStartIdx \u003d oneLine.indexOf(delimiter);"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        int descEndIdx \u003d oneLine.indexOf(delimiter, descStartIdx + 1);"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        String desc \u003d oneLine.substring(descStartIdx + delimiter.length(), descEndIdx);"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        int doneEndIdx \u003d oneLine.indexOf(delimiter, descEndIdx + 1);"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        String doneStr \u003d oneLine.substring(descEndIdx + delimiter.length(), doneEndIdx);"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        Boolean isDone \u003d parseBoolean(doneStr);"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":""},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        String eventTiming \u003d oneLine.substring(doneEndIdx + delimiter.length());"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":""},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        return new Event(desc, eventTiming, isDone);"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":""},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    // for testing purposes"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"    public static void main(String[] args) {"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        Event t \u003d new Event(\"hello world\", \"8pm\");"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        System.out.println(t);"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"        t.markAsDone();"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        System.out.println(t);"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        System.out.println(t.unparse());"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        System.out.println(parse(t.unparse()));"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        // test with other cases without relying on t"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":58}},{"path":"src/main/java/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class InvalidArgumentException extends Exception {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"     * Invalid argument exception for e.g. when an unapplicable command is used on an empty list"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"     * @param errMsg Error message to display"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    public InvalidArgumentException(String errMsg) {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        super(errMsg);"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":9}},{"path":"src/main/java/MissingArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class MissingArgumentException extends Exception {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"     * Create missing argument exception with an error message and a throwable"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"     * @param errorMessage"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    public MissingArgumentException(String errorMessage, Throwable err) {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        super(errorMessage, err);"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"     * Create missing argument exception with an error message"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"     * @param errorMessage"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    public MissingArgumentException(String errorMessage) {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        super(errorMessage);"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":17}},{"path":"src/main/java/ParseDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.time.Year;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"// is ParseDateTime getting called from the wrong place?"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"// should it be called from parser or the task subclasses?"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":" * A class that helps parse user input strings into date time objects for relevant tasks"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"public class ParseDateTime {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    // LIST OF SUPPORTED DATES"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    // dd-MM ha i.e. \"30-04 6PM\""},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     * Parses user input into a dateTimeObject by calling the relevant formatting function."},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"     * @param s User input to parse"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"     * @return A LocalDateTime object"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    public static LocalDateTime parse(String s) {"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        // format YYYY-MM-DD"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        // todo exceptions/error"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        // todo check length and see which format to use"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        return parseFormat1(s);"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    // for saving minimal format back to list?"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    // maybe once there are more parsing formats, should create a CustomDateTime object that"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    // stores what format we\u0027re using after parsing once, so that don\u0027t need to keep parsing so much"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    // upon every save to harddisk and loading"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"     * Formats a date time object as a string to save into hard disk"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"     * @param d date time object to stringify"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"     * @return String representation for hard disk"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    public static String unparse(LocalDateTime d) {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        return unparseFormat1(d);"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    private static String unparseFormat1(LocalDateTime d) {"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        String patt \u003d \"dd-MM ha yyyy\";"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"        DateTimeFormatter f2 \u003d DateTimeFormatter.ofPattern(patt);"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        String str \u003d f2.format(d);"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"        return str.substring(0, patt.length() - 4);"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":""},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"    // where s is formatted like \"30-04 6PM\""},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    private static LocalDateTime parseFormat1(String s) {"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        DateTimeFormatter f \u003d DateTimeFormatter.ofPattern(\"dd-MM ha yyyy\");"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"        int yyyy \u003d Year.now().getValue();"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        LocalDateTime d \u003d LocalDateTime.parse(s + \" \" + yyyy, f);"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        return d;"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":""},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"     * Formats date time into a readable string so that /list command is readable"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"     * @param d date time object"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"     * @return a user-friendly string"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"    public static String readableString(LocalDateTime d) {"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        String patt \u003d \"dd MMM ha yyyy\";"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        DateTimeFormatter f2 \u003d DateTimeFormatter.ofPattern(patt);"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"        String str \u003d f2.format(d);"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"        return str.substring(0, patt.length() - 4);"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":""},{"lineNumber":69,"author":{"gitId":"pPris"},"content":""},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"    // testing purposes"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"    public static void main(String[] args) {"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"        LocalDate d3 \u003d LocalDate.parse(\"2019-12-02\");"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"        System.out.println(d3);"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":""},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"        // parser for dd-MM ha"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"        // time currently is hour only, and PM needs to be in caps"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"        // f2 and d2 work together to enable user to key in particular formats"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"        String test2 \u003d \"30-04 6PM\";"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"        int yyyy2 \u003d Year.now().getValue();"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"        DateTimeFormatter f2 \u003d DateTimeFormatter.ofPattern(\"dd-MM ha yyyy\");"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"        LocalDateTime d2 \u003d LocalDateTime.parse(test2 + \" \" + yyyy2, f2);"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"        System.out.println(d2);"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":84}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public class Parser {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    private final TaskList taskList;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    public Parser(TaskList taskListToWriteInto) {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        this.taskList \u003d taskListToWriteInto;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    // for every new command to support, need to add to cases here and if statements in parse method"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    // could simplify it somehow --\u003e can tasktype enums each have error messages associated with them"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    // todo definitely need to simplify, too much duplication?"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    // but how else do you want to detect the first word if not for the space?"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    private static void handleOnlyFirstArgGiven(String command)"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"            throws MissingArgumentException, UnsupportedCommandException {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        String errMsg \u003d \"\";"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        switch (command) {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        case \"todo\":"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include a description for your todo.\";"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        case \"event\":"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include a description and an /at argument for your event.\";"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        case \"deadline\":"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include a description and a /by argument for your deadline.\";"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        case \"done\":"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include the list item number of the task to mark done.\";"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"        case \"delete\":"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Please include the list item number of the task to delete.\";"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"            throw new UnsupportedCommandException();"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        throw new MissingArgumentException(errMsg);"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":""},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    // for missing second/third arguments"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    // replace String taskType with Enum later"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"    private static String determineErrMsg(String taskType, int positionMissing) {"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"        String errMsg \u003d \"\";"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"        switch (taskType) {"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        case \"todo\":"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Missing argument \" + positionMissing + \". Please include a todo description.\";"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        case \"event\":"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"            if (positionMissing \u003d\u003d 2) {"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing argument \" + positionMissing + \". Please include an event description.\";"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"            } else if (positionMissing \u003d\u003d 3) {"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing an /at argument. Please include an event timing.\";"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"        case \"deadline\":"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"            if (positionMissing \u003d\u003d 2) {"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing argument \" + positionMissing + \". Please include a description of the deadline.\";"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"            } else if (positionMissing \u003d\u003d 3) {"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"                errMsg \u003d \"Missing a /by argument. Please include a deadline.\";"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"            errMsg \u003d \"Missing arguments for this task type.\";"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"        return errMsg;"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":""},{"lineNumber":71,"author":{"gitId":"pPris"},"content":""},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"    private void parseNextArgs(String firstWord, String userInput, int firstSpaceIndex)"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"            throws MissingArgumentException, UnsupportedCommandException, InvalidArgumentException {"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"        // some variables declared upfront"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"        // todo declare these variables in if blocks below for readability"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"        String desc;"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"        String thirdArg;"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"        int secondCmdIndex \u003d 0;"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":""},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"            if (firstWord.equals(\"done\")) {"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":""},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1).trim();"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"                int secondArg \u003d Integer.parseInt(desc);"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":""},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"                taskList.markDone(secondArg);"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":""},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"todo\")) {"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":""},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1).trim();"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"                taskList.addTask(new Todo(desc));"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":""},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"deadline\")) {"},{"lineNumber":94,"author":{"gitId":"pPris"},"content":""},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"                secondCmdIndex \u003d userInput.indexOf(\"/by\"); // assuming valid"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"                int byIndex \u003d secondCmdIndex; // for readability"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1, byIndex - 1).trim();"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"                thirdArg \u003d userInput.substring(byIndex + 3).trim();"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":""},{"lineNumber":100,"author":{"gitId":"pPris"},"content":"                taskList.addTask(new Deadline(desc, thirdArg));"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":""},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"event\")) {"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":""},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"                secondCmdIndex \u003d userInput.indexOf(\"/at\"); // assuming valid"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"                int atIndex \u003d secondCmdIndex; // for readability"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1, atIndex - 1).trim();"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"                thirdArg \u003d userInput.substring(atIndex + 3).trim();"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":""},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"                taskList.addTask(new Event(desc, thirdArg));"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"delete\")) {"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1).trim();"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"                int secondArg \u003d Integer.parseInt(desc);"},{"lineNumber":113,"author":{"gitId":"pPris"},"content":""},{"lineNumber":114,"author":{"gitId":"pPris"},"content":"                // todo checkIfValidListIndex();"},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"                taskList.deleteTask(secondArg);"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"            } else if (firstWord.equals(\"find\")) {"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":""},{"lineNumber":118,"author":{"gitId":"pPris"},"content":"                desc \u003d userInput.substring(firstSpaceIndex + 1).trim();"},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"                taskList.findTasks(desc);"},{"lineNumber":120,"author":{"gitId":"pPris"},"content":""},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"            } else {"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":"                throw new UnsupportedCommandException();"},{"lineNumber":123,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":124,"author":{"gitId":"pPris"},"content":"        } catch (StringIndexOutOfBoundsException e) {"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":"            if (secondCmdIndex \u003d\u003d -1) {"},{"lineNumber":126,"author":{"gitId":"pPris"},"content":"                throw new MissingArgumentException(determineErrMsg(firstWord, 3), e);"},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"            } else if (firstSpaceIndex + 1 \u003e secondCmdIndex - 1) {"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"                throw new MissingArgumentException(determineErrMsg(firstWord, 2), e);"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"pPris"},"content":""},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"    // this check could be done using an enum property?"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"    // static?"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":"    private static void checkIfTooManyArgs(String command) throws InvalidArgumentException {"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"        switch (command) {"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"        case \"bye\":"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"        case \"list\":"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(\"Too many arguments provided. Did you mean \u0027\" + command + \"\u0027?\");"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":142,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":143,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"pPris"},"content":""},{"lineNumber":145,"author":{"gitId":"pPris"},"content":"    private void checkInvalidOnEmptyList(String command) throws InvalidArgumentException {"},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"        if (taskList.isEmpty() \u0026\u0026 (command.equals(\"done\") || command.equals(\"delete\"))) {"},{"lineNumber":147,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(\"This command cannot be done on an empty task list.\");"},{"lineNumber":148,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":149,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":150,"author":{"gitId":"pPris"},"content":""},{"lineNumber":151,"author":{"gitId":"pPris"},"content":"    // return value represents if scanner needs to remain open"},{"lineNumber":152,"author":{"gitId":"pPris"},"content":"    private boolean checkAndHandleIfOneArgIsValid(String command)"},{"lineNumber":153,"author":{"gitId":"pPris"},"content":"            throws MissingArgumentException, UnsupportedCommandException {"},{"lineNumber":154,"author":{"gitId":"pPris"},"content":""},{"lineNumber":155,"author":{"gitId":"pPris"},"content":"        if (command.equals(\"bye\")) {"},{"lineNumber":156,"author":{"gitId":"pPris"},"content":"            Ui.printExitMsg();"},{"lineNumber":157,"author":{"gitId":"pPris"},"content":"            return false;"},{"lineNumber":158,"author":{"gitId":"pPris"},"content":"        } else if (command.equals(\"list\")) {"},{"lineNumber":159,"author":{"gitId":"pPris"},"content":"            Ui.printTaskList(taskList);"},{"lineNumber":160,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":161,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":162,"author":{"gitId":"pPris"},"content":""},{"lineNumber":163,"author":{"gitId":"pPris"},"content":"        // print correct error message when insufficient arguments"},{"lineNumber":164,"author":{"gitId":"pPris"},"content":"        handleOnlyFirstArgGiven(command);"},{"lineNumber":165,"author":{"gitId":"pPris"},"content":"        return true;"},{"lineNumber":166,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":167,"author":{"gitId":"pPris"},"content":""},{"lineNumber":168,"author":{"gitId":"pPris"},"content":"    // should exceptions be all handled in parser or elsewhere? how do you test if the correct exception is thrown"},{"lineNumber":169,"author":{"gitId":"pPris"},"content":"    // make enums for supported commands?"},{"lineNumber":170,"author":{"gitId":"pPris"},"content":""},{"lineNumber":171,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"pPris"},"content":"     * Main driver for parsing any user input"},{"lineNumber":173,"author":{"gitId":"pPris"},"content":"     * @param userInput User input from terminal"},{"lineNumber":174,"author":{"gitId":"pPris"},"content":"     * @return returns whether to keep scanner open"},{"lineNumber":175,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":176,"author":{"gitId":"pPris"},"content":"    public boolean parseInputLine(String userInput)  {"},{"lineNumber":177,"author":{"gitId":"pPris"},"content":""},{"lineNumber":178,"author":{"gitId":"pPris"},"content":"        // SETTING UP THE VARIABLES NEEDED FOR ERROR CHECKING / PARSING"},{"lineNumber":179,"author":{"gitId":"pPris"},"content":"        int firstSpaceIndex \u003d userInput.indexOf(\" \"); // todo can consider using split(\" \", 2)?"},{"lineNumber":180,"author":{"gitId":"pPris"},"content":"        String firstWord;"},{"lineNumber":181,"author":{"gitId":"pPris"},"content":""},{"lineNumber":182,"author":{"gitId":"pPris"},"content":"        if (firstSpaceIndex \u003d\u003d -1) {"},{"lineNumber":183,"author":{"gitId":"pPris"},"content":"            firstWord \u003d userInput.trim();"},{"lineNumber":184,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":185,"author":{"gitId":"pPris"},"content":"            firstWord \u003d userInput.substring(0, firstSpaceIndex);"},{"lineNumber":186,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":187,"author":{"gitId":"pPris"},"content":""},{"lineNumber":188,"author":{"gitId":"pPris"},"content":""},{"lineNumber":189,"author":{"gitId":"pPris"},"content":"        // ERROR CHECKING AND PROCESSING DIFFERENT COMMANDS"},{"lineNumber":190,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":191,"author":{"gitId":"pPris"},"content":"            // check for commands that are invalid on an empty task list"},{"lineNumber":192,"author":{"gitId":"pPris"},"content":"            checkInvalidOnEmptyList(firstWord);"},{"lineNumber":193,"author":{"gitId":"pPris"},"content":""},{"lineNumber":194,"author":{"gitId":"pPris"},"content":"            // if there\u0027s only one arg, this function handles whether the one arg is valid"},{"lineNumber":195,"author":{"gitId":"pPris"},"content":"            // and responds accordingly, or whether it\u0027s invalid and prints out the correct"},{"lineNumber":196,"author":{"gitId":"pPris"},"content":"            // error messages"},{"lineNumber":197,"author":{"gitId":"pPris"},"content":"            if (firstSpaceIndex \u003d\u003d -1) {"},{"lineNumber":198,"author":{"gitId":"pPris"},"content":"                return checkAndHandleIfOneArgIsValid(firstWord);"},{"lineNumber":199,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":200,"author":{"gitId":"pPris"},"content":""},{"lineNumber":201,"author":{"gitId":"pPris"},"content":"            // check if more than one arg provided for commands that require only one"},{"lineNumber":202,"author":{"gitId":"pPris"},"content":"            checkIfTooManyArgs(firstWord);"},{"lineNumber":203,"author":{"gitId":"pPris"},"content":""},{"lineNumber":204,"author":{"gitId":"pPris"},"content":"            // just enough args"},{"lineNumber":205,"author":{"gitId":"pPris"},"content":"            parseNextArgs(firstWord, userInput, firstSpaceIndex);"},{"lineNumber":206,"author":{"gitId":"pPris"},"content":""},{"lineNumber":207,"author":{"gitId":"pPris"},"content":"            // UPON SUCCESSFUL COMMAND EXECUTION"},{"lineNumber":208,"author":{"gitId":"pPris"},"content":"            // save tasksFile"},{"lineNumber":209,"author":{"gitId":"pPris"},"content":"            // todo still saveTasksList in parser?"},{"lineNumber":210,"author":{"gitId":"pPris"},"content":"            taskList.saveTasksList();"},{"lineNumber":211,"author":{"gitId":"pPris"},"content":""},{"lineNumber":212,"author":{"gitId":"pPris"},"content":"        } catch (UnsupportedCommandException | InvalidArgumentException | MissingArgumentException e) {"},{"lineNumber":213,"author":{"gitId":"pPris"},"content":"            // is it better to detect unsupported first command earlier?"},{"lineNumber":214,"author":{"gitId":"pPris"},"content":"            // currently being detected at the end of many if blocks"},{"lineNumber":215,"author":{"gitId":"pPris"},"content":"            // maybe should save list of supported commands in another file (String[]{todo, deadline, event}"},{"lineNumber":216,"author":{"gitId":"pPris"},"content":"            Ui.printException(e.getMessage());"},{"lineNumber":217,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":218,"author":{"gitId":"pPris"},"content":"        } catch (IOException e) {"},{"lineNumber":219,"author":{"gitId":"pPris"},"content":"            // todo see if you can offer better help"},{"lineNumber":220,"author":{"gitId":"pPris"},"content":"            Ui.print(new String[]{\"Oops, error occurred in saving the file.\", e.getMessage()});"},{"lineNumber":221,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":222,"author":{"gitId":"pPris"},"content":"        } catch (Exception e) {"},{"lineNumber":223,"author":{"gitId":"pPris"},"content":"            String errMsg \u003d \"didn\u0027t expect this exception \" + e;"},{"lineNumber":224,"author":{"gitId":"pPris"},"content":"            Ui.printException(errMsg);"},{"lineNumber":225,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":226,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":227,"author":{"gitId":"pPris"},"content":""},{"lineNumber":228,"author":{"gitId":"pPris"},"content":"        return true;"},{"lineNumber":229,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":230,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":230}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import java.nio.file.Paths;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"// should be called fileSetup, but loadfromharddisk method doesn\u0027t fit"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"/*"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"// todo"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"// storage objects should store info about where each list/anything should be saved"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"// have a final hashmap of where each object to store is stored"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"// todo seems like storage object might be associated with the duke object? not sure"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":""},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":" * This class handles setting up the file to save Duke data to."},{"lineNumber":17,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    // fixme this is wrong when run by bat file or jar file"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    public static final String projectDir \u003d System.getProperty(\"user.dir\");"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    public static final java.nio.file.Path taskListFilePath \u003d java.nio.file.Paths.get("},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"            projectDir, \"src\", \"data\", \"tasks.txt\");"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"     * Checks if file or directory exists. Same mechanism for file or dir."},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"     * @param path Path to check for file or directory"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"     * @return True if it exists, false if it doesn\u0027t or any other error occured"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    public static boolean doesFileOrDirectoryExist(Path path) {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        if (java.nio.file.Files.exists(path)) {"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        } else if (java.nio.file.Files.notExists(path)) {"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"            return false;"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"            // todo throw no access exception here"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"            return false;"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     * Checks if task file exists at hardcoded path"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * @return if task file exists"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    public static boolean doesTaskFileExist() {"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        return doesFileOrDirectoryExist(taskListFilePath);"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":""},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"     * Sets up the tasks file in the hardcoded path, if the task file doesn\u0027t exist yet"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"     * @throws IOException"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"    public static void setupTasksFile() throws IOException {"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        if (doesTaskFileExist()) {"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"            // probably not gonna be used due to TaskList.java impl"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"            return;"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"            java.nio.file.Path dataDirPath \u003d java.nio.file.Paths.get(projectDir, \"src\", \"data\");"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"            boolean doesDataDirExist \u003d doesFileOrDirectoryExist(dataDirPath);"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":""},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"            // create directory if it doesn\u0027t exist"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"            if (!doesDataDirExist) {"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"                Path p \u003d Paths.get(projectDir, \"src\", \"data\");"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"                boolean hasCreated \u003d new File(p.toString()).mkdir();"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"                System.out.println(\"done 2 \" + hasCreated);"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":""},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"            // create file"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"            Path p \u003d Paths.get(projectDir, \"src\", \"data\", \"tasks.txt\");"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"            boolean isCreated \u003d new File(p.toString()).createNewFile();"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":""},{"lineNumber":75,"author":{"gitId":"pPris"},"content":""},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"     * Finds task file from hard coded path and loads them into a task file"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"     * @param taskList taskList to load any tasks from hard disk into"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"     * @return if any tasks have been found and loaded from hard disk"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"     * @throws IOException"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"    public static boolean loadFromHardDisk(TaskList taskList) throws IOException {"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"        boolean isAnyTaskFound \u003d false;"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":""},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"        if (doesTaskFileExist()) {"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"            // load it"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"            File f \u003d new File(taskListFilePath.toString());"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"                // much hardcoding to parse which class\u0027 unparse method to use"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"                // figure out how to use polymorphism?"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"                String letter \u003d line.substring(0, 1);"},{"lineNumber":94,"author":{"gitId":"pPris"},"content":"                Task t;"},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"                switch (letter) {"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"                case \"T\":"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"                    t \u003d Todo.parse(line);"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"                    break;"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"                case \"E\":"},{"lineNumber":100,"author":{"gitId":"pPris"},"content":"                    t \u003d Event.parse(line);"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"                    break;"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"                case \"D\":"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"                    t \u003d Deadline.parse(line);"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"                    break;"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"                default:"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"                    // todo create exceptions for parsing from hard disk"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"                    t \u003d null;"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"                    break;"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"                }"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"                taskList.add(t);"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"                isAnyTaskFound \u003d true;"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":"            // probably not gonna be used due to TaskList.java impl"},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"            setupTasksFile();"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"        return isAnyTaskFound;"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":119}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public abstract class Task {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    protected String description;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"    protected boolean isDone;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    protected static String delimiter \u003d \";;\";"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    protected String taskType;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"     * Creates simple task with one field"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"     * @param description A string describing the task"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    public Task(String description) {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        this.description \u003d description;"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d false;"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     * Constructor used by parsing functions when saving from hard drive"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"     * @param desc task description"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"     * @param isDone completion status of task"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    protected Task(String desc, Boolean isDone) {"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        this.description \u003d desc;"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"     * Gets the symbol that represents if the object is completed."},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"     * @return A string that represents if the task is completed or not."},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    protected String getStatusIcon() {"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"        return (isDone ? \"/\" : \" \");"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":""},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"     * Marks the task as done so that a done symbol shows up in the task\u0027s toString."},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    public void markAsDone() {"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d true;"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":""},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"     * Formats a string representing the task object to be saved to the hard drive."},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"     * @return String representation of task object for storage file"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    public abstract String unparse();"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":""},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    // parse from text file to become a task object todo - this needs to be static so can\u0027t be abstract"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"    // public abstract Task parse(String oneLine);"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":""},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":55}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.BufferedWriter;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    private final ArrayList\u003cTask\u003e taskArrayList;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    public TaskList() {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        this.taskArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    public void add(Task t) {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        this.taskArrayList.add(t);"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    // is used in junit tests"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    // abstract away anything else that uses size directly on arraylist?"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    public int size() {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        return this.taskArrayList.size();"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    public Task get(int i) {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        return this.taskArrayList.get(i);"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    // todo rm"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    public Task remove(int i) {"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        return this.taskArrayList.remove(i);"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    public boolean isEmpty() {"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        return this.taskArrayList.isEmpty();"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    // setup at default location"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    public static TaskList setupTaskList() throws IOException {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        if (Storage.doesTaskFileExist()) {"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"            TaskList t \u003d new TaskList();"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"            Storage.loadFromHardDisk(t);"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"            return t;"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"            return new TaskList();"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":""},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"     * Saves the entire task list to hard drive"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"     * @throws IOException"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    public void saveTasksList() throws IOException {"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        File f \u003d new File(Storage.taskListFilePath.toString());"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        // doesn\u0027t actually create a new file i think, converts an existing file"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":""},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        FileWriter fw \u003d new FileWriter(f);"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        for (Task task : this.taskArrayList) {"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"            bw.write(task.unparse());"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":""},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        bw.flush();"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        bw.close();"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":""},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"     * Adds task to array list and prints success message with task details"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"     * @param t task object to add"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"    public void addTask(Task t) {"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"        taskArrayList.add(t);"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":""},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"        String[] messages \u003d {"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"                \"Success. I\u0027ve added this task:\","},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"                Ui.taskIndent + t // standardize this indent,"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"        };"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":""},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"        Ui.print(messages);"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":""},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"     * Deletes a task in the list"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"     * @param i index of task to be deleted"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"     * @throws InvalidArgumentException"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"    public void deleteTask(int i) throws InvalidArgumentException {"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"        if (i \u003c 1 || i \u003e taskArrayList.size()) {"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(invalidNumErrMsg(i, 1, taskArrayList.size()));"},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":""},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"        Ui.print(new String[]{\"Got you. I\u0027ve deleted this task:\","},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"                Ui.taskIndent + taskArrayList.get(i - 1)});"},{"lineNumber":94,"author":{"gitId":"pPris"},"content":""},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"        taskArrayList.remove(i - 1);"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":""},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"     * Mark specified task done"},{"lineNumber":100,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"     * @param i off-by-one index of a task in array list"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"     * Marks a task in the list done"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"     * @param i index of task to mark done"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"     * @throws InvalidArgumentException"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"    public void markDone(int i) throws InvalidArgumentException {"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"        if (i \u003c 1 || i \u003e taskArrayList.size()) {"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(invalidNumErrMsg(i, 1, taskArrayList.size()));"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":""},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"        taskArrayList.get(i - 1).markAsDone();"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":""},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"        Ui.print(new String[]{\"Good work! I\u0027ve marked this task done:\","},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"                Ui.taskIndent + taskArrayList.get(i - 1)});"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":""},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":120,"author":{"gitId":"pPris"},"content":"     * Formats error message if invalid list index provided"},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"     * @param i provided list index"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":"     * @param min minimum valid index"},{"lineNumber":123,"author":{"gitId":"pPris"},"content":"     * @param max maximum valid index"},{"lineNumber":124,"author":{"gitId":"pPris"},"content":"     * @return error message"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":126,"author":{"gitId":"pPris"},"content":"    private static String invalidNumErrMsg(int i, int min, int max) {"},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"        String errMsg \u003d \"Invalid list index given: \" + i"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"                + \". Number needs to be between \" + min + \" and \" + max + \" (inclusive). \";"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"        return errMsg;"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"pPris"},"content":""},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"    public void findTasks(String s) {"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"        TaskList filtered \u003d new TaskList();"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"        for (Task t : taskArrayList) {"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":"            if (t.description.contains(s)) {"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"                filtered.add(t);"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"        Ui.printTaskList(filtered);"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":141}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import static java.lang.Boolean.parseBoolean;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    private static final String taskType \u003d \"T\";"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    public Todo(String desc) {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    // only used by parsing function"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private Todo(String desc, Boolean isDone) {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        super(desc, isDone);"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":""},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        return \"[T][\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    public String unparse() {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        return \"T\" + delimiter + description + delimiter + isDone + System.lineSeparator();"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    //T;;desc;;true"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    public static Todo parse(String oneLine) {"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        assert oneLine.startsWith(\"T\" + delimiter);"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        int descStartIdx \u003d oneLine.indexOf(delimiter);"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        int descEndIdx \u003d oneLine.indexOf(delimiter, descStartIdx + 1);"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        String desc \u003d oneLine.substring(descStartIdx + delimiter.length(), descEndIdx);"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        String doneStr \u003d oneLine.substring(descEndIdx + delimiter.length());"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        boolean isDone \u003d parseBoolean(doneStr);"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":""},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        return new Todo(desc, isDone);"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    // for testing purposes"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    public static void main(String[] args) {"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":42}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class Ui {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    // formatting for print messages"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"    private static final String lines \u003d \"    ______________________________________________\";"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    private static final String indent \u003d \"      \";"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    public static final String taskIndent \u003d \"  \"; // an extra indent for listing tasks, is used outside this class"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"     * Prints introductory message."},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    public static void intro() {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        String logo \u003d \" ______\\n\""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"                + \"/______\\\\ Kiwi\u0027s\\n\""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"                + \"|______|     Inn\\n\""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"                + \"####################\";"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        // intro message"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        System.out.println(logo);"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        print(new String[]{\"Welcome, traveller. I\u0027m Kiwi.\", \"What would you like to do today?\"});"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"     * Prints a formatted task list."},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"     * @param taskList Task list to be printed"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    public static void printTaskList(TaskList taskList) {"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        System.out.println(indent + \"Your tasks:\");"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":""},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"            System.out.print(taskIndent);"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            System.out.println(indent + (i + 1) + \".\" + taskList.get(i));"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":""},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        System.out.println();"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        System.out.println(indent + \"You have \" + taskList.size() + \" tasks. \");"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     * Helper method to format chat bot responses"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * @param messages An array containing all messages to print in response to one command"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    public static void print(String[] messages) {"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":""},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        for (int i \u003d 0; i \u003c messages.length; i++) {"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"            System.out.println(indent + messages[i]);"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":""},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":""},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"     * Helper method to format chat bot response"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"     * @param message A message to print in response to one command"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"    public static void print(String message) {"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":""},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        System.out.println(indent + message);"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":""},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"        System.out.println(lines);"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":""},{"lineNumber":68,"author":{"gitId":"pPris"},"content":""},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"     * Formats printing of exception."},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"     * @param errMsg Error message from the exception"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"    public static void printException(String errMsg) {"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"        print(new String[]{\"Oops, Kiwi couldn\u0027t process that.\", taskIndent + errMsg});"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":""},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"     * Prints exit message"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"    public static void printExitMsg() {"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"        print(\"Bye. See you again soon!\");"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":83}},{"path":"src/main/java/UnsupportedCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"public class UnsupportedCommandException extends Exception {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    public UnsupportedCommandException(String errorMessage, Throwable err) {"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"        super(errorMessage, err);"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    public UnsupportedCommandException(String errorMessage) {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"        super(errorMessage);"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"     * Throws unsupported command exception with default message"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public UnsupportedCommandException() {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        super(\"I don\u0027t recognise this command. Please try something else.\");"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""}],"authorContributionMap":{"pPris":18}},{"path":"src/test/java/ParseDateTimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import java.time.LocalDate;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import java.time.LocalDateTime;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import java.time.Year;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"public class ParseDateTimeTest {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void checkUserInputParsing() {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        LocalDateTime d2 \u003d ParseDateTime.parse(\"30-04 6PM\");"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        LocalDateTime d3 \u003d ParseDateTime.parse(\"29-01 5AM\");"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        assertEquals("},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"                ParseDateTime.readableString(d2),"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"                \"30 Apr 6PM\""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        );"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        assertEquals("},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"                ParseDateTime.readableString(d3),"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"                \"29 Jan 5AM\""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        );"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":""},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        // todo check 12AM, 10PM"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":30}},{"path":"src/test/java/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"public class ParserTest {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"//    public void testInvalidOnEmptyList() {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    public void checkWrongArgumentsForTasks() {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"        TaskList t \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        Parser p \u003d new Parser(t);"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        p.parseInputLine(\"todo hello\");"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        p.parseInputLine(\"todo\");"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        p.parseInputLine(\"deadline\");"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        p.parseInputLine(\"event\");"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        assertEquals(t.size(), 1);"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":18}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"public class TaskListTest {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public void taskListChecking() {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        TaskList t \u003d new TaskList();"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"        t.add(new Todo(\"test todo 1\"));"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        t.add(new Todo(\"test todo 2\"));"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        t.add(new Event(\"finish ip level 9\", \"27-01 6AM\"));"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        t.remove(2);"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        assertEquals(t.size(), 2);"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":17}},{"path":"text-ui-test/expectedL8.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":" ______"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"/______\\ Kiwi\u0027s"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"|______|     Inn"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"####################"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"      Welcome, traveller. I\u0027m Kiwi."},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"      What would you like to do today?"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"      Your tasks:"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"      You have 0 tasks. "},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        [E][ ] 2101 meeting (at: 30 Jun 6PM)"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        [T][ ] cycling"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        [D][ ] drawing (by: 28 Feb 7AM)"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        [E][ ] 2101 meeting (at: 30 Jun 8AM)"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"      Bye. See you again soon!"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    ______________________________________________"}],"authorContributionMap":{"pPris":48}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"todo tea"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"deadline coffee /by 4pm"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"deadline /by 4pm"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"deadline coffee"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"deadline"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"Deadline"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"event read books /at 4-6pm monday"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"event /at 4-6pm monday"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"event read books"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"event"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"done"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"blah"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"task 1"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"task 2 3"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"delete 0"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"delete 5"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"delete 19"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"bye"}],"authorContributionMap":{"pPris":31}},{"path":"text-ui-test/inputL8.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"event 2101 meeting /at 30-06 6PM"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"todo cycling"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"deadline drawing /by 28-02 7AM"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"event 2101 meeting /at 30-06 8AM"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"bye"}],"authorContributionMap":{"pPris":6}},{"path":"text-ui-test/runtemptest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"REM THIS FILE IS CREATED FOR TEMPORARY TESTING PURPOSES WHILE DOING A LEVEL"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":")"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"java -classpath ..\\bin Duke \u003c scratch.txt"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"REM FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"pPris":22}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"REM REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"REM java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"REM"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"REM REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"REM FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"REM"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"REM java -classpath ..\\bin Duke \u003c scratch.txt"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"REM test files for current usage"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"REM includes saving bugs"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"java -classpath ..\\bin Duke \u003c inputL8.txt \u003e outputL8.txt"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"FC outputL8.txt expectedL8.txt"}],"authorContributionMap":{"pPris":11,"-":17}},{"path":"text-ui-test/scratch.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"done"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"delete 2"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"todo tea"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"todo"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"deadline coffee /by 4pm"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"deadline /by 4pm"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"deadline coffee"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"deadline"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"Deadline"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"event read books /at 4-6pm monday"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"event /at 4-6pm monday"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"event read books"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"event"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"delete 2"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"bye"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""}],"authorContributionMap":{"pPris":21}}]
