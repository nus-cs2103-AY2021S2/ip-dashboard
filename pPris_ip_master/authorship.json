[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":""},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":""},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":""},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":62}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"E;;yelp;;true;;3:4:2021:23:58"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"E;;read;;false;;3:4:2021:14:0"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"T;;hello;;false"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"D;;item;;false;;4:12:2021:16:11"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"E;;yelp;;false;;3:4:2021:23:58"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"E;;read;;false;;3:4:2021:14:0"}],"authorContributionMap":{"pPris":6}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"## Contents "},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"1. [Features](#features)"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"2. [Usage](#Usage)"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"   "},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"   i. [How to interpret this guide](#how-to-interpret-this-guide)"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"   "},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"   ii. [Add tasks to your task list](#add-tasks-to-your-task-list)"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"   "},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"   iii. [Modify tasks in your task list](#modify-tasks-in-your-task-list)"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"   "},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"   iv. [Miscellaneous](#miscellaneous)"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"3. [Command Syntax Summary](#command-syntax-summary)"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"4. [Accepted date time formats](#accepted-date-time-formats) "},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"### 1. Add tasks to your task list"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"You can add three types of tasks to your Kiwi Task List: todo, event and deadline tasks."},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"### 2. Modify your task list"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"View your tasks, mark them done and delete tasks you don\u0027t want."},{"lineNumber":24,"author":{"gitId":"pPris"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"### 3. Interact with Kiwi"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"Find tasks that contain a specified keyword."},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"### 4. Don\u0027t worry about losing your data"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"Kiwi helps you save data to your local storage."},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"### 5. Convenient and friendly syntax"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"Kiwi provides convenient alternative syntax so that you can save time and keystrokes."},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"### How to interpret this guide"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"Replace the words given in {curly braces} with appropriate inputs. For example, replace {DD/MM hh:mm} with a valid date format."},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"### Add tasks to your task list"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"____"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"### `todo` - Add a task to do"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":""},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"Adds a todo task to your tasklist."},{"lineNumber":45,"author":{"gitId":"pPris"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":""},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"`todo {description}`"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":""},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"Example of usage:"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":""},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"`todo sample task 1 `"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":""},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"Expected outcome:"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":""},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"`Success! I\u0027ve added this task:`"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":""},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"`  [T][] sample task 1`"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":""},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"____"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":""},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"### `event` - Add an event to attend"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":""},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"Adds an event to your tasklist."},{"lineNumber":65,"author":{"gitId":"pPris"},"content":""},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":""},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"`event {description} /at {DD-MM hh:mm}`"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":""},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"Example of usage:"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":""},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"`event task 2 /at 20/4 18:00`"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":""},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"Expected outcome:"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":""},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"`Success! I\u0027ve added this task:`"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":""},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"`  [E][] {description} (at: {date} {time})`"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":""},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"____"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":""},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"### `deadline` - Add a deadline to attend"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":""},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"Adds a deadline to your tasklist."},{"lineNumber":85,"author":{"gitId":"pPris"},"content":""},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":""},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"`deadline {description} /by {DD-MM hh:mm}`"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":""},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"Example of usage:"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":""},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"`deadline  task 3 /by 17/4 23:59`"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":""},{"lineNumber":94,"author":{"gitId":"pPris"},"content":"Expected outcome:"},{"lineNumber":95,"author":{"gitId":"pPris"},"content":""},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"`Success! I\u0027ve added this task:`"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":""},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"`[D][] task 3 (by: 17/4 11:59PM)`"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":""},{"lineNumber":100,"author":{"gitId":"pPris"},"content":"### View your tasks"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"____"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":""},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"### `list` - List tasks in your tasklist"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":""},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"Lists all your tasks. If the year details of a task is this year, the year is not printed out to prevent clutter."},{"lineNumber":106,"author":{"gitId":"pPris"},"content":""},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":""},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"`list`"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":""},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"Expected outcome:"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":""},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"`Your tasks:`"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":""},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"`1. [T][] sample task 1`"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":""},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"`2. [E][] task 2 (at: 20/4 6PM)`"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":""},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"`3. [D][] task 3 (by: 17/4 11:59PM)`"},{"lineNumber":120,"author":{"gitId":"-"},"content":""},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"`You have 3 tasks.`"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":"____"},{"lineNumber":123,"author":{"gitId":"pPris"},"content":"### `find` - find tasks in your tasklist"},{"lineNumber":124,"author":{"gitId":"-"},"content":""},{"lineNumber":125,"author":{"gitId":"pPris"},"content":"Finds tasks containing a certain keyword."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":""},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"`find {keyword}`"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":""},{"lineNumber":131,"author":{"gitId":"pPris"},"content":"Example of usage:"},{"lineNumber":132,"author":{"gitId":"pPris"},"content":""},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"`find sample`"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":136,"author":{"gitId":"-"},"content":""},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"`Your tasks:`"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":""},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"`1. [T][] sample task 1`"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":""},{"lineNumber":141,"author":{"gitId":"pPris"},"content":"`You have 1 tasks.`"},{"lineNumber":142,"author":{"gitId":"pPris"},"content":""},{"lineNumber":143,"author":{"gitId":"pPris"},"content":"### Modify tasks in your task list"},{"lineNumber":144,"author":{"gitId":"pPris"},"content":"____"},{"lineNumber":145,"author":{"gitId":"pPris"},"content":""},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"### `done` - Mark tasks in your tasklist done"},{"lineNumber":147,"author":{"gitId":"pPris"},"content":""},{"lineNumber":148,"author":{"gitId":"pPris"},"content":"Mark a specified task as completed."},{"lineNumber":149,"author":{"gitId":"pPris"},"content":""},{"lineNumber":150,"author":{"gitId":"pPris"},"content":"Example of usage:"},{"lineNumber":151,"author":{"gitId":"pPris"},"content":""},{"lineNumber":152,"author":{"gitId":"pPris"},"content":"`done {task number}`"},{"lineNumber":153,"author":{"gitId":"pPris"},"content":""},{"lineNumber":154,"author":{"gitId":"pPris"},"content":"Example of usage:"},{"lineNumber":155,"author":{"gitId":"pPris"},"content":""},{"lineNumber":156,"author":{"gitId":"pPris"},"content":"`done 1`"},{"lineNumber":157,"author":{"gitId":"pPris"},"content":""},{"lineNumber":158,"author":{"gitId":"pPris"},"content":"Expected outcome:"},{"lineNumber":159,"author":{"gitId":"pPris"},"content":""},{"lineNumber":160,"author":{"gitId":"pPris"},"content":"`Good work! I\u0027ve marked this task done:`"},{"lineNumber":161,"author":{"gitId":"pPris"},"content":""},{"lineNumber":162,"author":{"gitId":"pPris"},"content":"`[T][/] sample task 1`"},{"lineNumber":163,"author":{"gitId":"pPris"},"content":""},{"lineNumber":164,"author":{"gitId":"pPris"},"content":""},{"lineNumber":165,"author":{"gitId":"pPris"},"content":"---"},{"lineNumber":166,"author":{"gitId":"pPris"},"content":"### `delete` - Delete tasks in your tasklist"},{"lineNumber":167,"author":{"gitId":"-"},"content":""},{"lineNumber":168,"author":{"gitId":"pPris"},"content":"Deletes a specified task."},{"lineNumber":169,"author":{"gitId":"-"},"content":""},{"lineNumber":170,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":171,"author":{"gitId":"-"},"content":""},{"lineNumber":172,"author":{"gitId":"pPris"},"content":"`delete {task number}`"},{"lineNumber":173,"author":{"gitId":"-"},"content":""},{"lineNumber":174,"author":{"gitId":"pPris"},"content":"Example of usage:"},{"lineNumber":175,"author":{"gitId":"pPris"},"content":""},{"lineNumber":176,"author":{"gitId":"pPris"},"content":"`delete 1`"},{"lineNumber":177,"author":{"gitId":"pPris"},"content":""},{"lineNumber":178,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":179,"author":{"gitId":"-"},"content":""},{"lineNumber":180,"author":{"gitId":"pPris"},"content":"`Got you. I\u0027ve deleted this task:`"},{"lineNumber":181,"author":{"gitId":"pPris"},"content":""},{"lineNumber":182,"author":{"gitId":"pPris"},"content":"` [T][/] sample task 1`"},{"lineNumber":183,"author":{"gitId":"pPris"},"content":""},{"lineNumber":184,"author":{"gitId":"pPris"},"content":"### Miscellaneous"},{"lineNumber":185,"author":{"gitId":"pPris"},"content":"____"},{"lineNumber":186,"author":{"gitId":"pPris"},"content":""},{"lineNumber":187,"author":{"gitId":"pPris"},"content":"### `help` - Get a list of possible inputs you can enter"},{"lineNumber":188,"author":{"gitId":"pPris"},"content":""},{"lineNumber":189,"author":{"gitId":"pPris"},"content":"Provides a list of commands and their syntax."},{"lineNumber":190,"author":{"gitId":"pPris"},"content":""},{"lineNumber":191,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":192,"author":{"gitId":"pPris"},"content":""},{"lineNumber":193,"author":{"gitId":"pPris"},"content":"`help`"},{"lineNumber":194,"author":{"gitId":"pPris"},"content":""},{"lineNumber":195,"author":{"gitId":"pPris"},"content":"---"},{"lineNumber":196,"author":{"gitId":"pPris"},"content":""},{"lineNumber":197,"author":{"gitId":"pPris"},"content":""},{"lineNumber":198,"author":{"gitId":"pPris"},"content":"### `bye` - Exit the kiwi app"},{"lineNumber":199,"author":{"gitId":"pPris"},"content":""},{"lineNumber":200,"author":{"gitId":"pPris"},"content":"Closes the gui and exits the kiwi app."},{"lineNumber":201,"author":{"gitId":"pPris"},"content":""},{"lineNumber":202,"author":{"gitId":"pPris"},"content":"Syntax:"},{"lineNumber":203,"author":{"gitId":"pPris"},"content":""},{"lineNumber":204,"author":{"gitId":"pPris"},"content":"`bye`"},{"lineNumber":205,"author":{"gitId":"pPris"},"content":""},{"lineNumber":206,"author":{"gitId":"pPris"},"content":"---"},{"lineNumber":207,"author":{"gitId":"pPris"},"content":""},{"lineNumber":208,"author":{"gitId":"pPris"},"content":"## Command Syntax Summary"},{"lineNumber":209,"author":{"gitId":"pPris"},"content":"Command keyword | Accepted alternative keywords* | Usage | Examples"},{"lineNumber":210,"author":{"gitId":"pPris"},"content":"----------|------|------|------"},{"lineNumber":211,"author":{"gitId":"pPris"},"content":"`todo`| `t` | `todo {description}`|`todo sample task 1 `"},{"lineNumber":212,"author":{"gitId":"pPris"},"content":"`event`|`e` | `event {description} /at {DD-MM hh:mm}` | `event task 2 /at 20/4 18:00`"},{"lineNumber":213,"author":{"gitId":"pPris"},"content":"`deadline` | `dl` | `deadline {description} /by {DD-MM hh:mm}` | `deadline  task 3 /by 17/4 23:59`"},{"lineNumber":214,"author":{"gitId":"pPris"},"content":"`list`|`ls` `l` | `list` | `list`"},{"lineNumber":215,"author":{"gitId":"pPris"},"content":"`find` | `f` | `find {keyword}` | `find sample`"},{"lineNumber":216,"author":{"gitId":"pPris"},"content":"`done` |- | `done {task number}` | `done 1`"},{"lineNumber":217,"author":{"gitId":"pPris"},"content":"`delete` | `del` | `delete {task number}` | `delete 1`"},{"lineNumber":218,"author":{"gitId":"pPris"},"content":"`help` |`h` | `help` | `help`"},{"lineNumber":219,"author":{"gitId":"pPris"},"content":"`bye` | - | `bye` | `bye`"},{"lineNumber":220,"author":{"gitId":"pPris"},"content":""},{"lineNumber":221,"author":{"gitId":"pPris"},"content":"*How to use alternative keywords: Replace the command keyword in the usage column with any accepted alternative keyword"},{"lineNumber":222,"author":{"gitId":"pPris"},"content":""},{"lineNumber":223,"author":{"gitId":"pPris"},"content":"## Accepted date time formats"},{"lineNumber":224,"author":{"gitId":"pPris"},"content":""},{"lineNumber":225,"author":{"gitId":"pPris"},"content":"For your convenience, kiwi provides multiple date and time formats you can use. "},{"lineNumber":226,"author":{"gitId":"pPris"},"content":"You can use any combination of a date and time format from the tables below."},{"lineNumber":227,"author":{"gitId":"pPris"},"content":""},{"lineNumber":228,"author":{"gitId":"pPris"},"content":"These formats can replace the {DD-MM hh:mm} placeholder given for the event and deadline commands above."},{"lineNumber":229,"author":{"gitId":"pPris"},"content":""},{"lineNumber":230,"author":{"gitId":"pPris"},"content":"An example event command usage would be: `event use alternative syntax /at 30/6 2:40 pm`"},{"lineNumber":231,"author":{"gitId":"pPris"},"content":""},{"lineNumber":232,"author":{"gitId":"pPris"},"content":"### Date syntax "},{"lineNumber":233,"author":{"gitId":"pPris"},"content":""},{"lineNumber":234,"author":{"gitId":"pPris"},"content":"syntax | example"},{"lineNumber":235,"author":{"gitId":"pPris"},"content":"---|---"},{"lineNumber":236,"author":{"gitId":"pPris"},"content":"dd-mm  | 30-04"},{"lineNumber":237,"author":{"gitId":"pPris"},"content":"dd/mm  | 30/04"},{"lineNumber":238,"author":{"gitId":"pPris"},"content":"dd-mm-yyyy  | 30-04-2023"},{"lineNumber":239,"author":{"gitId":"pPris"},"content":""},{"lineNumber":240,"author":{"gitId":"pPris"},"content":"### Time syntax"},{"lineNumber":241,"author":{"gitId":"pPris"},"content":""},{"lineNumber":242,"author":{"gitId":"pPris"},"content":"syntax | example(s)"},{"lineNumber":243,"author":{"gitId":"pPris"},"content":"---|---"},{"lineNumber":244,"author":{"gitId":"pPris"},"content":"hham | 11am, 2pm"},{"lineNumber":245,"author":{"gitId":"pPris"},"content":"hh:mm | 16:11, 7:33"},{"lineNumber":246,"author":{"gitId":"pPris"},"content":"hh:mm pm | 11:58 pm, 11:58 am"},{"lineNumber":247,"author":{"gitId":"pPris"},"content":"hh:mmpm | 11:58pm, 11:58am"}],"authorContributionMap":{"pPris":227,"-":20}},{"path":"gradlew.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"@rem"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"@rem Copyright 2015 the original author or authors."},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"@rem"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"@rem Licensed under the Apache License, Version 2.0 (the \"License\");"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"@rem you may not use this file except in compliance with the License."},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"@rem You may obtain a copy of the License at"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"@rem"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"@rem      https://www.apache.org/licenses/LICENSE-2.0"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"@rem"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"@rem Unless required by applicable law or agreed to in writing, software"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"@rem distributed under the License is distributed on an \"AS IS\" BASIS,"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"@rem See the License for the specific language governing permissions and"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"@rem limitations under the License."},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"@rem"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"@rem ##########################################################################"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"@rem"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"@rem  Gradle startup script for Windows"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"@rem"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"@rem ##########################################################################"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"@rem Set local scope for the variables with windows NT shell"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":""},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"set DIRNAME\u003d%~dp0"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"set APP_BASE_NAME\u003d%~n0"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"set APP_HOME\u003d%DIRNAME%"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"@rem Resolve any \".\" and \"..\" in APP_HOME to make it shorter."},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"for %%i in (\"%APP_HOME%\") do set APP_HOME\u003d%%~fi"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":""},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"@rem Find java.exe"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"if defined JAVA_HOME goto findJavaFromJavaHome"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":""},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"set JAVA_EXE\u003djava.exe"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":""},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"echo."},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"echo."},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"echo location of your Java installation."},{"lineNumber":50,"author":{"gitId":"pPris"},"content":""},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"goto fail"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":""},{"lineNumber":53,"author":{"gitId":"pPris"},"content":":findJavaFromJavaHome"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":""},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"if exist \"%JAVA_EXE%\" goto init"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"echo."},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"echo."},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"echo Please set the JAVA_HOME variable in your environment to match the"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"echo location of your Java installation."},{"lineNumber":64,"author":{"gitId":"pPris"},"content":""},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"goto fail"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":""},{"lineNumber":67,"author":{"gitId":"pPris"},"content":":init"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"@rem Get command-line arguments, handling Windows variants"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":""},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":""},{"lineNumber":72,"author":{"gitId":"pPris"},"content":":win9xME_args"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"@rem Slurp the command line arguments."},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"set CMD_LINE_ARGS\u003d"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"set _SKIP\u003d2"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":""},{"lineNumber":77,"author":{"gitId":"pPris"},"content":":win9xME_args_slurp"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"if \"x%~1\" \u003d\u003d \"x\" goto execute"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":""},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"set CMD_LINE_ARGS\u003d%*"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":""},{"lineNumber":82,"author":{"gitId":"pPris"},"content":":execute"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"@rem Setup the command line"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":""},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":""},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"@rem Execute Gradle"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":""},{"lineNumber":90,"author":{"gitId":"pPris"},"content":":end"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"@rem End local scope for the variables with windows NT shell"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":""},{"lineNumber":94,"author":{"gitId":"pPris"},"content":":fail"},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"rem the _cmd.exe /c_ return code!"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"exit /b 1"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":""},{"lineNumber":100,"author":{"gitId":"pPris"},"content":":mainEnd"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":""},{"lineNumber":103,"author":{"gitId":"pPris"},"content":":omega"}],"authorContributionMap":{"pPris":103}},{"path":"improvementstodo.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"level 7"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"save after every change by updating only the specific change, instead of overwriting entire file?"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"prevent user from not using ;;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"offer to correct it to ;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"parsing and unparsing assumes that the file was parsed corrrectly"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"--\u003e need to throw exceptions in case it wasn\u0027t"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    --\u003e i.e. data corrupted"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    create tests that check tasks.txt"}],"authorContributionMap":{"pPris":12}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":" * An example of a custom control using FXML."},{"lineNumber":18,"author":{"gitId":"pPris"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":" * containing text from the speaker."},{"lineNumber":20,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"public class DialogBox extends HBox {"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    private Label dialog;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    private ImageView displayPicture;"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":""},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"            fxmlLoader.load();"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        } catch (IOException e) {"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"            e.printStackTrace();"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        dialog.setText(text);"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        displayPicture.setImage(img);"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        // @@author {James_D}-reused"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        // https://stackoverflow.com/questions/20708295/put-a-image-in-a-circle-view"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        Circle clip \u003d new Circle(50, 50, 48);"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        displayPicture.setClip(clip);"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"-"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":48,"author":{"gitId":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    private void flip() {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        Collections.reverse(tmp);"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":53,"author":{"gitId":"-"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"-"},"content":""},{"lineNumber":56,"author":{"gitId":"-"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"-"},"content":"        return new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"-"},"content":""},{"lineNumber":60,"author":{"gitId":"-"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"-"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"-"},"content":"        db.flip();"},{"lineNumber":63,"author":{"gitId":"-"},"content":""},{"lineNumber":64,"author":{"gitId":"-"},"content":"        return db;"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":39,"-":27}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import commands.Command;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import exceptions.UnsupportedCommandException;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import format.Ui;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":" * Represents the Kiwi tasklist app. Named as Duke for legacy purposes."},{"lineNumber":10,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    private static TaskList taskList;"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    private boolean hasExitCommandBeenSent;"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    private Parser parser;"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     * Initialise duke with a taskList and a parser."},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    public Duke() {"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        this.initTaskList();"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        this.initParser();"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    private void initParser() {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        this.parser \u003d new Parser();"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"     * Initialise taskList for the app"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    private void initTaskList() {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            taskList \u003d Storage.setupTaskList();"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"            Ui.print(new String[]{\"Something went wrong in loading the task file and parsing\", e.getMessage()});"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"            taskList \u003d new TaskList();"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":""},{"lineNumber":40,"author":{"gitId":"pPris"},"content":""},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    // javafx code adapted/taken from https://se-education.org/guides/tutorials/javaFxPart3.html"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":""},{"lineNumber":43,"author":{"gitId":"pPris"},"content":""},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     * This is the main function that generates a response to user inputted commands and strings."},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"     * @param input User input"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"     * @return Response after processing the command(s) and argument(s) from the user input"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    String getResponse(String input) {"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        Command c;"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":""},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        // parse command"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"            c \u003d parser.parseInputLine(input);"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        } catch (UnsupportedCommandException e) {"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"            return Ui.formatException(e.getMessage());"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":""},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"        // run command"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"        assert c !\u003d null;"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"        c.run(taskList);"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":""},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        // update exit signal boolean so javafx application can be exited"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"        this.hasExitCommandBeenSent \u003d c.hasSentExitDukeSignal();"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":""},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"        // save task list to hard disk"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"        String errMsg \u003d saveToHardDisk();"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":""},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"        // return output"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"        return c.getCommandOutputMsg() + errMsg;"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":""},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"    private String saveToHardDisk() {"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"            Storage.saveTasksList(taskList);"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"            return \"\";"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"        } catch (IOException e) {"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"            return \"\\n\" + e.getMessage();"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":""},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"     * Returns whether an exit command has been sent to duke."},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"    public boolean hasExitCommandBeenSent() {"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"        return hasExitCommandBeenSent;"},{"lineNumber":89,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"pPris":87,"-":3}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":7}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"public class Main extends Application {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private static final Duke duke \u003d new Duke(); //"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    public void start(Stage stage) {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"            stage.setScene(scene);"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"            stage.show();"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"            stage.setTitle(\"Kiwi\");"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        } catch (IOException e) {"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"            e.printStackTrace();"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":27}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import format.Ui;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import javafx.application.Platform;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import javafx.scene.control.Button;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    private final Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/rapunzel.png\"));"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    private final Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/flynn.png\"));"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"     * Initialise main window with scroll pane and intro message."},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    void initialize() {"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(Ui.introMessage(), dukeImage));"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        // runTests();"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":""},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    private void handleUserInput() {"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        );"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        userInput.clear();"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":""},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"        if (duke.hasExitCommandBeenSent()) {"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"            handleExit();"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":""},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"    private void handleExit() {"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        Platform.exit();"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":""},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":66}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import commands.ByeCommand;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import commands.Command;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import commands.DeadlineCommand;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import commands.DeleteCommand;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import commands.DoneCommand;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import commands.EventCommand;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import commands.FindCommand;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import commands.HelpCommand;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"import commands.ListCommand;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"import commands.TodoCommand;"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"import exceptions.UnsupportedCommandException;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"public class Parser {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":""},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"     * Main driver for parsing any user input. The first word of user input contains the command name,"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     * while any subsequent words contain arguments for the command."},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"     * @param userInput User input from terminal"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"     * @return parsed command"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    public Command parseInputLine(String userInput) throws UnsupportedCommandException {"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        // SETTING UP THE VARIABLES NEEDED FOR ERROR CHECKING / PARSING"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        userInput \u003d userInput.trim(); // in case user entered leading spaces"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        int firstSpaceIndex \u003d userInput.indexOf(\" \");"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        String firstWord;"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        String commandBody;"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        if (firstSpaceIndex \u003d\u003d -1) {"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"            firstWord \u003d userInput.trim();"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"            commandBody \u003d \"\";"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            firstWord \u003d userInput.substring(0, firstSpaceIndex).trim();"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"            commandBody \u003d userInput.substring(firstSpaceIndex).trim();"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        return parseIntoCommand(firstWord, commandBody);"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":""},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"     * Calls the appropriate command constructor based on the first word in the user input"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"     * @param firstWord Corresponds to a command name or a short-form"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     * @param commandBody Arguments provided for the command"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * @return A command that can be run"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     * @throws UnsupportedCommandException"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    private Command parseIntoCommand(String firstWord, String commandBody) throws UnsupportedCommandException {"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"        switch (firstWord) {"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        case \"list\":"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        case \"ls\":"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        case \"l\":"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"            return new ListCommand(commandBody);"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        case \"bye\":"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"            return new ByeCommand(commandBody);"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        case \"todo\":"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        case \"t\":"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"            return new TodoCommand(commandBody);"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"        case \"event\":"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        case \"e\":"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"            return new EventCommand(commandBody);"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"        case \"deadline\":"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"        case \"dl\":"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"            return new DeadlineCommand(commandBody);"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        case \"done\":"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"            return new DoneCommand(commandBody);"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"        case \"delete\":"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"        case \"del\":"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"            return new DeleteCommand(commandBody);"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"        case \"find\":"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"        case \"f\":"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"            return new FindCommand(commandBody);"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"        case \"h\":"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"        case \"help\":"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"            return new HelpCommand(commandBody);"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"            throw new UnsupportedCommandException();"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":79}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import java.io.BufferedWriter;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"import java.io.File;"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.io.FileWriter;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import java.nio.file.Path;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import java.nio.file.Paths;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import java.util.Scanner;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"import tasks.Deadline;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"import tasks.Event;"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"import tasks.Task;"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"import tasks.Todo;"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":" * This class handles setting up the file to save Duke data to."},{"lineNumber":18,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"public class Storage {"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    private static final String PROJECT_DIR \u003d System.getProperty(\"user.dir\");"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    private static final Path TASK_LIST_FILE_DIR \u003d Paths.get(PROJECT_DIR,  \"data\");"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    private static final Path TASK_LIST_FILE_PATH \u003d"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"            Paths.get(TASK_LIST_FILE_DIR.toString(), \"tasks.txt\");"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"     * Checks if file or directory exists. Same mechanism for file or dir."},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"     * @param path Path to check for file or directory"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"     * @return True if it exists, false if it doesn\u0027t or any other error occured"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    private static boolean doesFileOrDirectoryExist(Path path) {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        if (java.nio.file.Files.exists(path)) {"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            return true;"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        } else if (java.nio.file.Files.notExists(path)) {"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"            return false;"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"            // likely because user is not allowed access to path"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"            return false;"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     * Checks if task file exists at hardcoded path"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * @return if task file exists"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    private static boolean doesTaskFileExist() {"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        return doesFileOrDirectoryExist(TASK_LIST_FILE_PATH);"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":""},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"     * Sets up the tasks file in the hardcoded path, if the task file doesn\u0027t exist yet"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"     * @throws IOException"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"    private static void createTasksFile() throws IOException {"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        assert !doesTaskFileExist() : \"this shouldn\u0027t be called if task file already exists at stated path\";"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":""},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"        boolean doesDataDirExist \u003d doesFileOrDirectoryExist(TASK_LIST_FILE_DIR);"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        // create directory if it doesn\u0027t exist"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"        if (!doesDataDirExist) {"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"            boolean hasCreated \u003d new File(TASK_LIST_FILE_DIR.toString()).mkdir();"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"            assert hasCreated : \"directory hasn\u0027t been created\";"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":""},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"        boolean isCreated \u003d new File(TASK_LIST_FILE_PATH.toString()).createNewFile();"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":""},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"        assert isCreated : \"task file still hasn\u0027t been created\";"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":""},{"lineNumber":70,"author":{"gitId":"pPris"},"content":""},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"     * Finds task file from hard coded path and loads them into a task file"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"     * @param taskList taskList to load any tasks from hard disk into"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"     * @return if any tasks have been found and loaded from hard disk"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"     * @throws IOException"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"    private static boolean loadFromHardDisk(TaskList taskList) throws IOException {"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"        boolean isAnyTaskFound \u003d false;"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":""},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"        if (doesTaskFileExist()) {"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":""},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"            File f \u003d new File(TASK_LIST_FILE_PATH.toString());"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"            Scanner sc \u003d new Scanner(f); // read from existing task file"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":""},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"            while (sc.hasNextLine()) {"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"                String line \u003d sc.nextLine();"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"                String letter \u003d line.substring(0, 1);"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"                Task t \u003d parseToTask(letter, line);"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":""},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"                taskList.add(t);"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"                isAnyTaskFound \u003d true;"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":""},{"lineNumber":94,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"            createTasksFile();"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":""},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"        return isAnyTaskFound;"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"pPris"},"content":""},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"    private static Task parseToTask(String letter, String line) {"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"        Task t;"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":""},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"        switch (letter) {"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"        case \"T\":"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"            t \u003d Todo.parse(line);"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"        case \"E\":"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"            t \u003d Event.parse(line);"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"        case \"D\":"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"            t \u003d Deadline.parse(line);"},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":"        default:"},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"            t \u003d null;"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"            break;"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":""},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"        return t;"},{"lineNumber":120,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":121,"author":{"gitId":"pPris"},"content":""},{"lineNumber":122,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":123,"author":{"gitId":"pPris"},"content":"     * Setup a new taskList or existing one already in hard disk"},{"lineNumber":124,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":"     * @throws IOException"},{"lineNumber":126,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"    public static TaskList setupTaskList() throws IOException {"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"        if (Storage.doesTaskFileExist()) {"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"            TaskList t \u003d new TaskList();"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"            Storage.loadFromHardDisk(t);"},{"lineNumber":131,"author":{"gitId":"pPris"},"content":"            return t;"},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"            createTasksFile();"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"            return new TaskList();"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":""},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"     * Saves the entire task list to hard drive (default location)."},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"     * @throws IOException"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"pPris"},"content":"    public static void saveTasksList(TaskList taskList) throws IOException {"},{"lineNumber":143,"author":{"gitId":"pPris"},"content":"        File f \u003d new File(Storage.TASK_LIST_FILE_PATH.toString());"},{"lineNumber":144,"author":{"gitId":"pPris"},"content":""},{"lineNumber":145,"author":{"gitId":"pPris"},"content":"        FileWriter fw \u003d new FileWriter(f);"},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);"},{"lineNumber":147,"author":{"gitId":"pPris"},"content":""},{"lineNumber":148,"author":{"gitId":"pPris"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":149,"author":{"gitId":"pPris"},"content":"            bw.write(taskList.get(i).unparse());"},{"lineNumber":150,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":151,"author":{"gitId":"pPris"},"content":""},{"lineNumber":152,"author":{"gitId":"pPris"},"content":"        bw.flush();"},{"lineNumber":153,"author":{"gitId":"pPris"},"content":"        bw.close();"},{"lineNumber":154,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"pPris"},"content":""},{"lineNumber":156,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":156}},{"path":"src/main/java/commands/AddTaskWithTimeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"public abstract class AddTaskWithTimeCommand extends CommandWithParameters {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    protected String timeArgDelimiter \u003d \"\";"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    // the command keyword is being counted as the first argument here"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    protected String secondArg;"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    protected String thirdArg;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    protected String missingThirdArgErrMsg \u003d \"Missing third argument\";"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    protected final String missingDelimiterErrMsg \u003d"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"            \"Missing delimiter. Please type help for method usage.\";"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    protected AddTaskWithTimeCommand(String commandName, String commandBody) {"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        super(commandName, commandBody);"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    private void handleMissingDelimiter() throws MissingArgumentException {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        if (!this.commandBody.contains(this.timeArgDelimiter)) {"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"            throw new MissingArgumentException(missingDelimiterErrMsg);"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    private void splitArgs() {"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        int thirdArgIdx \u003d this.commandBody.indexOf(this.timeArgDelimiter);"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        this.secondArg \u003d this.commandBody.substring(0, thirdArgIdx).trim();"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        this.thirdArg \u003d this.commandBody.substring(thirdArgIdx + this.timeArgDelimiter.length()).trim();"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    private void handleEmptyArgs() throws MissingArgumentException {"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        if (this.secondArg.isEmpty()) {"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"            throw new MissingArgumentException(\"Missing description\");"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        if (this.thirdArg.isEmpty()) {"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"            throw new MissingArgumentException(missingThirdArgErrMsg);"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    protected void parseCommandBody() throws MissingArgumentException {"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        handleMissingDelimiter();"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":""},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        splitArgs();"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":""},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        handleEmptyArgs();"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":""},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        this.hasRunSuccessfully \u003d true;"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":51}},{"path":"src/main/java/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import format.Ui;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public class ByeCommand extends CommandWithNoParameters {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public ByeCommand(String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(\"bye\", commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        assert commandBody.trim().equals(commandBody)"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"                : \"parser is not sending trimmed strings to commands. some commands operate on this assumption\";"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        if (!commandBody.isEmpty()) {"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            handleTooManyArgs();"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"            return;"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        this.hasSentExitDukeSignal \u003d true;"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        this.hasRunSuccessfully \u003d true;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        this.commandOutputMsg \u003d Ui.getExitMessage();"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        assert !this.commandOutputMsg.isEmpty() : \"empty command output in \" + this.commandName;"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":28}},{"path":"src/main/java/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import datetime.KiwiDateTime;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import datetime.ParseKiwiDateTime;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import exceptions.InvalidArgumentException;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import format.Ui;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"public abstract class Command {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    private String[] commandList \u003d"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"            {\"bye\", \"list\", \"event\", \"todo\", \"deadline\", \"delete\", \"done\"};"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    /** For description and toString purposes. Not for switch case or anything that an enum"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     * could do better. Should correspond with the command to type in? */"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    final String commandName;"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    protected final String commandBody;"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    protected String commandOutputMsg;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    protected boolean hasRunSuccessfully \u003d false;"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    protected boolean hasSentExitDukeSignal \u003d false;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    protected Command(String commandName, String commandBody) {"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        this.commandName \u003d commandName;"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        this.commandBody \u003d commandBody;"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":""},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"     * Runs a command and stores the command\u0027s output and status in instance variables."},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"     * @param taskList taskList to call relevant methods on"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    public abstract void run(TaskList taskList);"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":""},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        return String.format(\"Command: %s, hasRunSuccessfully: %s, body: %s\","},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"                this.commandName, this.hasRunSuccessfully, this.commandBody);"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    public String getCommandOutputMsg() {"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        return this.commandOutputMsg;"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"     * Returns whether this command has ran successfully"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    public boolean hasRunSuccessfully() {"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        return this.hasRunSuccessfully;"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":""},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"     * Returns whether any command has sent a signal to exit the app"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"    public boolean hasSentExitDukeSignal() {"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        return this.hasSentExitDukeSignal;"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":""},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"     * Called by commands that can\u0027t be used on empty lists, and throws an error"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"     * after checking if the list is empty."},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"     * @param isEmpty"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"     * @throws InvalidArgumentException"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"    protected void handleInvalidOnEmptyList(boolean isEmpty) throws InvalidArgumentException {"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"        if (isEmpty) {"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(\"This command cannot be done on an empty task list.\");"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":""},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"     * Adds a formatted exception message to this command\u0027s output message."},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"     * All exception handlers in command classes should use this abstraction."},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"     * @param e"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"    protected void handleException(Exception e) {"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"        this.commandOutputMsg \u003d Ui.formatException(e.getMessage());"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":""},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"    public void debug() {"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"        System.out.println(this.commandBody);"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":""},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"    protected KiwiDateTime parseToKiwiDateTime(String s) throws MissingArgumentException {"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"        ParseKiwiDateTime p \u003d new ParseKiwiDateTime();"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":"        return p.parse(s);"},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":""},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":92}},{"path":"src/main/java/commands/CommandWithNoParameters.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import exceptions.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"public abstract class CommandWithNoParameters extends Command {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    final String tooManyArgumentsErrMsg \u003d \"Too many arguments provided. Did you mean \u0027\" + this.commandName + \"\u0027?\";"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    protected CommandWithNoParameters(String commandName, String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(commandName, commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    protected void handleTooManyArgs() {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        handleException(new InvalidArgumentException(tooManyArgumentsErrMsg));"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":16}},{"path":"src/main/java/commands/CommandWithParameters.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import exceptions.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public abstract class CommandWithParameters extends Command {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    protected static final String INSUFFICIENT_ARGS_ERR_MSG \u003d"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"            \"There are missing arguments inputted for this %s command.\";"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    protected CommandWithParameters(String commandName, String commandBody) {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        super(commandName, commandBody);"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    protected void handleNoArgs() throws MissingArgumentException {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        if (this.commandBody.isEmpty()) {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            throw new MissingArgumentException(String.format(INSUFFICIENT_ARGS_ERR_MSG, commandName));"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"     * @param size"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"     * @param userIdx Index starting from 1, not 0"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    protected boolean isInvalidListIndex(int size, int userIdx) {"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        return userIdx \u003c 1 || userIdx \u003e size;"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    protected void checkInvalidListIdx(int size, int userIdx) throws InvalidArgumentException {"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        if (isInvalidListIndex(size, userIdx)) {"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"            int minIdx \u003d 1;"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"            String invalidNumErrMsg \u003d String.format("},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"                    \"Invalid task number given: %d. Number needs to be between %d and %d (inclusive). \","},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"                    userIdx, minIdx, size);"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"            throw new InvalidArgumentException(invalidNumErrMsg);"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":40}},{"path":"src/main/java/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import tasks.Deadline;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public class DeadlineCommand extends AddTaskWithTimeCommand {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public DeadlineCommand(String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(\"done\", commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"        this.timeArgDelimiter \u003d \"/by\";"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        this.missingThirdArgErrMsg \u003d \"missing date/time argument\";"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"            parseCommandBody();"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            this.commandOutputMsg \u003d"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"                    taskList.addTask(new Deadline(secondArg, parseToKiwiDateTime(thirdArg)));"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        } catch (Exception e) {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"            handleException(e);"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        assert !this.commandOutputMsg.isEmpty() : \"empty command output in \" + this.commandName;"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":26}},{"path":"src/main/java/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import exceptions.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"public class DeleteCommand extends CommandWithParameters {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public DeleteCommand(String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(\"delete\", commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            handleNoArgs();"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            handleInvalidOnEmptyList(taskList.isEmpty());"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"            int userInputIdx \u003d Integer.parseInt(this.commandBody);"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"            checkInvalidListIdx(taskList.size(), userInputIdx);"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"            this.commandOutputMsg \u003d taskList.deleteTask(userInputIdx);"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"            handleException(new InvalidArgumentException(\"Please enter a valid task number to delete.\"));"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        } catch (InvalidArgumentException | MissingArgumentException e) {"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"            handleException(e);"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        assert !this.commandOutputMsg.isEmpty() : \"empty command output in \" + this.commandName;"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":34}},{"path":"src/main/java/commands/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import exceptions.InvalidArgumentException;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"public class DoneCommand extends CommandWithParameters {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public DoneCommand(String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(\"done\", commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            handleNoArgs();"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            handleInvalidOnEmptyList(taskList.isEmpty());"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"            int userInputIdx \u003d Integer.parseInt(this.commandBody);"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"            checkInvalidListIdx(taskList.size(), userInputIdx);"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"            this.commandOutputMsg \u003d taskList.markDone(userInputIdx);"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"            handleException(new InvalidArgumentException(\"Please enter a valid task number to mark done.\"));"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        } catch (InvalidArgumentException | MissingArgumentException e) {"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"            handleException(e);"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        assert !this.commandOutputMsg.isEmpty() : \"empty command output in \" + this.commandName;"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":34}},{"path":"src/main/java/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import tasks.Event;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public class EventCommand extends AddTaskWithTimeCommand {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public EventCommand(String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(\"event\", commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"        this.timeArgDelimiter \u003d \"/at\";"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        this.missingThirdArgErrMsg \u003d \"missing date/time argument\";"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"            this.parseCommandBody();"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            this.commandOutputMsg \u003d taskList.addTask("},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"                    new Event(secondArg, parseToKiwiDateTime(thirdArg)));"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        } catch (Exception e) {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"            handleException(e);"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        assert !this.commandOutputMsg.isEmpty() : \"empty command output in \" + this.commandName;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":25}},{"path":"src/main/java/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public class FindCommand extends CommandWithParameters {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public FindCommand(String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(\"find\", commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"            handleNoArgs();"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            this.commandOutputMsg \u003d taskList.findTasks(this.commandBody);"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        } catch (MissingArgumentException e) {"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"            handleException(e);"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":21}},{"path":"src/main/java/commands/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import format.Ui;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public class HelpCommand extends CommandWithNoParameters {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    private final String helpMessage \u003d"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"            Ui.formatMultiLineMessages(\"Here are all the inputs you can enter: \" , // there\u0027s a bug in formatting this"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"                    \"replace words in curly braces as appropriate\" ,"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"                    \"list\" ,"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"                    \"todo {description}\" ,"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"                    \"event {description} /at {DD-MM hh:mm}\" ,"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"                    \"deadline {description} /by {DD-MM hh:mm}\" ,"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"                    \"done {task number}\" ,"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"                    \"delete {task number}\" ,"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"                    \"find {keyword}\","},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"                    \"End of command list.\");"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    public HelpCommand(String commandBody) {"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        super(\"help\", commandBody);"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        this.commandOutputMsg \u003d helpMessage;"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        this.hasRunSuccessfully \u003d true;"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":28}},{"path":"src/main/java/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import format.Ui;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"public class ListCommand extends CommandWithNoParameters {"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    public ListCommand(String commandBody) {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"        super(\"list\", commandBody);"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        if (!commandBody.isEmpty()) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"            handleTooManyArgs();"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"            return;"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        this.commandOutputMsg \u003d Ui.stringifyTaskList(taskList);"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        this.hasRunSuccessfully \u003d true;"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        assert !this.commandOutputMsg.isEmpty() : \"empty command output in \" + this.commandName;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":23}},{"path":"src/main/java/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package commands;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import tasks.Todo;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"public class TodoCommand extends CommandWithParameters {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public TodoCommand(String commandBody) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(\"todo\", commandBody);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void run(TaskList taskList) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":""},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            handleNoArgs();"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"            this.commandOutputMsg \u003d taskList.addTask(new Todo(commandBody));"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        } catch (MissingArgumentException e) {"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"            handleException(e);"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        assert !this.commandOutputMsg.isEmpty() : \"empty command output in \" + this.commandName;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":25}},{"path":"src/main/java/datetime/KiwiDate.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package datetime;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import java.time.LocalDateTime;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":" * Custom date class that wraps a java.time.LocalTime object. Should only be called by KiwiDateTime class."},{"lineNumber":8,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"class KiwiDate {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private final LocalDate date;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    private boolean isEmpty;"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    private KiwiDate(LocalDate ld) {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        this.date \u003d ld;"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    private KiwiDate() {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        this.isEmpty \u003d true;"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        this.date \u003d null;"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"     * Creates a KiwiDate with given day and month, and the current year"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"     * @param day"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"     * @param month"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    public static KiwiDate of(int day, int month) {"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"        if (day \u003d\u003d 0 \u0026\u0026 month \u003d\u003d 0) {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"            return new KiwiDate();"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":""},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        return new KiwiDate(LocalDate.of(LocalDateTime.now().getYear(), month, day));"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    public static KiwiDate of(int day, int month, int year) {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        if (day \u003d\u003d 0 \u0026\u0026 month \u003d\u003d 0) {"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"            return new KiwiDate();"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":""},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        if (year \u003d\u003d 0) {"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"            year \u003d LocalDateTime.now().getYear();"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":""},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        return new KiwiDate(LocalDate.of(year, month, day));"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":""},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"        if (isEmpty) {"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"            return \"\";"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        } else if (date.getYear() \u003d\u003d LocalDate.now().getYear()) {"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"            return String.format(\"%d/%d\","},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"                    date.getDayOfMonth(),"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"                    date.getMonth().getValue());"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"            return String.format(\"%d/%d/%d\","},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"                    date.getDayOfMonth(),"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"                    date.getMonth().getValue(),"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"                    date.getYear());"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":""},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"    String unparse(String delimiter) {"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"        return String.format(\"%d%s%d%s%d\","},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"                this.date.getDayOfMonth(), delimiter, this.date.getMonth().getValue(), delimiter, this.date.getYear());"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":70}},{"path":"src/main/java/datetime/KiwiDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package datetime;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":" * This is a wrapper class for a local kiwiDate kiwiTime object, wrapped with functions that parse"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":" * user input strings to dateTime fields for tasks."},{"lineNumber":6,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"public class KiwiDateTime {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    private final KiwiDate kiwiDate;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    private final KiwiTime kiwiTime;"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private static final String delimiter \u003d \":\"; // needs to not clash with storage delimiter"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public static KiwiDateTime of(int day, int month, int year, int hour, int min) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        return new KiwiDateTime(KiwiDate.of(day, month, year), KiwiTime.of(hour, min));"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        return (kiwiDate + \" \" + kiwiTime).trim();"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    static void print(Object... objects) {"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        for (Object o : objects) {"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"            System.out.println(o);"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    private KiwiDateTime(KiwiDate d, KiwiTime t) {"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        this.kiwiDate \u003d d;"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"        this.kiwiTime \u003d t;"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":""},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"     * Creates a string representation of a KiwiDateTime object to be usable in storage."},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    public String unparse() {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        return String.format(\"%s%s%s\", this.kiwiDate.unparse(delimiter), delimiter, this.kiwiTime.unparse(delimiter));"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     * Converts a string stored in storage to a KiwiDateTime object. Does the opposite of unparse()."},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     * @param strToParse a string from hard disk storage that represents a KiwiDateTime object"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    public static KiwiDateTime parse(String strToParse) {"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        String[] str \u003d strToParse.split(KiwiDateTime.delimiter);"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        int[] values \u003d new int[str.length];"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":""},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"        for (int i \u003d 0; i \u003c str.length; i++) {"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"            values[i] \u003d Integer.parseInt(str[i]);"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":""},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        return KiwiDateTime.of(values[0], values[1], values[2], values[3], values[4]);"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":59}},{"path":"src/main/java/datetime/KiwiTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package datetime;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.time.LocalTime;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":""},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":" * Custom time class that wraps a java.time.LocalTime object. Should only be called by KiwiDateTime class."},{"lineNumber":8,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"public class KiwiTime {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    private LocalTime time;"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private final boolean isEmpty;"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    private boolean isHourOnly;"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    private KiwiTime(int hour, int minute) {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        this.time \u003d LocalTime.of(hour, minute);"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        this.isEmpty \u003d false;"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        checkHourOnly();"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    public static KiwiTime of(int hour, int minute) {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        return new KiwiTime(hour, minute);"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    public static KiwiTime of(int hour) {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        return new KiwiTime(hour, 0);"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":""},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    private void checkHourOnly() {"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"        this.isHourOnly \u003d (this.time.getMinute() \u003d\u003d 0);"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":""},{"lineNumber":32,"author":{"gitId":"pPris"},"content":""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":""},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        DateTimeFormatter f;"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        if (isHourOnly) {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"            f \u003d DateTimeFormatter.ofPattern(\"ha\");"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"            f \u003d DateTimeFormatter.ofPattern(\"h:ma\");"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":""},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"        return this.time.format(f).toLowerCase();"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":""},{"lineNumber":47,"author":{"gitId":"pPris"},"content":""},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    String unparse(String delimiter) {"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        return String.format(\"%d%s%d\", this.time.getHour(), delimiter, this.time.getMinute());"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":""},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":52}},{"path":"src/main/java/datetime/ParseKiwiDateTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package datetime;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.util.HashMap;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import exceptions.MissingArgumentException;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":" * Parses user-inputted date/time arguments into KiwiDateTime objects."},{"lineNumber":10,"author":{"gitId":"pPris"},"content":" * KiwiDateTime is a wrapper class for storing LocalDateTime in this kiwi app."},{"lineNumber":11,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"public class ParseKiwiDateTime {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    // not allowed: \u0027 \u0027"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    private HashMap\u003cString, Integer\u003e dateDelimiters \u003d new HashMap\u003c\u003e();"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    private HashMap\u003cString, Integer\u003e timeDelimiters \u003d new HashMap\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    private int hour;"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    private int min;"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    private int day;"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    private int month;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    private int year;"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    final String MISSING_ARG_ERR_MSG \u003d \"Missing date or time.\";"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    public ParseKiwiDateTime() {"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        initDelimiters();"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":""},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"     * Initialise all recognized delimiters for the Kiwi app"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    public void initDelimiters() {"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        dateDelimiters.put(\"-\", 1);"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        dateDelimiters.put(\"/\", 1);"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        timeDelimiters.put(\":\", 1);"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"     * Parses a user input string into a KiwiDateTime object. Is the main driver of this class."},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * @throws MissingArgumentException"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    public KiwiDateTime parse(String input) throws MissingArgumentException {"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        resetVars();"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":""},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        String[] inputs \u003d input.split(\" \");"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":""},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"        if (inputs.length \u003d\u003d 3) {"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"            parse3InputStrs(inputs);"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        } else if (inputs.length \u003d\u003d 2) {"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"            parse2InputStrs(inputs);"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        } else if (inputs.length \u003d\u003d 1) {"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"            throw new MissingArgumentException(MISSING_ARG_ERR_MSG);"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"        return createKiwiDateTimeObj();"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":""},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"    private void resetVars() {"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"        this.day \u003d 0;"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        this.month \u003d 0;"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        this.hour \u003d 0;"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"        this.min \u003d 0;"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"        this.year \u003d 0;"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":""},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"    private KiwiDateTime createKiwiDateTimeObj() {"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"        return KiwiDateTime.of(this.day, this.month, this.year, this.hour, this.min);"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":""},{"lineNumber":73,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"     * Parses three input strings that were delimited by a space by the user. This exists because"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"     * 2 of the three spaced strings describe time and need to be parsed together."},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"     * @param inputs"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"    private void parse3InputStrs(String[] inputs) throws MissingArgumentException {"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"        if (isAmPm(inputs[1])) { // inputs are: time AM/PM date"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"            parse12hTimeString(inputs[0], inputs[1]);"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"            parseDateString(inputs[2]);"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"        } else if (isAmPm(inputs[2])) { // inputs are: date time AM/PM"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"            parseDateString(inputs[0]);"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"            parse12hTimeString(inputs[1], inputs[2]);"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"            throw new MissingArgumentException(MISSING_ARG_ERR_MSG);"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"pPris"},"content":""},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"     * Parses two input strings that were delimited by a space by the user. This exists because"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"     * the two spaced strings may both describe time and need to be parsed together."},{"lineNumber":94,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"     * @param inputs"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"    private void parse2InputStrs(String[] inputs) throws MissingArgumentException {"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"        if (isAmPm(inputs[1])) { // inputs are: time AM/PM"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"            parse12hTimeString(inputs[0], inputs[1]);"},{"lineNumber":100,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":101,"author":{"gitId":"pPris"},"content":""},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"        // check if one input string is a date and the other is either a 12h or 24h time input"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"        if (isDateString(inputs[0]) \u0026\u0026 isUnspaced12hTimeString(inputs[1])) {"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"            parseDateString(inputs[0]);"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"            parseUnspaced12hTimeString(inputs[1]);"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":""},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"        } else if (isDateString(inputs[1]) \u0026\u0026 isUnspaced12hTimeString(inputs[0])) {"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"            parseDateString(inputs[1]);"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"            parseUnspaced12hTimeString(inputs[0]);"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":""},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"        } else if (isDateString(inputs[0]) \u0026\u0026 is24hTimeString(inputs[1])) {"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"            parseDateString(inputs[0]);"},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"            parse24hTimeString(inputs[1]);"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":""},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"        } else if (isDateString(inputs[1]) \u0026\u0026 is24hTimeString(inputs[0])) {"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"            parseDateString(inputs[1]);"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"            parse24hTimeString(inputs[0]);"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":""},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":120,"author":{"gitId":"pPris"},"content":"            throw new MissingArgumentException(MISSING_ARG_ERR_MSG);"},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"pPris"},"content":""},{"lineNumber":124,"author":{"gitId":"pPris"},"content":"    private boolean isDateAnd24hTimeString(String str1, String str2) {"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":"        return isDateString(str1) \u0026\u0026 isUnspaced12hTimeString(str2);"},{"lineNumber":126,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"pPris"},"content":""},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"    private boolean isAmPm(String input) {"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"        return input.equalsIgnoreCase(\"am\") || input.equalsIgnoreCase(\"pm\");"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":131,"author":{"gitId":"pPris"},"content":""},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"     * Is only for 24h timestring"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"    private void parse24hTimeString(String input) {"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"        // assume input is of format hourDelimiterMinute"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"        String t \u003d findTimeDelimiter(input);"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"        String[] parts \u003d input.split(t);"},{"lineNumber":141,"author":{"gitId":"pPris"},"content":""},{"lineNumber":142,"author":{"gitId":"pPris"},"content":"        this.hour \u003d Integer.parseInt(parts[0]);"},{"lineNumber":143,"author":{"gitId":"pPris"},"content":"        this.min \u003d Integer.parseInt(parts[1]);"},{"lineNumber":144,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":145,"author":{"gitId":"pPris"},"content":""},{"lineNumber":146,"author":{"gitId":"pPris"},"content":"    private void parseUnspaced12hTimeString(String input) {"},{"lineNumber":147,"author":{"gitId":"pPris"},"content":"        int indexOfAmOrPm \u003d Math.max(input.toLowerCase().indexOf(\"am\"), input.toLowerCase().indexOf(\"pm\"));"},{"lineNumber":148,"author":{"gitId":"pPris"},"content":""},{"lineNumber":149,"author":{"gitId":"pPris"},"content":"        parse12hTimeString("},{"lineNumber":150,"author":{"gitId":"pPris"},"content":"                input.substring(0, indexOfAmOrPm).trim(),"},{"lineNumber":151,"author":{"gitId":"pPris"},"content":"                input.substring(indexOfAmOrPm).trim()"},{"lineNumber":152,"author":{"gitId":"pPris"},"content":"        );"},{"lineNumber":153,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":154,"author":{"gitId":"pPris"},"content":""},{"lineNumber":155,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":156,"author":{"gitId":"pPris"},"content":"     * Initialises this.hour and this.minute from two strings that make up a valid 12h format."},{"lineNumber":157,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":158,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":159,"author":{"gitId":"pPris"},"content":"     * @param amPm"},{"lineNumber":160,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":161,"author":{"gitId":"pPris"},"content":"    private void parse12hTimeString(String input, String amPm) {"},{"lineNumber":162,"author":{"gitId":"pPris"},"content":"        // input string may contain a single integer to represent the hour, or the input string is"},{"lineNumber":163,"author":{"gitId":"pPris"},"content":"        // essentially a 24h time string excluding the \"am\" or \"pm\""},{"lineNumber":164,"author":{"gitId":"pPris"},"content":"        if (isHourOnly(input)) {"},{"lineNumber":165,"author":{"gitId":"pPris"},"content":"            this.hour \u003d Integer.parseInt(input);"},{"lineNumber":166,"author":{"gitId":"pPris"},"content":"        } else {"},{"lineNumber":167,"author":{"gitId":"pPris"},"content":"            parse24hTimeString(input);"},{"lineNumber":168,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":169,"author":{"gitId":"pPris"},"content":""},{"lineNumber":170,"author":{"gitId":"pPris"},"content":"        assert isAmPm(amPm);"},{"lineNumber":171,"author":{"gitId":"pPris"},"content":""},{"lineNumber":172,"author":{"gitId":"pPris"},"content":"        if (amPm.equalsIgnoreCase(\"pm\")) {"},{"lineNumber":173,"author":{"gitId":"pPris"},"content":"            this.hour +\u003d 12;"},{"lineNumber":174,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":175,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":176,"author":{"gitId":"pPris"},"content":""},{"lineNumber":177,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":178,"author":{"gitId":"pPris"},"content":"     * Initialises this.day, this.month and this.year based on a valid input string."},{"lineNumber":179,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":180,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":181,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":182,"author":{"gitId":"pPris"},"content":"    private void parseDateString(String input) {"},{"lineNumber":183,"author":{"gitId":"pPris"},"content":"        String d \u003d findDateDelimiter(input);"},{"lineNumber":184,"author":{"gitId":"pPris"},"content":"        String[] parts \u003d input.split(d);"},{"lineNumber":185,"author":{"gitId":"pPris"},"content":""},{"lineNumber":186,"author":{"gitId":"pPris"},"content":"        // assumption: day comes before month"},{"lineNumber":187,"author":{"gitId":"pPris"},"content":"        this.day \u003d Integer.parseInt(parts[0]);"},{"lineNumber":188,"author":{"gitId":"pPris"},"content":"        this.month \u003d Integer.parseInt(parts[1]);"},{"lineNumber":189,"author":{"gitId":"pPris"},"content":""},{"lineNumber":190,"author":{"gitId":"pPris"},"content":"        if (parts.length \u003d\u003d 3) {"},{"lineNumber":191,"author":{"gitId":"pPris"},"content":"            this.year \u003d Integer.parseInt(parts[2]);"},{"lineNumber":192,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":193,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":194,"author":{"gitId":"pPris"},"content":""},{"lineNumber":195,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":196,"author":{"gitId":"pPris"},"content":"     * Detects if a string containing no spaces contains a 12h time format containing the phrase \u0027am\u0027 or \u0027pm\u0027."},{"lineNumber":197,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":198,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":199,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":200,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"pPris"},"content":"    private boolean isUnspaced12hTimeString(String input) {"},{"lineNumber":202,"author":{"gitId":"pPris"},"content":"        return input.toLowerCase().contains(\"am\") || input.toLowerCase().contains(\"pm\");"},{"lineNumber":203,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":204,"author":{"gitId":"pPris"},"content":""},{"lineNumber":205,"author":{"gitId":"pPris"},"content":""},{"lineNumber":206,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":207,"author":{"gitId":"pPris"},"content":"     * Finds a recognized date delimiter in the string provided"},{"lineNumber":208,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":209,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":210,"author":{"gitId":"pPris"},"content":"     * @return delimiter found in string, empty string if none matched"},{"lineNumber":211,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":212,"author":{"gitId":"pPris"},"content":"    private String findDateDelimiter(String input) {"},{"lineNumber":213,"author":{"gitId":"pPris"},"content":"        for (String d : dateDelimiters.keySet()) {"},{"lineNumber":214,"author":{"gitId":"pPris"},"content":"            if (input.contains(d)) {"},{"lineNumber":215,"author":{"gitId":"pPris"},"content":"                return d;"},{"lineNumber":216,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":218,"author":{"gitId":"pPris"},"content":"        return \"\";"},{"lineNumber":219,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":220,"author":{"gitId":"pPris"},"content":""},{"lineNumber":221,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":222,"author":{"gitId":"pPris"},"content":"     * Finds a recognized time delimiter in the string provided"},{"lineNumber":223,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":224,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":225,"author":{"gitId":"pPris"},"content":"     * @return delimiter found in string, empty string if none matched"},{"lineNumber":226,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":227,"author":{"gitId":"pPris"},"content":"    private String findTimeDelimiter(String input) {"},{"lineNumber":228,"author":{"gitId":"pPris"},"content":"        for (String d : timeDelimiters.keySet()) {"},{"lineNumber":229,"author":{"gitId":"pPris"},"content":"            if (input.contains(d)) {"},{"lineNumber":230,"author":{"gitId":"pPris"},"content":"                return d;"},{"lineNumber":231,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":232,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":233,"author":{"gitId":"pPris"},"content":"        return \"\";"},{"lineNumber":234,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"pPris"},"content":""},{"lineNumber":236,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"pPris"},"content":"     * Returns true if formatted with a recognized date delimiter"},{"lineNumber":238,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":239,"author":{"gitId":"pPris"},"content":"     * @param input"},{"lineNumber":240,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":241,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":242,"author":{"gitId":"pPris"},"content":"    private boolean isDateString(String input) {"},{"lineNumber":243,"author":{"gitId":"pPris"},"content":"        String d \u003d findDateDelimiter(input);"},{"lineNumber":244,"author":{"gitId":"pPris"},"content":"        return !d.isEmpty();"},{"lineNumber":245,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":246,"author":{"gitId":"pPris"},"content":""},{"lineNumber":247,"author":{"gitId":"pPris"},"content":"    private boolean is24hTimeString(String input) {"},{"lineNumber":248,"author":{"gitId":"pPris"},"content":"        String d \u003d findTimeDelimiter(input);"},{"lineNumber":249,"author":{"gitId":"pPris"},"content":"        return !d.isEmpty();"},{"lineNumber":250,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":251,"author":{"gitId":"pPris"},"content":""},{"lineNumber":252,"author":{"gitId":"pPris"},"content":"    private boolean isHourOnly(String input) {"},{"lineNumber":253,"author":{"gitId":"pPris"},"content":"        String d \u003d findTimeDelimiter(input);"},{"lineNumber":254,"author":{"gitId":"pPris"},"content":"        return d.isEmpty();"},{"lineNumber":255,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":256,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":256}},{"path":"src/main/java/exceptions/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public class InvalidArgumentException extends Exception {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"     * Invalid argument exception for e.g. when an inapplicable command is used on an empty list"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"     * @param errMsg Error message to display"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public InvalidArgumentException(String errMsg) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(errMsg);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":11}},{"path":"src/main/java/exceptions/MissingArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public class MissingArgumentException extends Exception {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"     * Create missing argument exception with an error message"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"     * @param errorMessage"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    public MissingArgumentException(String errorMessage) {"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"        super(errorMessage);"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":11}},{"path":"src/main/java/exceptions/UnsupportedCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package exceptions;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public class UnsupportedCommandException extends Exception {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"     * Throws unsupported command exception with default message"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    public UnsupportedCommandException() {"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"        super(\"I don\u0027t recognise this command. Please try something else or enter help.\");"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"}"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""}],"authorContributionMap":{"pPris":12}},{"path":"src/main/java/format/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package format;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    // formatting for print messages"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"    public static final String EXTRA_INDENT \u003d \"  \";"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    private static final String DIVIDER_LINE \u003d \"    ______________________________________________\";"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    private static final String DEFAULT_INDENT \u003d \"      \";"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"     * Helper method to format chat bot responses"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"     * @param messages An array containing all messages to print in response to one command"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    public static void print(String[] messages) {"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        System.out.println(DIVIDER_LINE);"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        for (String message : messages) {"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"            System.out.println(DEFAULT_INDENT + message);"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        System.out.println(DIVIDER_LINE);"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"     * Provides a string with a formatted intro message"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    public static String introMessage() {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        String logo \u003d \" ______\\n\""},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"                + \"/______\\\\ Kiwi\u0027s\\n\""},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"                + \"|______|     Inn\\n\""},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"                + \"####################\\n\";"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        // intro message"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"        return logo + indent(\"Welcome, traveller. I\u0027m Kiwi.\","},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"                \"What would you like to do today?\","},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"                \"Psst if you\u0027re unsure you can type \u0027help\u0027.\");"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":""},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"     * Helper method to format error messages"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"     * @param errMsg A message to print in response to one command"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    public static String formatException(String errMsg) {"},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"        String s \u003d \"Oops, Kiwi couldn\u0027t process that.\";"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        return addDividers("},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"                indent(s, addExtraIndent(errMsg)));"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":""},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"    public static String getExitMessage() {"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        return formatSingleLineMsg(\"Bye. See you again soon!\");"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":""},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"     * Adds intends to each string provided as argument"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"     * @param messages Objects whose toString need to be displayed on the gui"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"    private static String indent(Object... messages) {"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"        String res \u003d \"\";"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"        for (Object s : messages) {"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"            res +\u003d DEFAULT_INDENT;"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"            res +\u003d s;"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"            res +\u003d \u0027\\n\u0027;"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"        return res;"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":""},{"lineNumber":74,"author":{"gitId":"pPris"},"content":""},{"lineNumber":75,"author":{"gitId":"pPris"},"content":"    private static String addExtraIndent(Object... messages) {"},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"        String res \u003d \"\";"},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"        for (Object s : messages) {"},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"            res +\u003d EXTRA_INDENT;"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"            res +\u003d s;"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"            res +\u003d \u0027\\n\u0027;"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"pPris"},"content":"        return res;"},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":""},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"    private static String addDividers(String message) {"},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"        // assumption is that individual lines of messages already have been indented and have line breaks"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"        return DIVIDER_LINE + \u0027\\n\u0027 + message + DIVIDER_LINE;"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":""},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"     * Formats messages that span multi-lines"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"     * @param firstLine"},{"lineNumber":94,"author":{"gitId":"pPris"},"content":"     * @param moreIndentedLines"},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"    public static String formatMultiLineMessages(String firstLine, Object... moreIndentedLines) {"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"        return addDividers(indent(firstLine, addExtraIndent(moreIndentedLines)));"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":100,"author":{"gitId":"pPris"},"content":""},{"lineNumber":101,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":102,"author":{"gitId":"pPris"},"content":"     * Formats a single line message"},{"lineNumber":103,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":104,"author":{"gitId":"pPris"},"content":"     * @param firstLine"},{"lineNumber":105,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":106,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"pPris"},"content":"    public static String formatSingleLineMsg(String firstLine) {"},{"lineNumber":108,"author":{"gitId":"pPris"},"content":"        return addDividers(indent(firstLine));"},{"lineNumber":109,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":110,"author":{"gitId":"pPris"},"content":""},{"lineNumber":111,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":112,"author":{"gitId":"pPris"},"content":"     * Formats a task list into a string for easy displaying."},{"lineNumber":113,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":114,"author":{"gitId":"pPris"},"content":"     * @param taskList"},{"lineNumber":115,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":116,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":117,"author":{"gitId":"pPris"},"content":"    public static String stringifyTaskList(TaskList taskList) {"},{"lineNumber":118,"author":{"gitId":"pPris"},"content":"        String s \u003d \"\";"},{"lineNumber":119,"author":{"gitId":"pPris"},"content":"        String nl \u003d \"\\n\";"},{"lineNumber":120,"author":{"gitId":"pPris"},"content":"        s +\u003d (DIVIDER_LINE);"},{"lineNumber":121,"author":{"gitId":"pPris"},"content":"        s +\u003d nl;"},{"lineNumber":122,"author":{"gitId":"pPris"},"content":""},{"lineNumber":123,"author":{"gitId":"pPris"},"content":"        s +\u003d (DEFAULT_INDENT + \"Your tasks:\");"},{"lineNumber":124,"author":{"gitId":"pPris"},"content":"        s +\u003d nl;"},{"lineNumber":125,"author":{"gitId":"pPris"},"content":""},{"lineNumber":126,"author":{"gitId":"pPris"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {"},{"lineNumber":127,"author":{"gitId":"pPris"},"content":"            s +\u003d (EXTRA_INDENT);"},{"lineNumber":128,"author":{"gitId":"pPris"},"content":"            s +\u003d (DEFAULT_INDENT + (i + 1) + \".\" + taskList.get(i));"},{"lineNumber":129,"author":{"gitId":"pPris"},"content":"            s +\u003d nl;"},{"lineNumber":130,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"pPris"},"content":""},{"lineNumber":132,"author":{"gitId":"pPris"},"content":"        s +\u003d nl;"},{"lineNumber":133,"author":{"gitId":"pPris"},"content":"        s +\u003d (DEFAULT_INDENT + \"You have \" + taskList.size() + \" tasks. \");"},{"lineNumber":134,"author":{"gitId":"pPris"},"content":"        s +\u003d nl;"},{"lineNumber":135,"author":{"gitId":"pPris"},"content":""},{"lineNumber":136,"author":{"gitId":"pPris"},"content":"        s +\u003d (DIVIDER_LINE);"},{"lineNumber":137,"author":{"gitId":"pPris"},"content":"        s +\u003d nl;"},{"lineNumber":138,"author":{"gitId":"pPris"},"content":"        return s;"},{"lineNumber":139,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":140,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":140}},{"path":"src/main/java/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package tasklist;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import exceptions.InvalidArgumentException;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import format.Ui;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import tasks.Task;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":" * TaskList class that abstracts away arrayList that contains tasks and all task operations in this app."},{"lineNumber":12,"author":{"gitId":"pPris"},"content":" * Most error checking is handled before calling the functions here, but formatting using Ui functions"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":" * are still done in this class\u0027 methods."},{"lineNumber":14,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"public class TaskList {"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    private final ArrayList\u003cTask\u003e taskArrayList;"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    public TaskList() {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        this.taskArrayList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    public void add(Task t) {"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        this.taskArrayList.add(t);"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    public int size() {"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        return this.taskArrayList.size();"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":""},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    public Task get(int i) {"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"        return this.taskArrayList.get(i);"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":""},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    public boolean isEmpty() {"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        return this.taskArrayList.isEmpty();"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":""},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"     * Adds task to array list and prints success message with task details"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"     * @param t task object to add"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    public String addTask(Task t) {"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        taskArrayList.add(t);"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":""},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"        return Ui.formatMultiLineMessages("},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"                \"Success! I\u0027ve added this task:\","},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"                t.toString()"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"        );"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":""},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"     * Deletes a task in the list"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"     * @param i index of task to be deleted"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"    public String deleteTask(int i) {"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        return Ui.formatMultiLineMessages("},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"                \"Got you. I\u0027ve deleted this task:\","},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"                taskArrayList.remove(i - 1)"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"        );"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":""},{"lineNumber":65,"author":{"gitId":"pPris"},"content":""},{"lineNumber":66,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"pPris"},"content":"     * Marks a task in the list done"},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"pPris"},"content":"     * @param i index of task to mark done"},{"lineNumber":70,"author":{"gitId":"pPris"},"content":"     * @throws InvalidArgumentException"},{"lineNumber":71,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":72,"author":{"gitId":"pPris"},"content":"    public String markDone(int i) {"},{"lineNumber":73,"author":{"gitId":"pPris"},"content":""},{"lineNumber":74,"author":{"gitId":"pPris"},"content":"        taskArrayList.get(i - 1).markAsDone();"},{"lineNumber":75,"author":{"gitId":"pPris"},"content":""},{"lineNumber":76,"author":{"gitId":"pPris"},"content":"        return Ui.formatMultiLineMessages("},{"lineNumber":77,"author":{"gitId":"pPris"},"content":"                \"Good work! I\u0027ve marked this task done:\","},{"lineNumber":78,"author":{"gitId":"pPris"},"content":"                taskArrayList.get(i - 1)"},{"lineNumber":79,"author":{"gitId":"pPris"},"content":"        );"},{"lineNumber":80,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"pPris"},"content":""},{"lineNumber":82,"author":{"gitId":"pPris"},"content":""},{"lineNumber":83,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"pPris"},"content":"     * Finds tasks whose description match a user-inputted string, and prints all"},{"lineNumber":85,"author":{"gitId":"pPris"},"content":"     * matching tasks."},{"lineNumber":86,"author":{"gitId":"pPris"},"content":"     *"},{"lineNumber":87,"author":{"gitId":"pPris"},"content":"     * @param s Search keyword, inputted by user"},{"lineNumber":88,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":89,"author":{"gitId":"pPris"},"content":"    public String findTasks(String s) {"},{"lineNumber":90,"author":{"gitId":"pPris"},"content":"        TaskList filtered \u003d new TaskList();"},{"lineNumber":91,"author":{"gitId":"pPris"},"content":"        for (Task t : taskArrayList) {"},{"lineNumber":92,"author":{"gitId":"pPris"},"content":"            if (t.getDescription().contains(s)) {"},{"lineNumber":93,"author":{"gitId":"pPris"},"content":"                filtered.add(t);"},{"lineNumber":94,"author":{"gitId":"pPris"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"pPris"},"content":"        }"},{"lineNumber":96,"author":{"gitId":"pPris"},"content":""},{"lineNumber":97,"author":{"gitId":"pPris"},"content":"        return Ui.stringifyTaskList(filtered);"},{"lineNumber":98,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":99}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static java.lang.Boolean.parseBoolean;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import datetime.KiwiDateTime;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":" * Represents a task with a deadline."},{"lineNumber":10,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    private final KiwiDateTime deadlineDateTime; // need a better name, but also cannot confuse with the class name"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"     * Creates a deadline object"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"     * @param desc description of the deadline object"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     * @param deadlineDateTime date/time that the deadline task is due"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    public Deadline(String desc, KiwiDateTime deadlineDateTime) {"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        this.deadlineDateTime \u003d deadlineDateTime;"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":""},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    // used when parsing deadline task from stored file"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    private Deadline(String desc, KiwiDateTime deadlineDateTime, boolean isDone) {"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        super(desc, isDone);"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        this.deadlineDateTime \u003d (deadlineDateTime);"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":""},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"     * Returns a string representation of a deadline task"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"     * @return String representation of a deadline"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        return \"[D][\" + getStatusIcon() + \"] \" + description"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"                + \" (by: \" + deadlineDateTime + \")\";"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":""},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    public String unparse() {"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"        return \"D\" + STORAGE_DELIMITER + description + STORAGE_DELIMITER + isDone"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"                + STORAGE_DELIMITER + deadlineDateTime.unparse() + System.lineSeparator();"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":""},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"     * Creates a deadline object based on the string stored in the hard disk."},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"     * @param oneLine One line of stored input to be parsed into a deadline"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"     * @return tasks.Deadline Object"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    public static Deadline parse(String oneLine) {"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        assert oneLine.startsWith(\"D\" + STORAGE_DELIMITER);"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":""},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        // split string into different fields"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        String[] fields \u003d oneLine.split(STORAGE_DELIMITER);"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"        assert fields.length \u003d\u003d 3 + 1 : \"deadline storage parser detecting fewer than needed fields\";"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        // fields for deadline object"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"        boolean isDone \u003d parseBoolean(fields[2]);"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"        String desc \u003d fields[1];"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":"        KiwiDateTime dt \u003d KiwiDateTime.parse(fields[3]);"},{"lineNumber":63,"author":{"gitId":"pPris"},"content":""},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"        return new Deadline(desc, dt, isDone);"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"pPris"},"content":""},{"lineNumber":67,"author":{"gitId":"pPris"},"content":""},{"lineNumber":68,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":68}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static java.lang.Boolean.parseBoolean;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import datetime.KiwiDateTime;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":" * This class implements a type of task that users can add to their tasklist on this app."},{"lineNumber":9,"author":{"gitId":"pPris"},"content":" * The event task has an event-specific variable, event timing."},{"lineNumber":10,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    private final KiwiDateTime eventTiming;"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":""},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"     * Public constructor which is used when parsing user inputted command"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"     * \"event {desc} /at {timing}\"."},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"     * @param desc"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"     * @param eventTiming"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    public Event(String desc, KiwiDateTime eventTiming) {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        this.eventTiming \u003d eventTiming;"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    // used when parsing event task from stored file"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    private Event(String desc, KiwiDateTime eventTiming, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        super(desc, isDone);"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        this.eventTiming \u003d (eventTiming);"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":""},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"     * Returns a string representation of an event task"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"     * @return String representation of an event"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        return \"[E][\" + getStatusIcon() + \"] \" + description"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"                + \" (at: \" + eventTiming + \")\";"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":""},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    public String unparse() {"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"        return \"E\" + STORAGE_DELIMITER + description + STORAGE_DELIMITER + isDone"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"                + STORAGE_DELIMITER + eventTiming.unparse() + System.lineSeparator();"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":""},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"     * Creates an event object based on the string stored in the hard disk."},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"     * Example stored string for this class: \"//E;;desc;;true;;timing\"."},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"     * @param oneLine One line of stored input to be parsed into a deadline"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"     * @return tasks.Event Object"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":"    public static Event parse(String oneLine) {"},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"        assert oneLine.startsWith(\"E\" + STORAGE_DELIMITER);"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":""},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"        String[] fields \u003d oneLine.split(STORAGE_DELIMITER);"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"        assert fields.length \u003d\u003d 3 + 1 : // 3 + 1 bc command name, desc, done, time - much hardcoding"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"                \"storage parser detecting fewer than needed event arguments\";"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":""},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"        String desc \u003d fields[1];"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"        boolean isDone \u003d parseBoolean(fields[2]);"},{"lineNumber":61,"author":{"gitId":"pPris"},"content":"        KiwiDateTime dt \u003d KiwiDateTime.parse(fields[3]);"},{"lineNumber":62,"author":{"gitId":"pPris"},"content":""},{"lineNumber":63,"author":{"gitId":"pPris"},"content":"        return new Event(desc, dt, isDone);"},{"lineNumber":64,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":65}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public abstract class Task {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"    protected static final String STORAGE_DELIMITER \u003d \";;\";"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    protected final String description;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"     * Creates simple task with one field"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"     * @param description A string describing the task"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    public Task(String description) {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d false;"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"     * Constructor used by parsing functions when saving from hard drive"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"     * @param desc task description"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"     * @param isDone completion status of task"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    protected Task(String desc, Boolean isDone) {"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        this.description \u003d desc;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":""},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"     * Gets the symbol that represents if the object is completed."},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"     * @return A string that represents if the task is completed or not."},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    protected String getStatusIcon() {"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        return (isDone ? \"/\" : \" \");"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":""},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"     * Marks the task as done so that a done symbol shows up in the task\u0027s toString."},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    public void markAsDone() {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        this.isDone \u003d true;"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":""},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":""},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"     * Formats a string representing the task object to be saved to the hard drive."},{"lineNumber":49,"author":{"gitId":"pPris"},"content":"     * @return String representation of task object for storage file"},{"lineNumber":50,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"pPris"},"content":"    public abstract String unparse();"},{"lineNumber":52,"author":{"gitId":"pPris"},"content":""},{"lineNumber":53,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"pPris"},"content":"     * Description asked for tasklist.find"},{"lineNumber":55,"author":{"gitId":"pPris"},"content":"     * @return"},{"lineNumber":56,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"pPris"},"content":"    public String getDescription() {"},{"lineNumber":58,"author":{"gitId":"pPris"},"content":"        return description;"},{"lineNumber":59,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":60}},{"path":"src/main/java/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package tasks;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static java.lang.Boolean.parseBoolean;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":" * This class implements a type of task that users can add to their tasklist on this app."},{"lineNumber":7,"author":{"gitId":"pPris"},"content":" * The task has no variable specific to it that is of interest to the user (unlike event"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":" * that has an eventTiming variable)."},{"lineNumber":9,"author":{"gitId":"pPris"},"content":" */"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"public class Todo extends Task {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private static final String taskType \u003d \"T\";"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public Todo(String desc) {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        super(desc);"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    // only used by parsing function"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    private Todo(String desc, Boolean isDone) {"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        super(desc, isDone);"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        return \"[T][\" + getStatusIcon() + \"] \" + description;"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":""},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    @Override"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    public String unparse() {"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        return \"T\" + STORAGE_DELIMITER + description + STORAGE_DELIMITER + isDone + System.lineSeparator();"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":""},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"     * Creates a todo object based on the string stored in the hard disk."},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"     * @param oneLine One line of stored input to be parsed into a todo"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"     * @return todo Object"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"    public static Todo parse(String oneLine) {"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"        assert oneLine.startsWith(\"T\" + STORAGE_DELIMITER);"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        String[] args \u003d oneLine.split(STORAGE_DELIMITER);"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":""},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        boolean isDone \u003d parseBoolean(args[2]);"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":""},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        return new Todo(args[1], isDone);"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":45}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"        \u003cLabel fx:id\u003d\"dialog\" minHeight\u003d\"-Infinity\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"pPris":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"pPris":19}},{"path":"src/test/java/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import datetime.KiwiDateTime;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import tasks.Event;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import tasks.Todo;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"public class TaskListTest {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    public void taskListChecking() {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"        TaskList t \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        t.add(new Todo(\"test todo 1\"));"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        t.add(new Todo(\"test todo 2\"));"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        t.add(new Event(\"test\", KiwiDateTime.of(2,3,2021, 15,41)));"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        t.deleteTask(2);"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        assertEquals(t.size(), 2);"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":21}},{"path":"src/test/java/command/ByeCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import commands.ByeCommand;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"public class ByeCommandTest {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    private TaskList dummyTaskList \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void testByeSentExitSignal() {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        ByeCommand b \u003d new ByeCommand(\"\");"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        b.run(dummyTaskList);"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        assertEquals(true, b.hasSentExitDukeSignal());"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":""},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    public void runBye() {"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"        ByeCommand b \u003d new ByeCommand(\"\");"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        b.run(dummyTaskList);"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        assertEquals(true, b.hasRunSuccessfully());"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":25}},{"path":"src/test/java/command/DeadlineCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import commands.Command;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import commands.DeadlineCommand;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":""},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"public class DeadlineCommandTest {"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"    private TaskList dummyTaskList \u003d new TaskList();"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":""},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    public void testMissingArgs() {"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        String s \u003d \"junit test /by 30-04 6PM\";"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        Command c \u003d new DeadlineCommand(s);"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        assertEquals(true, c.hasRunSuccessfully());"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    void testMissingTimeInfo() {"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        String s \u003d \"junit test /by\";"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        Command c \u003d new DeadlineCommand(s);"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasRunSuccessfully());"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":""},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    public void testMissingDelimiter() {"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"        String s \u003d \"junit test 30-04 6PM\";"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        Command c \u003d new DeadlineCommand(s);"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasRunSuccessfully());"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":""},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    public void testMissingDesc() {"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"        String s \u003d \"/by 30-04 6PM\";"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        Command c \u003d new DeadlineCommand(s);"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"        c.debug();"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasRunSuccessfully());"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":45}},{"path":"src/test/java/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"public class DeleteCommandTest {"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":4}},{"path":"src/test/java/command/EventCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":""},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import commands.Command;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"import commands.DeadlineCommand;"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import commands.EventCommand;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":""},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"public class EventCommandTest {"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    private TaskList dummyTaskList \u003d new TaskList();"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":""},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"    public void testMissingArgs() {"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        String s \u003d \"event junit test /at 30-04 6PM\";"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"        Command c \u003d new EventCommand(s);"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"        assertEquals(true, c.hasRunSuccessfully());"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":""},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"    void testMissingTimeInfo() {"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        String s \u003d \"event junit test /at\";"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"        Command c \u003d new EventCommand(s);"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasRunSuccessfully());"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":""},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"    public void testMissingDelimiter() {"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"        String s \u003d \"event junit test 30-04 6PM\";"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"        Command c \u003d new EventCommand(s);"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasRunSuccessfully());"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":""},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"    public void testMissingDesc() {"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"        String s \u003d \"/at 30-04 6PM\";"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"        Command c \u003d new EventCommand(s);"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"        c.debug();"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasRunSuccessfully());"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":47}},{"path":"src/test/java/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"package command;"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":""},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"import commands.ListCommand;"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"import tasklist.TaskList;"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":""},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"public class ListCommandTest {"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"    private TaskList dummyTaskList \u003d new TaskList();"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    public void runListNoArgs() {"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"        ListCommand c \u003d new ListCommand(\"\");"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        assertEquals(true, c.hasRunSuccessfully());"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasSentExitDukeSignal());"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":""},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"    @Test"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    public void runListWithArgs() {"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"        ListCommand c \u003d new ListCommand(\"hjkdhjsda\");"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"        c.run(dummyTaskList);"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasRunSuccessfully());"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"        assertEquals(false, c.hasSentExitDukeSignal());"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"}"}],"authorContributionMap":{"pPris":27}},{"path":"text-ui-test/expectedL8.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":" ______"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"/______\\ Kiwi\u0027s"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"|______|     Inn"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"####################"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"      Welcome, traveller. I\u0027m Kiwi."},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"      What would you like to do today?"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"      Your tasks:"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":""},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"      You have 0 tasks. "},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"        [E][ ] 2101 meeting (at: 30 Jun 6PM)"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"        [T][ ] cycling"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":32,"author":{"gitId":"pPris"},"content":"        [D][ ] drawing (by: 28 Feb 7AM)"},{"lineNumber":33,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":34,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":35,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":36,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":37,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":38,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":39,"author":{"gitId":"pPris"},"content":"      Success. I\u0027ve added this task:"},{"lineNumber":40,"author":{"gitId":"pPris"},"content":"        [E][ ] 2101 meeting (at: 30 Jun 8AM)"},{"lineNumber":41,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":42,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":43,"author":{"gitId":"pPris"},"content":"      Oops, error occurred in saving the file."},{"lineNumber":44,"author":{"gitId":"pPris"},"content":"      C:\\Users\\ppris\\OneDrive\\everything uni related\\modules\\cs2103T\\ip\\text-ui-test\\src\\data\\tasks.txt (The system cannot find the path specified)"},{"lineNumber":45,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":46,"author":{"gitId":"pPris"},"content":"    ______________________________________________"},{"lineNumber":47,"author":{"gitId":"pPris"},"content":"      Bye. See you again soon!"},{"lineNumber":48,"author":{"gitId":"pPris"},"content":"    ______________________________________________"}],"authorContributionMap":{"pPris":48}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"todo read book"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"deadline return book /by Sunday"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"event project meeting /at Mon 2-4pm"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"deadline do homework /by no idea :-p"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"todo tea"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"todo"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"deadline coffee /by 4pm"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"deadline /by 4pm"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"deadline coffee"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"deadline"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"tasks.Deadline"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"event read books /at 4-6pm monday"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"event /at 4-6pm monday"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"event read books"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"event"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"done"},{"lineNumber":24,"author":{"gitId":"pPris"},"content":"blah"},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"task 1"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"task 2 3"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"delete 0"},{"lineNumber":29,"author":{"gitId":"pPris"},"content":"delete 5"},{"lineNumber":30,"author":{"gitId":"pPris"},"content":"delete 19"},{"lineNumber":31,"author":{"gitId":"pPris"},"content":"bye"}],"authorContributionMap":{"pPris":31}},{"path":"text-ui-test/inputL8.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"event 2101 meeting /at 30-06 6PM"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"todo cycling"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"deadline drawing /by 28-02 7AM"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"event 2101 meeting /at 30-06 8AM"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"bye"}],"authorContributionMap":{"pPris":6}},{"path":"text-ui-test/runtemptest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"REM THIS FILE IS CREATED FOR TEMPORARY TESTING PURPOSES WHILE DOING A LEVEL"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":""},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":""},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"REM delete output from previous run"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":""},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"REM compile the code into the bin folder"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"    exit /b 1"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":")"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":""},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"java -classpath ..\\bin Duke \u003c scratch.txt"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":""},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"REM compare the output to the expected output"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"REM FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"pPris":22}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"REM REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"REM java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"REM"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"REM REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":"REM FC ACTUAL.TXT EXPECTED.TXT"},{"lineNumber":22,"author":{"gitId":"pPris"},"content":"REM"},{"lineNumber":23,"author":{"gitId":"pPris"},"content":"REM java -classpath ..\\bin Duke \u003c scratch.txt"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"pPris"},"content":"REM test files for current usage"},{"lineNumber":26,"author":{"gitId":"pPris"},"content":"REM includes saving bugs"},{"lineNumber":27,"author":{"gitId":"pPris"},"content":"java -classpath ..\\bin Duke \u003c inputL8.txt \u003e outputL8.txt"},{"lineNumber":28,"author":{"gitId":"pPris"},"content":"FC outputL8.txt expectedL8.txt"}],"authorContributionMap":{"pPris":11,"-":17}},{"path":"text-ui-test/scratch.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":2,"author":{"gitId":"pPris"},"content":"done"},{"lineNumber":3,"author":{"gitId":"pPris"},"content":"done 1"},{"lineNumber":4,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":5,"author":{"gitId":"pPris"},"content":"delete 2"},{"lineNumber":6,"author":{"gitId":"pPris"},"content":"todo tea"},{"lineNumber":7,"author":{"gitId":"pPris"},"content":"todo"},{"lineNumber":8,"author":{"gitId":"pPris"},"content":"deadline coffee /by 4pm"},{"lineNumber":9,"author":{"gitId":"pPris"},"content":"deadline /by 4pm"},{"lineNumber":10,"author":{"gitId":"pPris"},"content":"deadline coffee"},{"lineNumber":11,"author":{"gitId":"pPris"},"content":"deadline"},{"lineNumber":12,"author":{"gitId":"pPris"},"content":"tasks.Deadline"},{"lineNumber":13,"author":{"gitId":"pPris"},"content":"event read books /at 4-6pm monday"},{"lineNumber":14,"author":{"gitId":"pPris"},"content":"event /at 4-6pm monday"},{"lineNumber":15,"author":{"gitId":"pPris"},"content":"event read books"},{"lineNumber":16,"author":{"gitId":"pPris"},"content":"event"},{"lineNumber":17,"author":{"gitId":"pPris"},"content":"list"},{"lineNumber":18,"author":{"gitId":"pPris"},"content":"delete"},{"lineNumber":19,"author":{"gitId":"pPris"},"content":"delete 2"},{"lineNumber":20,"author":{"gitId":"pPris"},"content":"bye"},{"lineNumber":21,"author":{"gitId":"pPris"},"content":""}],"authorContributionMap":{"pPris":21}}]
