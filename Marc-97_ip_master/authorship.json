[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"E | 1 | test | 2019-09-16 | by"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":"D | 0 | ip | 2021-01-27 | by"},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"T | 1 | another test"}],"authorContributionMap":{"Marc-97":3}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"E | 1 | read | 2019-09-16 | by"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":"D | 0 | eat | 2021-09-16 | by"},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"T | 0 | read a book"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"E | 0 | read | 2019-01-01 | by"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"D | 0 | read | 2020-01-01 | by"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"T | 0 | xyz abc"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"E | 0 | read a book  | 2021-01-01 | by"}],"authorContributionMap":{"Marc-97":7}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"import duke.task.Task;"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"import duke.task.TaskList;"},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"import duke.ui.Ui;"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":"import java.util.Scanner;"},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":" * Duke is a program for task tracking."},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":" */"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":"    private Storage storage;"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"    private TaskList tasks;"},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"    private Ui ui;"},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"     * Constructor for Duke."},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"     * @param filePath a path representing the location of duke save file"},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":"    public Duke(String filePath) {"},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":"        ui \u003d new Ui();"},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"        storage \u003d new Storage(filePath);"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":"            tasks \u003d new TaskList(storage.load());"},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"        } catch (DukeException ex) {"},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"            tasks \u003d new TaskList();"},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"     * Runner for duke."},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"     * Read, process input and will output accordingly."},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":"    public void run() {"},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"        ui.showWelcome();"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"        String request \u003d \"\";"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":"        while (!request.equals(\"bye\")) {"},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":"            Parser parser \u003d new Parser(sc.nextLine());"},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"            request \u003d parser.getRequest();"},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":"            String args \u003d parser.getArgs();"},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"            if (request.equals(\"bye\")) {"},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"                ui.showBye();"},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":"                break;"},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"            } else if (request.equals(\"list\")) {"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"                ui.printList(tasks);"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":"            } else if (request.equals(\"done\")) {"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"                try {"},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"                    int taskNo \u003d Integer.parseInt(args);"},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"                    ui.printMarked(tasks.markDone(taskNo));"},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"                    storage.save(tasks);"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":"                } catch (DukeException ex) {"},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(ex.getMessage());"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"                } catch (NumberFormatException ex) {"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(\"Please enter integer values..\");"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":"                }"},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":"            } else if (request.equals(\"delete\")) {"},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"                try {"},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"                    int taskNo \u003d Integer.parseInt(args);"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"                    ui.printRemoved(tasks, tasks.removeTask(taskNo));"},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":"                    storage.save(tasks);"},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"                } catch (DukeException ex) {"},{"lineNumber":71,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(ex.getMessage());"},{"lineNumber":72,"author":{"gitId":"Marc-97"},"content":"                } catch (NumberFormatException ex) {"},{"lineNumber":73,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(\"Please enter integer values..\");"},{"lineNumber":74,"author":{"gitId":"Marc-97"},"content":"                }"},{"lineNumber":75,"author":{"gitId":"Marc-97"},"content":"            } else if (request.equals(\"todo\")) {"},{"lineNumber":76,"author":{"gitId":"Marc-97"},"content":"                try {"},{"lineNumber":77,"author":{"gitId":"Marc-97"},"content":"                    Task task \u003d Task.createTask(args, request, \"\", \"\");"},{"lineNumber":78,"author":{"gitId":"Marc-97"},"content":"                    ui.printAdded(tasks, tasks.addTask(task));"},{"lineNumber":79,"author":{"gitId":"Marc-97"},"content":"                    storage.save(tasks);"},{"lineNumber":80,"author":{"gitId":"Marc-97"},"content":"                } catch (DukeException ex) {"},{"lineNumber":81,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(ex.getMessage());"},{"lineNumber":82,"author":{"gitId":"Marc-97"},"content":"                }"},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":"            } else if (request.equals(\"deadline\")) {"},{"lineNumber":84,"author":{"gitId":"Marc-97"},"content":"                try {"},{"lineNumber":85,"author":{"gitId":"Marc-97"},"content":"                    String[] deadStr \u003d parser.getFormattedCommand();"},{"lineNumber":86,"author":{"gitId":"Marc-97"},"content":"                    Task task \u003d Task.createTask(deadStr[0], request, deadStr[1], deadStr[2]);"},{"lineNumber":87,"author":{"gitId":"Marc-97"},"content":"                    ui.printAdded(tasks, tasks.addTask(task));"},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"                    storage.save(tasks);"},{"lineNumber":89,"author":{"gitId":"Marc-97"},"content":"                } catch (DukeException ex) {"},{"lineNumber":90,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(ex.getMessage());"},{"lineNumber":91,"author":{"gitId":"Marc-97"},"content":"                }"},{"lineNumber":92,"author":{"gitId":"Marc-97"},"content":"            } else if (request.equals(\"event\")) {"},{"lineNumber":93,"author":{"gitId":"Marc-97"},"content":"                try {"},{"lineNumber":94,"author":{"gitId":"Marc-97"},"content":"                    String[] eventStr \u003d parser.getFormattedCommand();"},{"lineNumber":95,"author":{"gitId":"Marc-97"},"content":"                    Task task \u003d Task.createTask(eventStr[0], request, eventStr[1], eventStr[2]);"},{"lineNumber":96,"author":{"gitId":"Marc-97"},"content":"                    ui.printAdded(tasks, tasks.addTask(task));"},{"lineNumber":97,"author":{"gitId":"Marc-97"},"content":"                    storage.save(tasks);"},{"lineNumber":98,"author":{"gitId":"Marc-97"},"content":"                } catch (DukeException ex) {"},{"lineNumber":99,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(ex.getMessage());"},{"lineNumber":100,"author":{"gitId":"Marc-97"},"content":"                }"},{"lineNumber":101,"author":{"gitId":"Marc-97"},"content":"            } else if (request.equals(\"find\")) {"},{"lineNumber":102,"author":{"gitId":"Marc-97"},"content":"                ui.printFound(tasks.findTask(args));"},{"lineNumber":103,"author":{"gitId":"Marc-97"},"content":"            } else {"},{"lineNumber":104,"author":{"gitId":"Marc-97"},"content":"                try {"},{"lineNumber":105,"author":{"gitId":"Marc-97"},"content":"                    throwDontKnowException();"},{"lineNumber":106,"author":{"gitId":"Marc-97"},"content":"                } catch (DukeException ex) {"},{"lineNumber":107,"author":{"gitId":"Marc-97"},"content":"                    ui.printFormatted(ex.getMessage());"},{"lineNumber":108,"author":{"gitId":"Marc-97"},"content":"                }"},{"lineNumber":109,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":110,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":111,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":112,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":113,"author":{"gitId":"Marc-97"},"content":"    public static void main(String[] args) {"},{"lineNumber":114,"author":{"gitId":"Marc-97"},"content":"        new Duke(\"data/tasks.txt\").run();"},{"lineNumber":115,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":116,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":117,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":118,"author":{"gitId":"Marc-97"},"content":"     * Throw DukeException with fixed message."},{"lineNumber":119,"author":{"gitId":"Marc-97"},"content":"     * This method will always throw a DukeException with a fixed message. If"},{"lineNumber":120,"author":{"gitId":"Marc-97"},"content":"     * user input is invalid, this method can be used to throw an exception."},{"lineNumber":121,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":122,"author":{"gitId":"Marc-97"},"content":"     * @throws DukeException"},{"lineNumber":123,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":124,"author":{"gitId":"Marc-97"},"content":"    public static void throwDontKnowException() throws DukeException {"},{"lineNumber":125,"author":{"gitId":"Marc-97"},"content":"        throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");"},{"lineNumber":126,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":127,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"Marc-97":125,"-":2}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke.exception;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":" * Custom exception class for Duke"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":" */"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"public class DukeException extends Exception {"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"    public DukeException(String message) {"},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"        super(message);"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":10}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke.parser;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":" * A parser for reading user input"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":" */"},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"public class Parser {"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":"    private String msg;"},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":"     * Constructor for \u003ccode\u003eParser\u003c/code\u003e."},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":"     * @param msg a string of input from user"},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":"    public Parser(String msg) {"},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":"        this.msg \u003d msg;"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"     * Process msg and return the request (command) of the input."},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"     * @return a string of request"},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"    public String getRequest() {"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":"        String[] token \u003d msg.split(\" \");"},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":"        return token[0];"},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"     * Process msg and return the arguments of the input."},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"     * @return a string of arguments"},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"    public String getArgs() {"},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"        String[] token \u003d msg.split(\" \");"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"        String args \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"        for (int i \u003d 1; i \u003c token.length; i ++) {"},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"            args +\u003d token[i];"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":"            if (i \u003c token.length - 1) {"},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"                args +\u003d \" \";"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"        return args;"},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":"     * Process msg and return the formatted command of the input."},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":"     * This method return an String array of size 3."},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"     * The first item represents the name of a task."},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"     * The second item represents the date of a task."},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":"     * The third item represents the preposition of a task."},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"     * @return an array consisting of name, date, preposition"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":"     * @throws DukeException"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"    public String[] getFormattedCommand() throws DukeException {"},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"            String args \u003d getArgs();"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":"            String[] formattedArr \u003d new String[3];"},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":"            formattedArr[0] \u003d args.split(\" /\")[0];"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"            formattedArr[1] \u003d args.split(\"/\")[1].substring(args.split(\"/\")[1].split(\" \")[0].length() + 1, args.split(\"/\")[1].length());"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"            formattedArr[2] \u003d args.split(\"/\")[1].split(\" \")[0];"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":"            return formattedArr;"},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"            throw new DukeException(\"☹ OOPS!!! The format you have entered is wrong.\");"},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":69}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"import duke.exception.DukeException;"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"import java.io.File;"},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"import java.io.FileWriter;"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":"import java.util.LinkedList;"},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"import java.util.Scanner;"},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"/**"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":" * A class for handling saving and loading of data."},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":" */"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"    private File saveFile;"},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"     * Constructor for \u003ccode\u003eStorage\u003c/code\u003e."},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"     * @param filePath a path where the file is to be saved or loaded"},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":"    public Storage(String filePath) {"},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":"        saveFile \u003d new File(filePath);"},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"        String[] token \u003d filePath.split(\"/\");"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":"        String directoryPath \u003d \"\";"},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":"        for (int i \u003d 0; i \u003c token.length - 1; i++) {"},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"            directoryPath +\u003d token[i] + \"/\";"},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"        File directory \u003d new File(directoryPath);"},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"            if (!directory.exists()) {"},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"                directory.mkdirs();"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"            saveFile.createNewFile();"},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"        } catch (IOException ex) {"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":"            ex.printStackTrace();"},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":"     * Save \u003ccode\u003eTaskList\u003c/code\u003e by writing to a file."},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":"     * This method will iterate through \u003ccode\u003eTaskFile\u003c/code\u003e and save it"},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"     * into a text file."},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":"     * @param tasks the TaskList needed to save"},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"    public void save(TaskList tasks) {"},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":"        List\u003cTask\u003e list \u003d tasks.getList();"},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"            FileWriter fileWriter \u003d new FileWriter(saveFile);"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":"            for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"                Task task \u003d list.get(i);"},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"                fileWriter.write(task.toSaveFormat());"},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"                fileWriter.write(\"\\n\");"},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"                fileWriter.flush();"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":"        } catch (IOException ex) {"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"            ex.printStackTrace();"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"     * Return a LinkedList of \u003ccode\u003eTask\u003c/code\u003e by reading from a file."},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"     * This method will read through the saved file and return a list of \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"     * @return"},{"lineNumber":71,"author":{"gitId":"Marc-97"},"content":"     * @throws DukeException"},{"lineNumber":72,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Marc-97"},"content":"    public LinkedList\u003cTask\u003e load() throws DukeException{"},{"lineNumber":74,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":75,"author":{"gitId":"Marc-97"},"content":"            LinkedList\u003cTask\u003e list \u003d new LinkedList\u003c\u003e();"},{"lineNumber":76,"author":{"gitId":"Marc-97"},"content":"            if (saveFile.exists()) {"},{"lineNumber":77,"author":{"gitId":"Marc-97"},"content":"                Scanner reader \u003d new Scanner(saveFile);"},{"lineNumber":78,"author":{"gitId":"Marc-97"},"content":"                while (reader.hasNextLine()) {"},{"lineNumber":79,"author":{"gitId":"Marc-97"},"content":"                    String line \u003d reader.nextLine();"},{"lineNumber":80,"author":{"gitId":"Marc-97"},"content":"                    String[] token \u003d line.split(\" \\\\| \");"},{"lineNumber":81,"author":{"gitId":"Marc-97"},"content":"                    Task task;"},{"lineNumber":82,"author":{"gitId":"Marc-97"},"content":"                    if (token[0].equals(\"T\")) {"},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":"                        task \u003d new Task(token[0], token[2]);"},{"lineNumber":84,"author":{"gitId":"Marc-97"},"content":"                    } else if (token[0].equals(\"E\") || token[0].equals(\"D\")) {"},{"lineNumber":85,"author":{"gitId":"Marc-97"},"content":"                        task \u003d new Task(token[0], token[2], token[3], token[4]);"},{"lineNumber":86,"author":{"gitId":"Marc-97"},"content":"                    } else {"},{"lineNumber":87,"author":{"gitId":"Marc-97"},"content":"                        throw new DukeException(\"Save file is corrupted ): Will be creating a new file\");"},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"                    }"},{"lineNumber":89,"author":{"gitId":"Marc-97"},"content":"                    if (token[1].equals(\"1\")) {"},{"lineNumber":90,"author":{"gitId":"Marc-97"},"content":"                        task.setDone();"},{"lineNumber":91,"author":{"gitId":"Marc-97"},"content":"                    }"},{"lineNumber":92,"author":{"gitId":"Marc-97"},"content":"                    list.add(task);"},{"lineNumber":93,"author":{"gitId":"Marc-97"},"content":"                }"},{"lineNumber":94,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":95,"author":{"gitId":"Marc-97"},"content":"            return list;"},{"lineNumber":96,"author":{"gitId":"Marc-97"},"content":"        } catch (IOException ex) {"},{"lineNumber":97,"author":{"gitId":"Marc-97"},"content":"            ex.printStackTrace();"},{"lineNumber":98,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Marc-97"},"content":"        return new LinkedList\u003c\u003e();"},{"lineNumber":100,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":101}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":" * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e consist of"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":" * name, type (todo, event, deadline), status and deadline (if applicable)."},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":"public class Task {"},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":"    private String name;"},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"    private boolean isDone;"},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":"    private String type;"},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"    private String preposition;"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":"    private LocalDate date;"},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"     * Task constructor for todo."},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"     * @param type"},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"     * @param name"},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"    public Task(String type, String name) {"},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"        this.name \u003d name;"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":"        this.isDone \u003d false;"},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":"        this.type \u003d type;"},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"        this.date \u003d null;"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"     * Task constructor for event/deadline."},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"     * @param type"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"     * @param name"},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"     * @param date"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"     * @param preposition"},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"    public Task(String type, String name, String date, String preposition) {"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":"        this.name \u003d name;"},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"        this.isDone \u003d false;"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":"        this.type \u003d type;"},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"        this.date \u003d LocalDate.parse(date);"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"        this.preposition \u003d preposition;"},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":"     * Getter method for type."},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"     * @return the type of the \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":"    public String getType() {"},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"        return type;"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"     * Getter method for status."},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"     * @return the status of the \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":"    public boolean getDone() {"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"        return isDone;"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"     * Getter method for date."},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"     * @return the date of the \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"    public LocalDate getDate() {"},{"lineNumber":71,"author":{"gitId":"Marc-97"},"content":"        return date;"},{"lineNumber":72,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":74,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":75,"author":{"gitId":"Marc-97"},"content":"     * Getter method for name."},{"lineNumber":76,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":77,"author":{"gitId":"Marc-97"},"content":"     * @return the name of the \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":78,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"Marc-97"},"content":"    public String getName() {"},{"lineNumber":80,"author":{"gitId":"Marc-97"},"content":"        return name;"},{"lineNumber":81,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":82,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":84,"author":{"gitId":"Marc-97"},"content":"     * Setter method for status."},{"lineNumber":85,"author":{"gitId":"Marc-97"},"content":"     * This method set the \u003ccode\u003eTask\u003c/code\u003e status to done."},{"lineNumber":86,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"Marc-97"},"content":"    public void setDone() {"},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"        this.isDone \u003d true;"},{"lineNumber":89,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":91,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"Marc-97"},"content":"     * Returns a readable string representing the task that can"},{"lineNumber":93,"author":{"gitId":"Marc-97"},"content":"     * be used for outputting to user."},{"lineNumber":94,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"Marc-97"},"content":"     * @return a representative string of \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":96,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":97,"author":{"gitId":"Marc-97"},"content":"    @Override"},{"lineNumber":98,"author":{"gitId":"Marc-97"},"content":"    public String toString() {"},{"lineNumber":99,"author":{"gitId":"Marc-97"},"content":"        if (type.equals(\"E\") || type.equals(\"D\")) {"},{"lineNumber":100,"author":{"gitId":"Marc-97"},"content":"            return String.format(\"[%s][%s] %s (%s: %s)\","},{"lineNumber":101,"author":{"gitId":"Marc-97"},"content":"                    type,"},{"lineNumber":102,"author":{"gitId":"Marc-97"},"content":"                    (isDone) ? \"X\" : \" \","},{"lineNumber":103,"author":{"gitId":"Marc-97"},"content":"                    name,"},{"lineNumber":104,"author":{"gitId":"Marc-97"},"content":"                    preposition,"},{"lineNumber":105,"author":{"gitId":"Marc-97"},"content":"                    date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")));"},{"lineNumber":106,"author":{"gitId":"Marc-97"},"content":"        } else {"},{"lineNumber":107,"author":{"gitId":"Marc-97"},"content":"            return String.format(\"[%s][%s] %s\","},{"lineNumber":108,"author":{"gitId":"Marc-97"},"content":"                    type,"},{"lineNumber":109,"author":{"gitId":"Marc-97"},"content":"                    (isDone) ? \"X\" : \" \","},{"lineNumber":110,"author":{"gitId":"Marc-97"},"content":"                    name);"},{"lineNumber":111,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":112,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":113,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":114,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":115,"author":{"gitId":"Marc-97"},"content":"     * Returns a formatted representative of \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":116,"author":{"gitId":"Marc-97"},"content":"     * Fields of \u003ccode\u003eTask\u003c/code\u003e will be formatted with delimiters for"},{"lineNumber":117,"author":{"gitId":"Marc-97"},"content":"     * writing to text file."},{"lineNumber":118,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":119,"author":{"gitId":"Marc-97"},"content":"     * @return a string that is formatted for writing"},{"lineNumber":120,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":121,"author":{"gitId":"Marc-97"},"content":"    public String toSaveFormat() {"},{"lineNumber":122,"author":{"gitId":"Marc-97"},"content":"        String line \u003d type + \" | \" + (isDone ? \"1\" : \"0\") + \" | \" + name;"},{"lineNumber":123,"author":{"gitId":"Marc-97"},"content":"        if (type.equals(\"E\") || type.equals(\"D\")) {"},{"lineNumber":124,"author":{"gitId":"Marc-97"},"content":"            line +\u003d \" | \" + date + \" | \" + preposition;"},{"lineNumber":125,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":126,"author":{"gitId":"Marc-97"},"content":"        return line;"},{"lineNumber":127,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":128,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":129,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":130,"author":{"gitId":"Marc-97"},"content":"     * Create and return a \u003ccode\u003eTask\u003c/code\u003e."},{"lineNumber":131,"author":{"gitId":"Marc-97"},"content":"     * This method is used for creating a task (todo/event/deadline)."},{"lineNumber":132,"author":{"gitId":"Marc-97"},"content":"     * If the task is an event or a deadline, user will input the date and preposition accordingly,"},{"lineNumber":133,"author":{"gitId":"Marc-97"},"content":"     * else input empty string."},{"lineNumber":134,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":135,"author":{"gitId":"Marc-97"},"content":"     * @param taskName the name of the task"},{"lineNumber":136,"author":{"gitId":"Marc-97"},"content":"     * @param type the type of the task"},{"lineNumber":137,"author":{"gitId":"Marc-97"},"content":"     * @param date the date of the task (if applicable)"},{"lineNumber":138,"author":{"gitId":"Marc-97"},"content":"     * @param preposition the preposition for the task (if applicable)"},{"lineNumber":139,"author":{"gitId":"Marc-97"},"content":"     * @return"},{"lineNumber":140,"author":{"gitId":"Marc-97"},"content":"     * @throws DukeException"},{"lineNumber":141,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"Marc-97"},"content":"    public static Task createTask(String taskName, String type, String date, String preposition) throws DukeException {"},{"lineNumber":143,"author":{"gitId":"Marc-97"},"content":"        if (taskName.equals(\"\")) {"},{"lineNumber":144,"author":{"gitId":"Marc-97"},"content":"            throw new DukeException(\"☹ OOPS!!! The description of a \" + type + \" cannot be empty.\");"},{"lineNumber":145,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":146,"author":{"gitId":"Marc-97"},"content":"        if (type.equals(\"todo\")) {"},{"lineNumber":147,"author":{"gitId":"Marc-97"},"content":"            return new Task(\"T\", taskName);"},{"lineNumber":148,"author":{"gitId":"Marc-97"},"content":"        } else if (type.equals(\"event\")) {"},{"lineNumber":149,"author":{"gitId":"Marc-97"},"content":"            return new Task(\"E\", taskName, date, preposition);"},{"lineNumber":150,"author":{"gitId":"Marc-97"},"content":"        } else if (type.equals(\"deadline\")) {"},{"lineNumber":151,"author":{"gitId":"Marc-97"},"content":"            return new Task(\"D\", taskName, date, preposition);"},{"lineNumber":152,"author":{"gitId":"Marc-97"},"content":"        } else {"},{"lineNumber":153,"author":{"gitId":"Marc-97"},"content":"            throw new DukeException(\"☹ OOPS!!! Tried to add wrong task type!\");"},{"lineNumber":154,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":155,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":156,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":156}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke.task;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import java.util.LinkedList;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":" * Represents a list of task."},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":" */"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":"public class TaskList {"},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":"    LinkedList\u003cTask\u003e list;"},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"     * Constructor for \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"    public TaskList() {"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":"        this.list \u003d new LinkedList\u003c\u003e();"},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":"     * Overloaded constructor for \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"     * @param list a LinkedList that contains \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"    public TaskList(LinkedList\u003cTask\u003e list) {"},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"        this.list \u003d new LinkedList\u003cTask\u003e(list);"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":"     * Add a \u003ccode\u003eTask\u003c/code\u003e into \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"     * @param task a task to be added"},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"     * @return the task that is added"},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"    public Task addTask(Task task) {"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"        list.add(task);"},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"        return task;"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":"     * Remove a \u003ccode\u003eTask\u003c/code\u003e from \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"     * This method will remove a \u003ccode\u003eTask\u003c/code\u003e by the position in \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":"     * and return the removed task."},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"     * @param pos the position of the task to be removed (1-indexed)"},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":"     * @return the task that is removed"},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":"     * @throws DukeException"},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":"    public Task removeTask(int pos) throws DukeException {"},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":"        if (pos \u003e list.size() || pos \u003c 0) {"},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"            throw new DukeException("},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"                    String.format(\"Tried to delete nothing ????. (Size: %d | Task No: %d)\", list.size(), pos));"},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"        Task task \u003d this.list.remove(pos - 1);"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"        return task;"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"     * Mark a \u003ccode\u003eTask\u003c/code\u003e as done."},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"     * This method will mark a \u003ccode\u003eTask\u003c/code\u003e done by the position in \u003ccode\u003eTaskList\u003c/code\u003e and"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":"     * return the task that is marked."},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"     * @param pos the position of the task to be marked (1-indexed)"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"     * @return the task that is marked"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":"     * @throws DukeException"},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"    public Task markDone(int pos) throws DukeException {"},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"        if (pos \u003e this.list.size() || pos \u003c 0) {"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"            throw new DukeException("},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":"                    String.format(\"Tried to mark nothing ????. (Size: %d | Task No: %d)\", list.size(), pos));"},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"Marc-97"},"content":"        this.list.get(pos - 1).setDone();"},{"lineNumber":72,"author":{"gitId":"Marc-97"},"content":"        return this.list.get(pos - 1);"},{"lineNumber":73,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":75,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"Marc-97"},"content":"     * Returns a LinkedList of all tasks in \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":77,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":78,"author":{"gitId":"Marc-97"},"content":"     * @return a LinkedList of tasks"},{"lineNumber":79,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"Marc-97"},"content":"    public LinkedList\u003cTask\u003e getList() {"},{"lineNumber":81,"author":{"gitId":"Marc-97"},"content":"        return this.list;"},{"lineNumber":82,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":84,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"Marc-97"},"content":"     * Search for all the \u003ccode\u003eTask\u003c/code\u003e and return a \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":86,"author":{"gitId":"Marc-97"},"content":"     * Search for all the \u003ccode\u003eTask\u003c/code\u003e in \u003ccode\u003eTaskList\u003c/code\u003e that contains a series of character."},{"lineNumber":87,"author":{"gitId":"Marc-97"},"content":"     * Return a new \u003ccode\u003eTaskList\u003c/code\u003e"},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":89,"author":{"gitId":"Marc-97"},"content":"     * @param str a series of character to use for finding"},{"lineNumber":90,"author":{"gitId":"Marc-97"},"content":"     * @return a new TaskList containing all the found \u003ccode\u003eTask\u003c/code\u003e"},{"lineNumber":91,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"Marc-97"},"content":"    public TaskList findTask(String str) {"},{"lineNumber":93,"author":{"gitId":"Marc-97"},"content":"        LinkedList\u003cTask\u003e foundList \u003d new LinkedList\u003c\u003e();"},{"lineNumber":94,"author":{"gitId":"Marc-97"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":95,"author":{"gitId":"Marc-97"},"content":"            if (list.get(i).getName().contains(str)) {"},{"lineNumber":96,"author":{"gitId":"Marc-97"},"content":"                foundList.add(list.get(i));"},{"lineNumber":97,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":98,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":99,"author":{"gitId":"Marc-97"},"content":"        return new TaskList(foundList);"},{"lineNumber":100,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":101,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":101}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import duke.task.TaskList;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import duke.task.Task;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"import java.util.LinkedList;"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":" * A class for outputting messages to user."},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":" */"},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":"public class Ui {"},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"    public Ui() {"},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"     * Print the welcome message of Duke."},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":"    public void showWelcome() {"},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"        String logo \u003d \" ____        _        \\n\""},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":"        System.out.println(\"Hello from\\n\" + logo);"},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":"        printFormatted(\"Hello! I\u0027m Duke\\nWhat can I do for you?\");"},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"     * Print a formatted message."},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"     * This method take in a message and print the formatted message"},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"     * instantly."},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"     * @param msg a string to print"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"    public void printFormatted(String msg) {"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"        String appendMsg \u003d \"____________________________________________________________\\n\""},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"                + msg"},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"                + \"\\n____________________________________________________________\";"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":"        System.out.println(appendMsg);"},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"     * Print the exit message of Duke."},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":"    public void showBye() {"},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"        printFormatted(\"Bye. Hope to see you again soon!\");"},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"     * Print all \u003ccode\u003eTask\u003c/code\u003e in the \u003ccode\u003eTaskList\u003c/code\u003e."},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"     * @param tasks a \u003ccode\u003eTaskList\u003c/code\u003e consisting of tasks"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":"    public void printList(TaskList tasks) {"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"        LinkedList\u003cTask\u003e lst \u003d tasks.getList();"},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"        String msg \u003d \"Here are the tasks in your list:\\n\";"},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"        for (int i \u003d 1; i \u003c\u003d lst.size(); i++) {"},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"            msg +\u003d i + \". \" + lst.get(i - 1);"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":"            if (i \u003c lst.size()) {"},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":"                msg +\u003d \"\\n\";"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":"        printFormatted(msg);"},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"     * Print a message when \u003ccode\u003eTask\u003c/code\u003e is added."},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"     * @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e containing all the tasks"},{"lineNumber":71,"author":{"gitId":"Marc-97"},"content":"     * @param task the \u003ccode\u003eTask\u003c/code\u003e that is added"},{"lineNumber":72,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"Marc-97"},"content":"    public void printAdded(TaskList tasks, Task task) {"},{"lineNumber":74,"author":{"gitId":"Marc-97"},"content":"        String msg \u003d \"Got it. I\u0027ve added this task:\\n\""},{"lineNumber":75,"author":{"gitId":"Marc-97"},"content":"                + \"  \" + task"},{"lineNumber":76,"author":{"gitId":"Marc-97"},"content":"                + \"\\nNow you have \" + tasks.getList().size() + \" tasks in the list.\";"},{"lineNumber":77,"author":{"gitId":"Marc-97"},"content":"        printFormatted(msg);"},{"lineNumber":78,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":80,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":81,"author":{"gitId":"Marc-97"},"content":"     * Print a message when \u003ccode\u003eTask\u003c/code\u003e is removed."},{"lineNumber":82,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":83,"author":{"gitId":"Marc-97"},"content":"     * @param tasks the \u003ccode\u003eTaskList\u003c/code\u003e containing all the tasks"},{"lineNumber":84,"author":{"gitId":"Marc-97"},"content":"     * @param task the \u003ccode\u003eTask\u003c/code\u003e that is added"},{"lineNumber":85,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":86,"author":{"gitId":"Marc-97"},"content":"    public void printRemoved(TaskList tasks, Task task) {"},{"lineNumber":87,"author":{"gitId":"Marc-97"},"content":"        String msg \u003d \"Got it. I\u0027ve removed this task:\\n\""},{"lineNumber":88,"author":{"gitId":"Marc-97"},"content":"                + \"  \" + task"},{"lineNumber":89,"author":{"gitId":"Marc-97"},"content":"                + \"\\nNow you have \" + tasks.getList().size() + \" tasks in the list.\";"},{"lineNumber":90,"author":{"gitId":"Marc-97"},"content":"        printFormatted(msg);"},{"lineNumber":91,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":92,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":93,"author":{"gitId":"Marc-97"},"content":"    /**"},{"lineNumber":94,"author":{"gitId":"Marc-97"},"content":"     * Print a message when \u003ccode\u003eTask\u003c/code\u003e is marked done."},{"lineNumber":95,"author":{"gitId":"Marc-97"},"content":"     *"},{"lineNumber":96,"author":{"gitId":"Marc-97"},"content":"     * @param task the \u003ccode\u003eTask\u003c/code\u003e that is added"},{"lineNumber":97,"author":{"gitId":"Marc-97"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"Marc-97"},"content":"    public void printMarked(Task task) {"},{"lineNumber":99,"author":{"gitId":"Marc-97"},"content":"        String msg \u003d \"Nice! I\u0027ve marked this task as done:\\n\";"},{"lineNumber":100,"author":{"gitId":"Marc-97"},"content":"        msg +\u003d \"  \" + task;"},{"lineNumber":101,"author":{"gitId":"Marc-97"},"content":"        printFormatted(msg);"},{"lineNumber":102,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":103,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":104,"author":{"gitId":"Marc-97"},"content":"    public void printFound(TaskList tasks) {"},{"lineNumber":105,"author":{"gitId":"Marc-97"},"content":"        LinkedList\u003cTask\u003e lst \u003d tasks.getList();"},{"lineNumber":106,"author":{"gitId":"Marc-97"},"content":"        String msg \u003d \"Here are the matching tasks in your list:\\n\";"},{"lineNumber":107,"author":{"gitId":"Marc-97"},"content":"        for (int i \u003d 1; i \u003c\u003d lst.size(); i++) {"},{"lineNumber":108,"author":{"gitId":"Marc-97"},"content":"            msg +\u003d i + \". \" + lst.get(i - 1);"},{"lineNumber":109,"author":{"gitId":"Marc-97"},"content":"            if (i \u003c lst.size()) {"},{"lineNumber":110,"author":{"gitId":"Marc-97"},"content":"                msg +\u003d \"\\n\";"},{"lineNumber":111,"author":{"gitId":"Marc-97"},"content":"            }"},{"lineNumber":112,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"Marc-97"},"content":"        printFormatted(msg);"},{"lineNumber":114,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":115}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"import duke.exception.DukeException;"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"import duke.parser.Parser;"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"import duke.task.Task;"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"import java.time.LocalDate;"},{"lineNumber":8,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":9,"author":{"gitId":"Marc-97"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":11,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":12,"author":{"gitId":"Marc-97"},"content":"public class DukeTest {"},{"lineNumber":13,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"Marc-97"},"content":"    public void dummyTest() {"},{"lineNumber":15,"author":{"gitId":"Marc-97"},"content":"        assertEquals(2, 2);"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":19,"author":{"gitId":"Marc-97"},"content":"    public void todoTest() {"},{"lineNumber":20,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":21,"author":{"gitId":"Marc-97"},"content":"            Task task \u003d Task.createTask(\"Read a book\", \"todo\", \"\", \"\");"},{"lineNumber":22,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"T\", task.getType());"},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"Read a book\", task.getName());"},{"lineNumber":24,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"[T][ ] Read a book\", task.toString());"},{"lineNumber":25,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"T | 0 | Read a book\", task.toSaveFormat());"},{"lineNumber":26,"author":{"gitId":"Marc-97"},"content":"        } catch (DukeException ex) {"},{"lineNumber":27,"author":{"gitId":"Marc-97"},"content":"            assertEquals(0, 1); // force fail"},{"lineNumber":28,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":29,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":31,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"Marc-97"},"content":"    public void eventTest() {"},{"lineNumber":33,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"Marc-97"},"content":"            Task task \u003d Task.createTask(\"Eat a book\", \"event\", \"2019-09-16\", \"by\");"},{"lineNumber":35,"author":{"gitId":"Marc-97"},"content":"            LocalDate date \u003d LocalDate.parse(\"2019-09-16\");"},{"lineNumber":36,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"E\", task.getType());"},{"lineNumber":37,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"Eat a book\", task.getName());"},{"lineNumber":38,"author":{"gitId":"Marc-97"},"content":"            assertEquals(date.toString(), task.getDate().toString());"},{"lineNumber":39,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"[E][ ] Eat a book (by: Sep 16 2019)\", task.toString());"},{"lineNumber":40,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"E | 0 | Eat a book | 2019-09-16 | by\", task.toSaveFormat());"},{"lineNumber":41,"author":{"gitId":"Marc-97"},"content":"        } catch (DukeException ex) {"},{"lineNumber":42,"author":{"gitId":"Marc-97"},"content":"            assertEquals(0, 1); // force fail"},{"lineNumber":43,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":46,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":47,"author":{"gitId":"Marc-97"},"content":"    public void deadlineTest() {"},{"lineNumber":48,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":49,"author":{"gitId":"Marc-97"},"content":"            Task task \u003d Task.createTask(\"Cook a book\", \"deadline\", \"2010-05-12\", \"in\");"},{"lineNumber":50,"author":{"gitId":"Marc-97"},"content":"            LocalDate date \u003d LocalDate.parse(\"2010-05-12\");"},{"lineNumber":51,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"D\", task.getType());"},{"lineNumber":52,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"Cook a book\", task.getName());"},{"lineNumber":53,"author":{"gitId":"Marc-97"},"content":"            assertEquals(date.toString(), task.getDate().toString());"},{"lineNumber":54,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"[D][ ] Cook a book (in: May 12 2010)\", task.toString());"},{"lineNumber":55,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"D | 0 | Cook a book | 2010-05-12 | in\", task.toSaveFormat());"},{"lineNumber":56,"author":{"gitId":"Marc-97"},"content":"        } catch (DukeException ex) {"},{"lineNumber":57,"author":{"gitId":"Marc-97"},"content":"            assertEquals(0, 1); // force fail"},{"lineNumber":58,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"Marc-97"},"content":""},{"lineNumber":61,"author":{"gitId":"Marc-97"},"content":"    @Test"},{"lineNumber":62,"author":{"gitId":"Marc-97"},"content":"    public void parserTest() {"},{"lineNumber":63,"author":{"gitId":"Marc-97"},"content":"        Parser parser \u003d new Parser(\"event Write a book /by 2020-09-16\");"},{"lineNumber":64,"author":{"gitId":"Marc-97"},"content":"        assertEquals(\"event\", parser.getRequest());"},{"lineNumber":65,"author":{"gitId":"Marc-97"},"content":"        assertEquals(\"Write a book /by 2020-09-16\", parser.getArgs());"},{"lineNumber":66,"author":{"gitId":"Marc-97"},"content":"        try {"},{"lineNumber":67,"author":{"gitId":"Marc-97"},"content":"            String taskName \u003d parser.getFormattedCommand()[0];"},{"lineNumber":68,"author":{"gitId":"Marc-97"},"content":"            String date \u003d parser.getFormattedCommand()[1];"},{"lineNumber":69,"author":{"gitId":"Marc-97"},"content":"            String preposition \u003d parser.getFormattedCommand()[2];"},{"lineNumber":70,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"Write a book\", taskName);"},{"lineNumber":71,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"2020-09-16\", date);"},{"lineNumber":72,"author":{"gitId":"Marc-97"},"content":"            assertEquals(\"by\", preposition);"},{"lineNumber":73,"author":{"gitId":"Marc-97"},"content":"        } catch (DukeException ex) {"},{"lineNumber":74,"author":{"gitId":"Marc-97"},"content":"            assertEquals(0, 1); // force fail"},{"lineNumber":75,"author":{"gitId":"Marc-97"},"content":"        }"},{"lineNumber":76,"author":{"gitId":"Marc-97"},"content":"    }"},{"lineNumber":77,"author":{"gitId":"Marc-97"},"content":"}"}],"authorContributionMap":{"Marc-97":77}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"T | 0 | borrow book"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":"D | 1 | return book | 2019-09-16 | by"},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"E | 0 | project meeting | 2020-11-12 | at"}],"authorContributionMap":{"Marc-97":3}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Marc-97"},"content":"todo borrow book"},{"lineNumber":2,"author":{"gitId":"Marc-97"},"content":"list"},{"lineNumber":3,"author":{"gitId":"Marc-97"},"content":"deadline return book /by 2019-09-16"},{"lineNumber":4,"author":{"gitId":"Marc-97"},"content":"event project meeting /at 2020-11-12"},{"lineNumber":5,"author":{"gitId":"Marc-97"},"content":"done 2"},{"lineNumber":6,"author":{"gitId":"Marc-97"},"content":"list"},{"lineNumber":7,"author":{"gitId":"Marc-97"},"content":"bye"}],"authorContributionMap":{"Marc-97":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"Marc-97"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"Marc-97"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"Marc-97":2,"-":19}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"Marc-97"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"Marc-97"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"Marc-97":2,"-":36}}]
