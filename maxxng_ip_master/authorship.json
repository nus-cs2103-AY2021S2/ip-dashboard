[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"maxxng":2,"-":21}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}"},{"lineNumber":10,"author":{"gitId":"-"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}"},{"lineNumber":30,"author":{"gitId":"-"},"content":""},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":33,"author":{"gitId":"-"},"content":""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":36,"author":{"gitId":"-"},"content":""},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}"},{"lineNumber":44,"author":{"gitId":"-"},"content":""},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"    mainClassName \u003d \"duke.javafx.Launcher\""},{"lineNumber":47,"author":{"gitId":"-"},"content":"}"},{"lineNumber":48,"author":{"gitId":"-"},"content":""},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}"},{"lineNumber":53,"author":{"gitId":"-"},"content":""},{"lineNumber":54,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"maxxng":16,"-":40}},{"path":"config/travis/check-eof-newline.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"# Checks that all text files end with a newline."},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"ret\u003d0"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"# Preserve filename with spaces by only splitting on newlines."},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"IFS\u003d\u0027"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"\u0027"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"for filename in $(git grep --cached -I -l -e \u0027\u0027 -- \u0027:/\u0027); do"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    if [ \"$(tail -c 1 \"./$filename\")\" !\u003d \u0027\u0027 ]; then"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        line\u003d\"$(wc -l \"./$filename\" | cut -d\u0027 \u0027 -f1)\""},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        echo \"ERROR:$filename:$line: no newline at EOF.\""},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        ret\u003d1"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    fi"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"done"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"exit $ret"}],"authorContributionMap":{"maxxng":18}},{"path":"config/travis/check-line-endings.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"# Checks for prohibited line endings."},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"# Prohibited line endings: \\r\\n"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"git grep --cached -I -n --no-color -P \u0027\\r$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"awk \u0027"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"    BEGIN {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"        FS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"        OFS \u003d \":\""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"        ret \u003d 0"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    {"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        ret \u003d 1"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        print \"ERROR\", $1, $2, \" prohibited \\\\r\\\\n line ending, use \\\\n instead.\""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    END {"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        exit ret"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"\u0027"}],"authorContributionMap":{"maxxng":19}},{"path":"config/travis/check-trailing-whitespace.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"# Checks for trailing whitespace"},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"git grep --cached -I -n --no-color -P \u0027[ \\t]+$\u0027 -- \u0027:/\u0027 |"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"awk \u0027"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    BEGIN {"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"        FS \u003d \":\""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"        OFS \u003d \":\""},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"        ret \u003d 0"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        # Only warn for markdown files (*.md) to accomodate text editors"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        # which do not properly handle trailing whitespace."},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        # (e.g. GitHub web editor)"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        if ($1 ~ /\\.md$/) {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"            severity \u003d \"WARN\""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        } else {"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"            severity \u003d \"ERROR\""},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"            ret \u003d 1"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        print severity, $1, $2, \" trailing whitespace.\""},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    END {"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"        exit ret"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"\u0027"}],"authorContributionMap":{"maxxng":26}},{"path":"config/travis/deploy_github_pages.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"# Pushes files generated by Asciidoctor and associated files to gh-pages branch for commits to master branch."},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"set -o errexit # exit with nonzero exit code if any line fails"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"if [ -z \"$GITHUB_TOKEN\" ]; then"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"  echo \u0027GITHUB_TOKEN is not set up in Travis. Skipping deploy.\u0027"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"  exit 0"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"fi;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"set -o nounset # exit if variable is unset"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"cd build/docs/html5"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"git init"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"git config user.name \u0027Deployment Bot (Travis)\u0027"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"git config user.email \u0027deploy@travis-ci.org\u0027"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"git config credential.helper \u0027store --file\u003d.git/credentials\u0027"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"echo \"https://${GITHUB_TOKEN}:@github.com\" \u003e .git/credentials"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"git remote add upstream \"https://github.com/${TRAVIS_REPO_SLUG}.git\""},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"# Reset to gh-pages branch, or create orphan branch if gh-pages does not exist in remote."},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"if git ls-remote --exit-code --heads upstream gh-pages; then"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    git fetch --depth\u003d1 upstream gh-pages"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"    git reset upstream/gh-pages"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"elif [ $? -eq 2 ]; then # exit code of git ls-remote is 2 if branch does not exist"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"    git checkout --orphan gh-pages"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"else # error occurred"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    exit $?"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"fi"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"# Exit if there are no changes to gh-pages files."},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"if changes\u003d$(git status --porcelain) \u0026\u0026 [ -z \"$changes\" ]; then"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"    echo \u0027No changes to GitHub Pages files; exiting.\u0027"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"    exit 0"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"fi"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"git add -A ."},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"git commit -m \"Rebuild pages at ${TRAVIS_COMMIT}\""},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"git push --quiet upstream HEAD:gh-pages"}],"authorContributionMap":{"maxxng":42}},{"path":"config/travis/run-checks.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"#!/bin/sh"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"# Runs all check-* scripts, and returns a non-zero exit code if any of them fail."},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"dir\u003d$(CDPATH\u003d cd -- \"$(dirname -- \"$0\")\" \u0026\u0026 pwd) \u0026\u0026"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"ret\u003d0 \u0026\u0026"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"for checkscript in \"$dir\"/check-*; do"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"    if ! \"$checkscript\"; then"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"        ret\u003d1"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    fi"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"done"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"exit $ret"}],"authorContributionMap":{"maxxng":11}},{"path":"data/duke.tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"T --- 1 --- this"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"D --- 0 --- iP 4 --- 2021-02-04"},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"T --- 0 --- today"}],"authorContributionMap":{"maxxng":3}},{"path":"java/build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"}"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"version \u0027unspecified\u0027"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"repositories {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    mavenCentral()"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"}"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"dependencies {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":13}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"include \u0027java\u0027"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""}],"authorContributionMap":{"maxxng":2}},{"path":"src/data/duke.tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"D --- 0 --- how --- today"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"D --- 0 --- how --- today"},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"E --- 0 --- homework --- tmr"}],"authorContributionMap":{"maxxng":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.processintructions.Command;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import duke.storage.Storage;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import duke.processintructions.Parser;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import duke.processintructions.CommandRouter;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":" * Duke is a todo list with features built incrementally."},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    private Ui ui;"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    private Storage storage;"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    private TaskList tasks;"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    public Duke() {"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        ui \u003d new Ui();"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"        storage \u003d new Storage(System.getProperty(\"user.dir\") + \"/data/duke.tasks.txt\");"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        tasks.dataInput(storage.loadData());"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    public Duke(String path) {"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"        ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"        storage \u003d new Storage(path);"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        tasks.dataInput(storage.loadData());"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"     * Returns the greeting message string"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"    public String returnGreetingMessage() {"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        return ui.greetingMessage();"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"     * This method call each of the respective classes to execute a command that the user input"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"     * @param input Input string typed by the user."},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"     * @return Output string generated by Duke in response."},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"    public String getResponse(String input) {"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"        CommandRouter commandRouter \u003d new CommandRouter();"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"        Command parsedCommand \u003d Parser.parse(input);"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"        String response \u003d commandRouter.route(parsedCommand, tasks, input);"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"        storage.save(tasks.getList());"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"        return response;"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"    public static void main(String[] args) {"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"        new Duke(System.getProperty(\"user.dir\") + \"/data/duke.tasks.txt\").returnGreetingMessage();"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":""}],"authorContributionMap":{"maxxng":57,"-":3}},{"path":"src/main/java/duke/javafx/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.javafx;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import java.util.Collections;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"import javafx.geometry.Pos;"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"import javafx.scene.Node;"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"import javafx.scene.control.Label;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":" * An example of a custom control using FXML."},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":" * containing text from the speaker."},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"public class DialogBox extends HBox {"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    private Label dialog;"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    private ImageView displayPicture;"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"            fxmlLoader.load();"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"        } catch (IOException e) {"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"            e.printStackTrace();"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"        dialog.setText(text);"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"        displayPicture.setImage(img);"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"    private void flip() {"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"        Collections.reverse(tmp);"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"    public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"        return new DialogBox(text, img);"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"        var db \u003d new DialogBox(text, img);"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"        db.flip();"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"        return db;"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":61}},{"path":"src/main/java/duke/javafx/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.javafx;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"public class Launcher {"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    public static void main(String[] args) {"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":9}},{"path":"src/main/java/duke/javafx/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.javafx;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import duke.Duke;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import javafx.application.Application;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import javafx.scene.Scene;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":" * A GUI for Duke using FXML."},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"public class Main extends Application {"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    @Override"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    public void start(Stage stage) {"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"            stage.setScene(scene);"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().greetingMessageOnStartup();"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"            stage.show();"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"            e.printStackTrace();"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":34}},{"path":"src/main/java/duke/javafx/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.javafx;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import javafx.fxml.FXML;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import javafx.scene.image.Image;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"    private VBox dialogContainer;"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    private TextField userInput;"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    private Button sendButton;"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    private Duke duke;"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/anime.png\"));"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/duck.png\"));"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    public void initialize() {"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        duke \u003d d;"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"    public void greetingMessageOnStartup() {"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"        String greet \u003d duke.returnGreetingMessage();"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"                DialogBox.getDukeDialog(greet, dukeImage)"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"        );"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"    private void handleUserInput() {"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"                DialogBox.getUserDialog(input, userImage),"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"        );"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"        userInput.clear();"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":60}},{"path":"src/main/java/duke/processintructions/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.processintructions;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"public enum Command {"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    EVENT,"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"    DELETE,"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    LIST,"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    DONE,"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    FIND,"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    BYE,"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    ERROR;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":13}},{"path":"src/main/java/duke/processintructions/CommandRouter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.processintructions;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasklist.TaskList;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.ui.Ui;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":" * Matches the command called by a user to the command return logic to be called in LogicHandler."},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"public class CommandRouter {"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    private boolean isExit;"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    public CommandRouter() {"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        isExit \u003d false;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"     * Maps the string of the command name given in the user\u0027s input to the enumerated command handled by LogicHandler."},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"     * If no such command exists or there is an error, it will be mapped to the error command."},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"     * @param command Command specified."},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"     * @param tasks TaskList object."},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"     * @param input Input of the user as a String."},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    public String route(Command command, TaskList tasks, String input) {"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"        LogicHandler logic \u003d new LogicHandler();"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"        Ui ui \u003d new Ui();"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"        switch (command) {"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        case LIST:"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"            return logic.list(tasks.getList());"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"        case DONE:"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"            return logic.done(input, tasks.getList());"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"        case TODO:"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"            return logic.todo(input, tasks.getList());"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"        case DEADLINE:"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"            return logic.deadline(input, tasks.getList());"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"        case EVENT:"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"            return logic.event(input, tasks.getList());"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"        case DELETE:"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"            return logic.delete(input, tasks.getList());"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"        case FIND:"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"            return logic.find(input, tasks.getList());"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"        case ERROR:"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"            return (\"Oops, that is not a command I support.\");"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"        case BYE:"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"            isExit \u003d true;"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"            return ui.exitMessage();"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"            // break intentionally omitted"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"        default:"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"            return (\"Internal error in code.\");"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":62,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":63,"author":{"gitId":"maxxng"},"content":"     * Returns true if the command is BYE and false otherwise."},{"lineNumber":64,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":65,"author":{"gitId":"maxxng"},"content":"     * @return True if command is BYE and false otherwise."},{"lineNumber":66,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":67,"author":{"gitId":"maxxng"},"content":"    public boolean isExit() {"},{"lineNumber":68,"author":{"gitId":"maxxng"},"content":"        return isExit;"},{"lineNumber":69,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":70,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":70}},{"path":"src/main/java/duke/processintructions/Find.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.processintructions;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import java.util.ArrayList;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"public class Find {"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"     * Given a list of Tasks, return a list of Tasks that contains a specified string."},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    public List\u003cTask\u003e contains(String item, List\u003cTask\u003e list) {"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        List\u003cTask\u003e newList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        for (Task task : list) {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"            if (task.getDescription().contains(item)) {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"                newList.add(task);"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        return newList;"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":21}},{"path":"src/main/java/duke/processintructions/LogicHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.processintructions;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":" * Handles the process that happens when based on the input of the user."},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"public class LogicHandler {"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"     * Triggered by the user typing \u0027list\u0027."},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"     * Prints out all tasks in the list currently."},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"     * @param list List of tasks."},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    public String list(List\u003cTask\u003e list) {"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        // Check if the command is list and display the list of duke.tasks."},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        String temp \u003d \"\";"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"            temp +\u003d String.format(\"%d. %s\", i + 1, list.get(i));"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"            if (i !\u003d list.size() - 1) {"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"                temp +\u003d \"\\n\";"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"        return temp;"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"     * Updates the isDone status of a task of a specified index to true."},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"     * @param input String input of user."},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"     * @param list List of tasks."},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"    public String done(String input, List\u003cTask\u003e list) {"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"            int itemNumber \u003d Integer.valueOf(input.split(\" \")[1]) - 1;"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"            list.get(itemNumber).setIsDone();"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"            return \"Nice! I\u0027ve marked this task as done:\\n\" + list.get(itemNumber);"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"            return (\"Oops, your done command should have a task number behind.\");"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"            return (\"Oops, your done command should be followed by an integer.\");"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"            return (\"Oops, your done command included an invalid index in the task list.\");"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"     * Add a todo task to the list of tasks."},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"     * @param input String input of user."},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"     * @param list List of tasks."},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"    public String todo(String input, List\u003cTask\u003e list) {"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":61,"author":{"gitId":"maxxng"},"content":"            Todo todo \u003d new Todo(input.split(\" \", 2)[1]);"},{"lineNumber":62,"author":{"gitId":"maxxng"},"content":"            list.add(todo);"},{"lineNumber":63,"author":{"gitId":"maxxng"},"content":"            return (\"added: \" + todo + \"\\n\""},{"lineNumber":64,"author":{"gitId":"maxxng"},"content":"                    + \"Now you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":65,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":66,"author":{"gitId":"maxxng"},"content":"            return \"Oops, your todo requires at least a description.\";"},{"lineNumber":67,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":70,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"maxxng"},"content":"     * Add a deadline task to the list of tasks."},{"lineNumber":72,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":73,"author":{"gitId":"maxxng"},"content":"     * @param input String input of user."},{"lineNumber":74,"author":{"gitId":"maxxng"},"content":"     * @param list List of tasks."},{"lineNumber":75,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":76,"author":{"gitId":"maxxng"},"content":"    public String deadline(String input, List\u003cTask\u003e list) {"},{"lineNumber":77,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":78,"author":{"gitId":"maxxng"},"content":"            String taskAndDate \u003d input.split(\" \", 2)[1];"},{"lineNumber":79,"author":{"gitId":"maxxng"},"content":"            String task \u003d taskAndDate.split(\" /by \")[0];"},{"lineNumber":80,"author":{"gitId":"maxxng"},"content":"            String date \u003d taskAndDate.split(\" /by \")[1];"},{"lineNumber":81,"author":{"gitId":"maxxng"},"content":"            Deadline deadline \u003d new Deadline(task, date);"},{"lineNumber":82,"author":{"gitId":"maxxng"},"content":"            list.add(deadline);"},{"lineNumber":83,"author":{"gitId":"maxxng"},"content":"            return \"added: \" + deadline + \"\\n\""},{"lineNumber":84,"author":{"gitId":"maxxng"},"content":"                    + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":85,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":86,"author":{"gitId":"maxxng"},"content":"            return (\"Oops, your deadline requires both a description and date.\");"},{"lineNumber":87,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":88,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":89,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":90,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":91,"author":{"gitId":"maxxng"},"content":"     * Add an Event task to the list of tasks."},{"lineNumber":92,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":93,"author":{"gitId":"maxxng"},"content":"     * @param input String input of user."},{"lineNumber":94,"author":{"gitId":"maxxng"},"content":"     * @param list List of tasks."},{"lineNumber":95,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"maxxng"},"content":"    public String event(String input, List\u003cTask\u003e list) {"},{"lineNumber":97,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":98,"author":{"gitId":"maxxng"},"content":"            String taskAndDate \u003d input.split(\" \", 2)[1];"},{"lineNumber":99,"author":{"gitId":"maxxng"},"content":"            String task \u003d taskAndDate.split(\" /at \")[0];"},{"lineNumber":100,"author":{"gitId":"maxxng"},"content":"            String date \u003d taskAndDate.split(\" /at \")[1];"},{"lineNumber":101,"author":{"gitId":"maxxng"},"content":"            Event event \u003d new Event(task, date);"},{"lineNumber":102,"author":{"gitId":"maxxng"},"content":"            list.add(event);"},{"lineNumber":103,"author":{"gitId":"maxxng"},"content":"            return \"added: \" + event + \"\\n\""},{"lineNumber":104,"author":{"gitId":"maxxng"},"content":"                    + \"Now you have \" + list.size() + \" tasks in the list.\";"},{"lineNumber":105,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":106,"author":{"gitId":"maxxng"},"content":"            return \"Oops, your Event requires both a description and date\";"},{"lineNumber":107,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":108,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":109,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":110,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":111,"author":{"gitId":"maxxng"},"content":"     * Deletes a task in the list of tasks given a specified task index integer."},{"lineNumber":112,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":113,"author":{"gitId":"maxxng"},"content":"     * @param input String input of user."},{"lineNumber":114,"author":{"gitId":"maxxng"},"content":"     * @param list List of tasks."},{"lineNumber":115,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":116,"author":{"gitId":"maxxng"},"content":"    public String delete(String input, List\u003cTask\u003e list) {"},{"lineNumber":117,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":118,"author":{"gitId":"maxxng"},"content":"            int index \u003d Integer.valueOf(input.split(\" \", 2)[1]);"},{"lineNumber":119,"author":{"gitId":"maxxng"},"content":"            list.remove(index - 1);"},{"lineNumber":120,"author":{"gitId":"maxxng"},"content":"            return (\"Noted. I\u0027ve removed the task:\\n\" + list.get(index - 1)"},{"lineNumber":121,"author":{"gitId":"maxxng"},"content":"                    + \"\\nNow you have \" + (list.size() - 1) + \" tasks in the list.\");"},{"lineNumber":122,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":123,"author":{"gitId":"maxxng"},"content":"            return (\"Delete requires a number\");"},{"lineNumber":124,"author":{"gitId":"maxxng"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":125,"author":{"gitId":"maxxng"},"content":"            return (\"Error: \" + e);"},{"lineNumber":126,"author":{"gitId":"maxxng"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":127,"author":{"gitId":"maxxng"},"content":"            return (\"Error: \" + e);"},{"lineNumber":128,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":129,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":130,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":131,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":132,"author":{"gitId":"maxxng"},"content":"     * Finds a task in the list of tasks given a specified String input."},{"lineNumber":133,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":134,"author":{"gitId":"maxxng"},"content":"     * @param input String input of user."},{"lineNumber":135,"author":{"gitId":"maxxng"},"content":"     * @param list List of tasks."},{"lineNumber":136,"author":{"gitId":"maxxng"},"content":"     * @return A list of all tasks that contains the specified String input."},{"lineNumber":137,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":138,"author":{"gitId":"maxxng"},"content":"    public String find(String input, List\u003cTask\u003e list) {"},{"lineNumber":139,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":140,"author":{"gitId":"maxxng"},"content":"            Find find \u003d new Find();"},{"lineNumber":141,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":142,"author":{"gitId":"maxxng"},"content":"            String itemToFind \u003d input.split(\" \", 2)[1];"},{"lineNumber":143,"author":{"gitId":"maxxng"},"content":"            List\u003cTask\u003e newList \u003d find.contains(itemToFind, list);"},{"lineNumber":144,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":145,"author":{"gitId":"maxxng"},"content":"            String temp \u003d \"\";"},{"lineNumber":146,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":147,"author":{"gitId":"maxxng"},"content":"            for (int i \u003d 0; i \u003c newList.size(); i++) {"},{"lineNumber":148,"author":{"gitId":"maxxng"},"content":"                temp +\u003d String.format(\"%d. %s\", i + 1, newList.get(i));"},{"lineNumber":149,"author":{"gitId":"maxxng"},"content":"                if (i !\u003d newList.size() - 1) {"},{"lineNumber":150,"author":{"gitId":"maxxng"},"content":"                    temp +\u003d \"\\n\";"},{"lineNumber":151,"author":{"gitId":"maxxng"},"content":"                }"},{"lineNumber":152,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":153,"author":{"gitId":"maxxng"},"content":"            return temp;"},{"lineNumber":154,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":155,"author":{"gitId":"maxxng"},"content":"            return (\"Oops, your find requires a string description to find a match.\");"},{"lineNumber":156,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":157,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":158,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":158}},{"path":"src/main/java/duke/processintructions/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.processintructions;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"public class Parser {"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"     * Converts the string of the name of the command into an enumerated command."},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"     * @param input String name of command."},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"     * @return Command object correlated to the name."},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    public static Command parse(String input) {"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        Command currentCommand;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"            currentCommand \u003d Command.valueOf(input.split(\" \")[0].toUpperCase());"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"            currentCommand \u003d Command.ERROR;"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        return currentCommand;"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":21}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.storage;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    private String path;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    public Storage(String path) {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        this.path \u003d path;"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"     * Checks if there is a file which contains the saved data from a previous session."},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"     * If no file is found, then the program will create the file and continue as per normal."},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"     * If a file is found, then the tasks in the file will be returned as a string of Tasks at the start of the program."},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"     * @return A string of tasks in the save format, each separated by a newline."},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    public String loadData() {"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"            File f \u003d new File(path);"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"            if (!f.exists()) {"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"                if (f.createNewFile())"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"                    System.out.println(\"File created\");"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"                else"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"                    System.out.println(\"File already exists\");"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"                return \"\";"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"            } else {"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"                String s \u003d \"\";"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"                while(sc.hasNext()) {"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"                    String currLine \u003d sc.nextLine();"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"                    s +\u003d currLine + \"\\n\";"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"                }"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"                return s;"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"        } catch (IOException e) {"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"            // Do not output error message, instead, create the dir and file"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"            // NOTE: THE PATH TO CREATE THE INIT FILE IS HARDCODED."},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"            File dir \u003d new File(\"data\");"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"            dir.mkdir();"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"            File file \u003d new File(\"data/duke.tasks.txt\");"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"            try {"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"                file.createNewFile();"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"            } catch (IOException err) {"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"                System.out.println(\"Error: \" + err);"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"            return \"\";"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"     * Saves all the current tasks in the list as a string into a specified file that is stored locally."},{"lineNumber":61,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":62,"author":{"gitId":"maxxng"},"content":"     * @param list List containing all the tasks."},{"lineNumber":63,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":64,"author":{"gitId":"maxxng"},"content":"    public void save(List\u003cTask\u003e list) {"},{"lineNumber":65,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":66,"author":{"gitId":"maxxng"},"content":"            FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":67,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":68,"author":{"gitId":"maxxng"},"content":"            for (Task task : list) {"},{"lineNumber":69,"author":{"gitId":"maxxng"},"content":"                fw.write(task.saveString() + \"\\n\");"},{"lineNumber":70,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":71,"author":{"gitId":"maxxng"},"content":"            fw.close();"},{"lineNumber":72,"author":{"gitId":"maxxng"},"content":"        } catch (IOException e) {"},{"lineNumber":73,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Error :\" + e);"},{"lineNumber":74,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":75,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":76,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":76}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasklist;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":" * Handles the storing of the list of tasks as well as conversion of user\u0027s input Task objects."},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"public class TaskList {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    private List\u003cTask\u003e list;"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    public TaskList() {"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"     * Converts the user\u0027s input from a valid string form to a Task object."},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"     * The object is then added to a list of objects."},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"     * @param data String of user\u0027s input."},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"    public void dataInput(String data) {"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"        String[] ArrayOfTasksFromLoad \u003d data.split(\"\\n\");"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"        for (String taskInStringForm : ArrayOfTasksFromLoad) {"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"            String[] currValues \u003d taskInStringForm.split(\"\\\\s*---\\\\s*\");"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"            switch (currValues[0]) {"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"            case \"T\":"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"                Todo t \u003d new Todo(currValues[2], currValues[1].equals(\"1\"));"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"                list.add(t);"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"                break;"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"            case \"D\":"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"                Deadline d \u003d new Deadline(currValues[2], currValues[1].equals(\"1\"), currValues[3]);"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"                list.add(d);"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"                break;"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"            case \"E\":"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"                Event e \u003d new Event(currValues[2], currValues[1].equals(\"1\"), currValues[3]);"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"                list.add(e);"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"                break;"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"            default:"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"                System.out.println(\"Error with the written file.\");"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"     * Returns a list of Tasks."},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"     * @return List of Tasks."},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"        return list;"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":59}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":" * Deadline is a type of Task which has a description and date."},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":" * It also maintains a state of isDone."},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"public class Deadline extends Task {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    protected String by;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"        this.by \u003d by;"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"    public Deadline(String description, boolean isDone, String by) {"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"        super(description, isDone);"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        this.by \u003d by;"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"     * Returns string representation of Deadline when saving locally."},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"     * @return String of Deadline when saving."},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"D --- 1 --- \" + description + \" --- \" + by : \"D --- 0 --- \" + description + \" --- \" + by;"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"     * Converts user input for date in yyyy-mm-dd format into MMM d yyyy format."},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"     * @param input A string representation of a date in the format yyyy-mm-dd."},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"     * @return String representation of date in MMM d yyyy format."},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"    public static String convertToDate(String input) {"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"            LocalDate date \u003d LocalDate.parse(input);"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"            return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"            return input;"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"     * Returns string representation of Deadline."},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"     * @return String of Deadline."},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"    @Override"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + Deadline.convertToDate(by) + \")\";"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":57}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":" * Event is a type of Task which has a description and date."},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":" * It also maintains a state of isDone."},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"public class Event extends Task {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    protected String at;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    public Event(String description, String at) {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        super(description);"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"        this.at \u003d at;"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    public Event(String description, boolean isDone, String at) {"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        super(description, isDone);"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        this.at \u003d at;"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"     * Returns string representation of Event when saving locally."},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"     * @return String of Event when saving."},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"E --- 1 --- \" + description + \" --- \" + at : \"E --- 0 --- \" + description + \" --- \" + at;"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"     * Converts user input for date in yyyy-mm-dd format into MMM d yyyy format."},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"     * @param input A string representation of a date in the format yyyy-mm-dd."},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"     * @return String representation of date in MMM d yyyy format."},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    public static String convertToDate(String input) {"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"            LocalDate date \u003d LocalDate.parse(input);"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"            return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"            return input;"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"     * Returns string representation of Event."},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"     * @return String of Event."},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"    @Override"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + Event.convertToDate(at) + \")\";"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":58}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":" * Task has a description and maintains a isDone state."},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"public class Task {"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"    protected String description;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    protected boolean isDone;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    private final String TICK \u003d \"\\u2713\";"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    private final String CROSS \u003d \"\\u2718\";"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    public Task(String description) {"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        this.description \u003d description;"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        this.isDone \u003d false;"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        this.description \u003d description;"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"     * Returns a tick or cross string depending on whether the task is marked as isDone or not."},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"     * @return A tick or cross string."},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"    public String getStatusIcon() {"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        return (isDone ? TICK : CROSS); //return tick or X symbols"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"     * Toggles the value of isDone."},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"     * @return Updated boolean value after toggling."},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"    public boolean toggleIsDone() {"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"        isDone \u003d !isDone;"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"        return isDone;"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"     * Updates isDone to true and returns true."},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"     * @return The boolean value, true."},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"    public boolean setIsDone() {"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"        isDone \u003d true;"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"        return isDone;"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"     * Generates the string to be saved for the next user session locally."},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"     * @return String representing task state."},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"    public String getDescription() {"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"        return description;"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":62,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":63,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"Task *** 1 *** \" + description : \"Task *** 0 *** \" + description;"},{"lineNumber":64,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":66,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":67,"author":{"gitId":"maxxng"},"content":"     * Returns string representation of Task."},{"lineNumber":68,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":69,"author":{"gitId":"maxxng"},"content":"     * @return String representation of task."},{"lineNumber":70,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":71,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":72,"author":{"gitId":"maxxng"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":73,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":74}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":" * Todo is a type of Task which has a description."},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":" * It also maintains a isDone state."},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"public class Todo extends Task {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    public Todo(String description) {"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"        super(description);"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        super(description, isDone);"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"     * Returns the string representation of a Todo object when saving locally."},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"     * @return String of Todo for saving locally."},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"T --- 1 --- \" + description : \"T --- 0 --- \" + description;"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"     * Returns string representation of Todo object."},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"     * @return String of Todo."},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    @Override"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":34}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.ui;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"/**"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":" * The Ui class handles the printing of the user interface and reading of user input."},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":" */"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"public class Ui {"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"     * A customized greeting message to be printed when the program starts."},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"     * @return The welcome message to be printed at the start."},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    public String greetingMessage() {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"        return \"Welcome back Max\""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"                + \"\\n\""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"                + \"What can I do for you?\\n\";"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"     * The line separating the user\u0027s input and the program\u0027s output."},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"     * @return A string that represents a break between the user and duke\u0027s response."},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    public String separatorLine() {"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"        return (\"____________________________________________________________\");"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"     * The message to be printed when the program exits without issues."},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"    public String exitMessage() {"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"        return (\"Bye. Hope to see you again soon!\");"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"     * Reads the user\u0027s input and returns the user\u0027s input as a string."},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"     *"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"     * @return string of user\u0027s input."},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"     */"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"    public String readInput() {"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"        return input;"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":47}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    \u003cchildren\u003e"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    \u003c/children\u003e"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    \u003cpadding\u003e"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    \u003c/padding\u003e"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"maxxng":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.javafx.MainWindow\"\u003e"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"            \u003ccontent\u003e"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"            \u003c/content\u003e"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    \u003c/children\u003e"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"maxxng":19}},{"path":"src/test/java/duke/customClass/CommandRouterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.processintructions.CommandRouter;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"class CommandRouterTest {"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    public void testIsDoneDefaultFalse() {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        CommandRouter cr \u003d new CommandRouter();"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        assertEquals(false, cr.isExit());"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":16}},{"path":"src/test/java/duke/customClass/LogicHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.processintructions.LogicHandler;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.io.PrintStream;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"import java.util.ArrayList;"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"class LogicHandlerTest {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    @BeforeEach"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    public void setUpStreams() {"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    public void out() {"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"        System.out.print(\"hello\");"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"        assertEquals(\"hello\", outContent.toString());"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    public void TestTodo() {"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"        LogicHandler lh \u003d new LogicHandler();"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"        List\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"        lh.todo(\"todo homework\", tempList);"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        assertEquals(\"added: [T][✘] homework\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"                , outContent.toString());"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"    public void TestDeadline() {"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"        LogicHandler lh \u003d new LogicHandler();"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"        List\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"        lh.deadline(\"deadline homework /by 2021-01-31\", tempList);"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"        assertEquals(\"added: [D][✘] homework (by: Jan 31 2021)\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"                , outContent.toString());"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"    @AfterEach"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"    public void restoreStreams() {"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"        System.setOut(originalOut);"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":52}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"class EventTest {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    public void saveStringTest() {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        Event event \u003d new Event(\"birthday\", \"today\");"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        assertEquals(event.saveString(), \"E --- 0 --- birthday --- today\");"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":15}},{"path":"src/test/java/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"class TodoTest {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    void saveStringTest() {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        Todo todo \u003d new Todo(\"wash dishes\", true);"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        assertEquals(todo.saveString(), \"T --- 1 --- wash dishes\");"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"todo clean room"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"deadline assignment /by thursday"},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"event movie /at tonight"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"list"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"delete 3"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"list"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"bye"}],"authorContributionMap":{"maxxng":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"maxxng":1,"-":20}}]
