[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"# duke.Duke project template"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it."},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version."},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`."},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`."},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults."},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk)."},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"1. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()`. If the setup is correct, you should see something like the below:"},{"lineNumber":16,"author":{"gitId":"-"},"content":"   ```"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   Hello from"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    ____        _        "},{"lineNumber":19,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ "},{"lineNumber":20,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   ```"}],"authorContributionMap":{"maxxng":2,"-":21}},{"path":"src/data/duke.tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"D --- 0 --- how --- today"}],"authorContributionMap":{"maxxng":1}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.customClass.Command;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.customClass.Ui;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import duke.customClass.Storage;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import duke.customClass.TaskList;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import duke.customClass.Parser;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import duke.customClass.CommandRouter;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    private Ui ui;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    private Storage storage;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    private TaskList tasks;"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    public Duke(String path) {"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        ui \u003d new Ui();"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"        storage \u003d new Storage(path);"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        tasks \u003d new TaskList();"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"        tasks.dataInput(storage.loadData());"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    public void run() {"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"        CommandRouter commandRouter \u003d new CommandRouter();"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"        boolean isExit \u003d false;"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"        ui.greetingMessage();"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        while (!isExit) {"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"            String inputCommand \u003d ui.readInput();"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"            ui.separatorLine();"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"            Command parsedCommand \u003d Parser.parse(inputCommand);"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"            commandRouter.route(parsedCommand, tasks, inputCommand);"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"            isExit \u003d commandRouter.isExit();"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"            ui.separatorLine();"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"        storage.save(tasks.getList());"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"        ui.exitMessage();"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"    public static void main(String[] args) {"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"        new Duke(\"src/data/duke.tasks.txt\").run();"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":""}],"authorContributionMap":{"maxxng":44,"-":3}},{"path":"src/main/java/duke/customClass/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"public enum Command {"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"    TODO,"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"    DEADLINE,"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    EVENT,"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"    DELETE,"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    LIST,"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    DONE,"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    BYE,"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    ERROR;"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":12}},{"path":"src/main/java/duke/customClass/CommandRouter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"public class CommandRouter {"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"    private boolean isExit;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    public CommandRouter() {"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"        isExit \u003d false;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    public void route(Command c, TaskList tasks, String input) {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        LogicHandler logic \u003d new LogicHandler();"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        switch (c) {"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        case LIST:"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"            logic.list(tasks.getList());"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"        case DONE:"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"            logic.done(input, tasks.getList());"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        case TODO:"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"            logic.todo(input, tasks.getList());"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        case DEADLINE:"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"            logic.deadline(input, tasks.getList());"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"        case EVENT:"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"            logic.event(input, tasks.getList());"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"        case DELETE:"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"            logic.delete(input, tasks.getList());"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"        case ERROR:"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Oops, that is not a command I support.\");"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"        case BYE:"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"            isExit \u003d true;"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"            break;"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"        default:"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Internal error in code.\");"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"    public boolean isExit() {"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"        return isExit;"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":45}},{"path":"src/main/java/duke/customClass/LogicHandler.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"public class LogicHandler {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    public void list(List\u003cTask\u003e list) {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        // Check if the command is list and display the list of duke.tasks."},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        String temp \u003d \"\";"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"            temp +\u003d String.format(\"%d. %s\", i + 1, list.get(i));"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"            if (i !\u003d list.size() - 1) {"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"                temp +\u003d \"\\n\";"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        System.out.println(temp);"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    public void done(String input, List\u003cTask\u003e list) {"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"            int itemNumber \u003d Integer.valueOf(input.split(\" \")[1]) - 1;"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"            list.get(itemNumber).toggleIsDone();"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"            System.out.println("},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"                    \"Nice! I\u0027ve marked this task as done:\\n\" + list.get(itemNumber)"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"            );"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Oops, your done command should have a task number behind.\");"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Oops, your done command should be followed by an integer.\");"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Oops, your done command included an invalid index in the task list.\");"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"    public void todo(String input, List\u003cTask\u003e list) {"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"            Todo todo \u003d new Todo(input.split(\" \", 2)[1]);"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"            list.add(todo);"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"added: \" + todo);"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Oops, your todo requires at least a description.\");"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"    public void deadline(String input, List\u003cTask\u003e list) {"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"            String taskAndDate \u003d input.split(\" \", 2)[1];"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":"            String task \u003d taskAndDate.split(\" /by \")[0];"},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"            String date \u003d taskAndDate.split(\" /by \")[1];"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"            Deadline deadline \u003d new Deadline(task, date);"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"            list.add(deadline);"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"added: \" + deadline);"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":61,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":62,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Oops, your deadline requires both a description and date.\");"},{"lineNumber":63,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":64,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":65,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":66,"author":{"gitId":"maxxng"},"content":"    public void event(String input, List\u003cTask\u003e list) {"},{"lineNumber":67,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"maxxng"},"content":"            String taskAndDate \u003d input.split(\" \", 2)[1];"},{"lineNumber":69,"author":{"gitId":"maxxng"},"content":"            String task \u003d taskAndDate.split(\" /at \")[0];"},{"lineNumber":70,"author":{"gitId":"maxxng"},"content":"            String date \u003d taskAndDate.split(\" /at \")[1];"},{"lineNumber":71,"author":{"gitId":"maxxng"},"content":"            Event event \u003d new Event(task, date);"},{"lineNumber":72,"author":{"gitId":"maxxng"},"content":"            list.add(event);"},{"lineNumber":73,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"added: \" + event);"},{"lineNumber":74,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Now you have \" + list.size() + \" tasks in the list.\");"},{"lineNumber":75,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":76,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Oops, your Event requires both a description and date\");"},{"lineNumber":77,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":78,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":80,"author":{"gitId":"maxxng"},"content":"    public void delete(String input, List\u003cTask\u003e list) {"},{"lineNumber":81,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":82,"author":{"gitId":"maxxng"},"content":"            int index \u003d Integer.valueOf(input.split(\" \", 2)[1]);"},{"lineNumber":83,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Noted. I\u0027ve removed the task:\\n\" + list.get(index - 1) +"},{"lineNumber":84,"author":{"gitId":"maxxng"},"content":"                    \"\\nNow you have \" + (list.size() - 1) + \" tasks in the list.\");"},{"lineNumber":85,"author":{"gitId":"maxxng"},"content":"            list.remove(index - 1);"},{"lineNumber":86,"author":{"gitId":"maxxng"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":87,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Delete requires a number\");"},{"lineNumber":88,"author":{"gitId":"maxxng"},"content":"        } catch (IndexOutOfBoundsException e) {"},{"lineNumber":89,"author":{"gitId":"maxxng"},"content":"            System.out.println(e);"},{"lineNumber":90,"author":{"gitId":"maxxng"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":91,"author":{"gitId":"maxxng"},"content":"            System.out.println(e);"},{"lineNumber":92,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":93,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":95,"author":{"gitId":"maxxng"},"content":"    public void add(List\u003cTask\u003e list, Task t) {"},{"lineNumber":96,"author":{"gitId":"maxxng"},"content":"        list.add(t);"},{"lineNumber":97,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":98}},{"path":"src/main/java/duke/customClass/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"public class Parser {"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    public static Command parse(String input) {"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"        Command currentCommand;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"            currentCommand \u003d Command.valueOf(input.split(\" \")[0].toUpperCase());"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"            currentCommand \u003d Command.ERROR;"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        return currentCommand;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":16}},{"path":"src/main/java/duke/customClass/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import java.util.Scanner;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"public class Storage {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    private String path;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    public Storage(String path) {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        this.path \u003d path;"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    public String loadData() {"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"            File f \u003d new File(path);"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"            Scanner sc \u003d new Scanner(f);"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"            if (!f.exists()) {"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"                if (f.createNewFile())"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"                    System.out.println(\"File created\");"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"                else"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"                    System.out.println(\"File already exists\");"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"                return \"\";"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"            } else {"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"                String s \u003d \"\";"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"                while(sc.hasNext()) {"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"                    String currLine \u003d sc.nextLine();"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"                    s +\u003d currLine + \"\\n\";"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"                }"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"                return s;"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"        } catch (IOException e) {"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"            // Do not output error message, instead, create the dir and file"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"            // NOTE: THE PATH TO CREATE THE INIT FILE IS HARDCODED."},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"            File dir \u003d new File(\"src/data\");"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"            dir.mkdir();"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"            File file \u003d new File(\"src/data/duke.tasks.txt\");"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"            try {"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"                file.createNewFile();"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"            } catch (IOException err) {"},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"                System.out.println(\"Error: \" + err);"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"            return \"\";"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"    public void save(List\u003cTask\u003e list) {"},{"lineNumber":53,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":54,"author":{"gitId":"maxxng"},"content":"            FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":55,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":56,"author":{"gitId":"maxxng"},"content":"            for (Task task : list) {"},{"lineNumber":57,"author":{"gitId":"maxxng"},"content":"                fw.write(task.saveString() + \"\\n\");"},{"lineNumber":58,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":59,"author":{"gitId":"maxxng"},"content":"            fw.close();"},{"lineNumber":60,"author":{"gitId":"maxxng"},"content":"        } catch (IOException e) {"},{"lineNumber":61,"author":{"gitId":"maxxng"},"content":"            System.out.println(\"Error :\" + e);"},{"lineNumber":62,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":64}},{"path":"src/main/java/duke/customClass/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Deadline;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Event;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Todo;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"public class TaskList {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    private List\u003cTask\u003e list;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    public TaskList() {"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    public void dataInput(String data) {"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"        String[] ArrayOfTasksFromLoad \u003d data.split(\"\\n\");"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        for (String taskInStringForm : ArrayOfTasksFromLoad) {"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"            String[] currValues \u003d taskInStringForm.split(\"\\\\s*---\\\\s*\");"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"            switch (currValues[0]) {"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"            case \"T\":"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"                Todo t \u003d new Todo(currValues[2], currValues[1].equals(\"1\"));"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"                list.add(t);"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"                break;"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"            case \"D\":"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"                Deadline d \u003d new Deadline(currValues[2], currValues[1].equals(\"1\"), currValues[3]);"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"                list.add(d);"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"                break;"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"            case \"E\":"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"                Event e \u003d new Event(currValues[2], currValues[1].equals(\"1\"), currValues[3]);"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"                list.add(e);"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"                break;"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"            default:"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"                System.out.println(\"Error with the written file.\");"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"            }"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"    public List\u003cTask\u003e getList() {"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"        return list;"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":44}},{"path":"src/main/java/duke/customClass/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.util.Scanner;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    public Ui () {"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    public void greetingMessage() {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        String logo \u003d \"   ___     ___    _  _     ___     ___     _\\n\" +"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"                \"  |   \\\\   /   \\\\  | \\\\| |   |_ _|   | __|   | |\\n\" +"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"                \"  | |) |  | - |  | .` |    | |    | _|    | |__\\n\" +"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"                \"  |___/   |_|_|  |_|\\\\_|   |___|   |___|   |____|\\n\" +"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"                \"_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|_|\\\"\\\"\\\"\\\"\\\"|\\n\" +"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"                \"\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\\"`-0-0-\u0027\\n\";"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        System.out.println(\"Welcome back Max, I\u0027m a Dumb Assistant \" +"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"                \"Naively Intended (to) Ease Labour\\n\" + logo +"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"                \"____________________________________________________________\\n\" +"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"                \"What can I do for you?\\n\" +"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"                \"____________________________________________________________\");"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    public void separatorLine() {"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"        System.out.println(\"____________________________________________________________\");"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"    public void exitMessage() {"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    public String readInput() {"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"        String input \u003d sc.nextLine();"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"        return input;"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":37}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    protected String by;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    public Deadline(String description, String by) {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        this.by \u003d by;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    public Deadline(String description, boolean isDone, String by) {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"        super(description, isDone);"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        this.by \u003d by;"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"D --- 1 --- \" + description + \" --- \" + by : \"D --- 0 --- \" + description + \" --- \" + by;"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    public static String convertToDate(String input) {"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"            LocalDate date \u003d LocalDate.parse(input);"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"            return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"            return input;"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + Deadline.convertToDate(by) + \")\";"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":37}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import java.time.DateTimeException;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import java.time.LocalDate;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"    protected String at;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    public Event(String description, String at) {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        super(description);"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        this.at \u003d at;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    public Event(String description, boolean isDone, String at) {"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        super(description, isDone);"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"        this.at \u003d at;"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"E --- 1 --- \" + description + \" --- \" + at : \"E --- 0 --- \" + description + \" --- \" + at;"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    public static String convertToDate(String input) {"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"            LocalDate date \u003d LocalDate.parse(input);"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"            return date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"        } catch (DateTimeException e) {"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"            return input;"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"    @Override"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        return \"[E]\" + super.toString() + \" (at: \" + Event.convertToDate(at) + \")\";"},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":38}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"public class Task {"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"    protected String description;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"    protected boolean isDone;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"    public Task(String description) {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"        this.description \u003d description;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"        this.isDone \u003d false;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"    public Task(String description, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        this.description \u003d description;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    public String getStatusIcon() {"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    public boolean toggleIsDone() {"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        isDone \u003d !isDone;"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"        return isDone;"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"Task *** 1 *** \" + description : \"Task *** 0 *** \" + description;"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":33}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"public class Todo extends Task {"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"    public Todo(String description) {"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"        super(description);"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"    public Todo(String description, boolean isDone) {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"        super(description, isDone);"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    public String saveString() {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        return isDone ? \"T --- 1 --- \" + description : \"T --- 0 --- \" + description;"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"    @Override"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":19}},{"path":"src/test/duke/customClass/CommandRouterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import duke.customClass.Command;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"class CommandRouterTest {"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"    public void testIsDoneDefaultFalse() {"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        CommandRouter cr \u003d new CommandRouter();"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"        assertEquals(false, cr.isExit());"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":16}},{"path":"src/test/duke/customClass/LogicHandlerTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.customClass;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.AfterEach;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.BeforeEach;"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"import java.io.ByteArrayOutputStream;"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"import java.io.PrintStream;"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Task;"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"import duke.tasks.Todo;"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"class LogicHandlerTest {"},{"lineNumber":16,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":17,"author":{"gitId":"maxxng"},"content":"    private final ByteArrayOutputStream outContent \u003d new ByteArrayOutputStream();"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"    private final PrintStream originalOut \u003d System.out;"},{"lineNumber":19,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":20,"author":{"gitId":"maxxng"},"content":"    @BeforeEach"},{"lineNumber":21,"author":{"gitId":"maxxng"},"content":"    public void setUpStreams() {"},{"lineNumber":22,"author":{"gitId":"maxxng"},"content":"        System.setOut(new PrintStream(outContent));"},{"lineNumber":23,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":25,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":26,"author":{"gitId":"maxxng"},"content":"    public void out() {"},{"lineNumber":27,"author":{"gitId":"maxxng"},"content":"        System.out.print(\"hello\");"},{"lineNumber":28,"author":{"gitId":"maxxng"},"content":"        assertEquals(\"hello\", outContent.toString());"},{"lineNumber":29,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":31,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":32,"author":{"gitId":"maxxng"},"content":"    public void TestTodo() {"},{"lineNumber":33,"author":{"gitId":"maxxng"},"content":"        LogicHandler lh \u003d new LogicHandler();"},{"lineNumber":34,"author":{"gitId":"maxxng"},"content":"        List\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":35,"author":{"gitId":"maxxng"},"content":"        lh.todo(\"todo homework\", tempList);"},{"lineNumber":36,"author":{"gitId":"maxxng"},"content":"        assertEquals(\"added: [T][✘] homework\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":37,"author":{"gitId":"maxxng"},"content":"                , outContent.toString());"},{"lineNumber":38,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":39,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":40,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":41,"author":{"gitId":"maxxng"},"content":"    public void TestDeadline() {"},{"lineNumber":42,"author":{"gitId":"maxxng"},"content":"        LogicHandler lh \u003d new LogicHandler();"},{"lineNumber":43,"author":{"gitId":"maxxng"},"content":"        List\u003cTask\u003e tempList \u003d new ArrayList\u003c\u003e();"},{"lineNumber":44,"author":{"gitId":"maxxng"},"content":"        lh.deadline(\"deadline homework /by 2021-01-31\", tempList);"},{"lineNumber":45,"author":{"gitId":"maxxng"},"content":"        assertEquals(\"added: [D][✘] homework (by: Jan 31 2021)\\nNow you have 1 tasks in the list.\\n\""},{"lineNumber":46,"author":{"gitId":"maxxng"},"content":"                , outContent.toString());"},{"lineNumber":47,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":48,"author":{"gitId":"maxxng"},"content":"    @AfterEach"},{"lineNumber":49,"author":{"gitId":"maxxng"},"content":"    public void restoreStreams() {"},{"lineNumber":50,"author":{"gitId":"maxxng"},"content":"        System.setOut(originalOut);"},{"lineNumber":51,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":52,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":52}},{"path":"src/test/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"class EventTest {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    public void saveStringTest() {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        Event event \u003d new Event(\"birthday\", \"today\");"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        assertEquals(event.saveString(), \"E --- 0 --- birthday --- today\");"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":15,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":15}},{"path":"src/test/duke/tasks/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"package duke.tasks;"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"class TodoTest {"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":""},{"lineNumber":9,"author":{"gitId":"maxxng"},"content":"    @Test"},{"lineNumber":10,"author":{"gitId":"maxxng"},"content":"    void saveStringTest() {"},{"lineNumber":11,"author":{"gitId":"maxxng"},"content":"        Todo todo \u003d new Todo(\"wash dishes\", true);"},{"lineNumber":12,"author":{"gitId":"maxxng"},"content":"        assertEquals(todo.saveString(), \"T --- 1 --- wash dishes\");"},{"lineNumber":13,"author":{"gitId":"maxxng"},"content":"    }"},{"lineNumber":14,"author":{"gitId":"maxxng"},"content":"}"}],"authorContributionMap":{"maxxng":14}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"maxxng"},"content":"todo clean room"},{"lineNumber":2,"author":{"gitId":"maxxng"},"content":"deadline assignment /by thursday"},{"lineNumber":3,"author":{"gitId":"maxxng"},"content":"event movie /at tonight"},{"lineNumber":4,"author":{"gitId":"maxxng"},"content":"done 2"},{"lineNumber":5,"author":{"gitId":"maxxng"},"content":"list"},{"lineNumber":6,"author":{"gitId":"maxxng"},"content":"delete 3"},{"lineNumber":7,"author":{"gitId":"maxxng"},"content":"list"},{"lineNumber":8,"author":{"gitId":"maxxng"},"content":"bye"}],"authorContributionMap":{"maxxng":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin"},{"lineNumber":5,"author":{"gitId":"-"},"content":""},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 ("},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1"},{"lineNumber":14,"author":{"gitId":"-"},"content":")"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":18,"author":{"gitId":"maxxng"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT"}],"authorContributionMap":{"maxxng":1,"-":20}}]
