[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"T | 0 | rollover"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"T | 1 | jump"}],"authorContributionMap":{"kwmiw":2}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"public class Command {"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"    String commandDescription;"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"    boolean isDone;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"    // Constructor of Command class"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"    public Command(String commandDescription) {"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"        this.commandDescription \u003d commandDescription;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"    public Command markDone() {"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d true;"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"        return this;"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    //Getters"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    public String getDescription() {"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"        return this.commandDescription;"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    public String getDone() {"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"        if (isDone) {"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"            return \" 1 \";"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"            return \" 0 \";"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"        if (this.isDone) {"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"            return \"[X] \" + this.commandDescription;"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"            return \"[ ] \" + this.commandDescription;"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":38}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"public class Deadline extends Command {"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"    public LocalDate dueDate;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"    private String formattedDate;"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"    public Deadline(String commandDescription, LocalDate dueDate) {"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"        super(commandDescription);"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"        this.formattedDate \u003d this.dueDate.format(format);"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    public String getTime() {"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"        return this.dueDate;"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"        return \"[D] \" + super.toString() + \" | by: \" + formattedDate;"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":27}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"/*"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"  Doge Duke implements a virtual pet application that"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"  returns different commands passed by owner (user)."},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"  @author Chia Jia-Xi, Kymie"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":" * @version 1.0"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * @since 2021-01-31"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"import java.io.File;"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"import java.io.FileWriter;"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"import java.nio.file.Files;"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"import java.nio.file.Path;"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"import java.nio.file.Paths;"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"import java.util.Scanner;"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"import java.io.IOException;"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"        Scanner sc \u003d new Scanner(System.in);"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"        String filePath \u003d \"./data/duke.txt\";"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"        Path path \u003d Paths.get(\"./data/duke.txt\");"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"            File file \u003d new File(filePath);"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"            Files.createDirectories(Path.of(file.getParent()));"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"            Files.createFile(path);"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"        } catch (IOException e) {"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"            e.printStackTrace();"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        String logo \u003d \"░▄▀▄▀▀▀▀▄▀▄░░░░░░░░░\\n\""},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"                + \"░█░░░░░░░░▀▄░░░░░░▄░\\n\""},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"                + \"█░░▀░░▀░░░░░▀▄▄░░█░█\\n\""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"                + \"█░▄░█▀░▄░░░░░░░▀▀░░█\\n\""},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"                + \"█░░▀▀▀▀░░░░░░░░░░░░█\\n\""},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"                + \"█░░░░░░░░░░░░░░░░░░█\\n\""},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"                + \"█░░░░░░░░░░░░░░░░░░█\\n\""},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"                + \"░█░░▄▄░░▄▄▄▄░░▄▄░░█░\\n\""},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"                + \"░█░▄▀█░▄▀░░█░▄▀█░▄▀░\\n\""},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"                + \"░░▀░░░▀░░░░░▀░░░▀░░░\\n\";"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"        System.out.println(\"Greetings from\\n\" + logo);"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"        String spacer \u003d \"\\n____________________________________________________________\\n\";"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"        String greet \u003d \"Woof! I\u0027m Doge Duke\\n\""},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"                + \"What do you want me to do?\\n\""},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"                + \"Type your request in below!\\n\";"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"        String goodbye \u003d \"Bye! Hope I was a good dog, \""},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"                + \"see you again soon!\";"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"        String terminate \u003d \"bye\";"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"        System.out.println(spacer + greet + spacer);"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"        int ctr \u003d 0;"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"        ArrayList\u003cCommand\u003e commands \u003d new ArrayList\u003cCommand\u003e();"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"        String separator \u003d \" \";"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"        while (true) {"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"            String input \u003d sc.nextLine().trim();"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"            try {"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"                // Check for errors in errorHandling() method"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"                errorHandling(input);"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"                // To recognise terminating condition"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"                if (input.equals(terminate)) {"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(spacer + goodbye + spacer);"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"                    break;"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"                }"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"                // To recognise List user input"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"                if (input.equals(\"list\")) {"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(spacer);"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"                    printList(commands);"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(spacer);"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"                // To recognise Done user input"},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"                } else if (input.contains(\"done\")) {"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"                    String[] doneCommand \u003d input.split(separator);"},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":"                    int id \u003d Integer.parseInt(doneCommand[1]) - 1;"},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"                    Command command \u003d commands.get(id);"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":"                    commands.set(id, command.markDone());"},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(spacer + \"Woof! \""},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"                            + \"I have completed these commands before:\\n\");"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":"                    printList(commands);"},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(spacer);"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"                    save(commands, filePath);"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"                } else if (input.contains(\"delete\")) {"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":"                    String[] deleteCommand \u003d input.split(separator);"},{"lineNumber":99,"author":{"gitId":"kwmiw"},"content":"                    int id \u003d Integer.parseInt(deleteCommand[1]) - 1;"},{"lineNumber":100,"author":{"gitId":"kwmiw"},"content":"                    int len \u003d commands.size();"},{"lineNumber":101,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":102,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(spacer + \"Noted! \""},{"lineNumber":103,"author":{"gitId":"kwmiw"},"content":"                            + \"This task has been removed:\\n\""},{"lineNumber":104,"author":{"gitId":"kwmiw"},"content":"                            + commands.get(id)"},{"lineNumber":105,"author":{"gitId":"kwmiw"},"content":"                            + \"\\n\""},{"lineNumber":106,"author":{"gitId":"kwmiw"},"content":"                            + \"Now you have \""},{"lineNumber":107,"author":{"gitId":"kwmiw"},"content":"                            + (len - 1)"},{"lineNumber":108,"author":{"gitId":"kwmiw"},"content":"                            + \" commands remaining.\");"},{"lineNumber":109,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":110,"author":{"gitId":"kwmiw"},"content":"                    commands.remove(id);"},{"lineNumber":111,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(spacer);"},{"lineNumber":112,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":113,"author":{"gitId":"kwmiw"},"content":"                    save(commands, filePath);"},{"lineNumber":114,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":115,"author":{"gitId":"kwmiw"},"content":"                } else {"},{"lineNumber":116,"author":{"gitId":"kwmiw"},"content":"                    Command command;"},{"lineNumber":117,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"                    // To recognise ToDo user input"},{"lineNumber":119,"author":{"gitId":"kwmiw"},"content":"                    if (input.contains(\"todo\")) {"},{"lineNumber":120,"author":{"gitId":"kwmiw"},"content":"                        String[] description \u003d input.split(\" \");"},{"lineNumber":121,"author":{"gitId":"kwmiw"},"content":"                        command \u003d new ToDo(description[1]);"},{"lineNumber":122,"author":{"gitId":"kwmiw"},"content":"                        commands.add(command);"},{"lineNumber":123,"author":{"gitId":"kwmiw"},"content":"                        int len \u003d commands.size();"},{"lineNumber":124,"author":{"gitId":"kwmiw"},"content":"                        System.out.println(spacer"},{"lineNumber":125,"author":{"gitId":"kwmiw"},"content":"                                + \"Mlem I\u0027ve added a new command for you to do:\\n\""},{"lineNumber":126,"author":{"gitId":"kwmiw"},"content":"                                + commands.get(len - 1)"},{"lineNumber":127,"author":{"gitId":"kwmiw"},"content":"                                + \"\\n\""},{"lineNumber":128,"author":{"gitId":"kwmiw"},"content":"                                + \"Now I can do a total of \""},{"lineNumber":129,"author":{"gitId":"kwmiw"},"content":"                                + len"},{"lineNumber":130,"author":{"gitId":"kwmiw"},"content":"                                + \" commands!\""},{"lineNumber":131,"author":{"gitId":"kwmiw"},"content":"                                + spacer);"},{"lineNumber":132,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":133,"author":{"gitId":"kwmiw"},"content":"                        save(commands, filePath);"},{"lineNumber":134,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":135,"author":{"gitId":"kwmiw"},"content":"                    // To recognise Event user input"},{"lineNumber":136,"author":{"gitId":"kwmiw"},"content":"                    } else if (input.contains(\"event\")) {"},{"lineNumber":137,"author":{"gitId":"kwmiw"},"content":"                        String[] inputTime \u003d input.split(\" /at \");"},{"lineNumber":138,"author":{"gitId":"kwmiw"},"content":"                        LocalDate parseDate \u003d LocalDate.parse(inputTime[1].trim());"},{"lineNumber":139,"author":{"gitId":"kwmiw"},"content":"                        command \u003d new Event(inputTime[0].substring(6), parseDate);"},{"lineNumber":140,"author":{"gitId":"kwmiw"},"content":"                        commands.add(command);"},{"lineNumber":141,"author":{"gitId":"kwmiw"},"content":"                        int len \u003d commands.size();"},{"lineNumber":142,"author":{"gitId":"kwmiw"},"content":"                        System.out.println(spacer"},{"lineNumber":143,"author":{"gitId":"kwmiw"},"content":"                                + \"Much wow! I\u0027ve added a new command with an Event:\\n\""},{"lineNumber":144,"author":{"gitId":"kwmiw"},"content":"                                + commands.get(len - 1)"},{"lineNumber":145,"author":{"gitId":"kwmiw"},"content":"                                + \"\\n\""},{"lineNumber":146,"author":{"gitId":"kwmiw"},"content":"                                + \"Now I can do a total of \""},{"lineNumber":147,"author":{"gitId":"kwmiw"},"content":"                                + len"},{"lineNumber":148,"author":{"gitId":"kwmiw"},"content":"                                + \" commands!\""},{"lineNumber":149,"author":{"gitId":"kwmiw"},"content":"                                + spacer);"},{"lineNumber":150,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":151,"author":{"gitId":"kwmiw"},"content":"                        save(commands, filePath);"},{"lineNumber":152,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":153,"author":{"gitId":"kwmiw"},"content":"                    // To recognise Deadline user input"},{"lineNumber":154,"author":{"gitId":"kwmiw"},"content":"                    } else if (input.contains(\"deadline\")) {"},{"lineNumber":155,"author":{"gitId":"kwmiw"},"content":"                        String[] inputTime \u003d input.split(\" /by \");"},{"lineNumber":156,"author":{"gitId":"kwmiw"},"content":"                        LocalDate parseDate \u003d LocalDate.parse(inputTime[1].trim());"},{"lineNumber":157,"author":{"gitId":"kwmiw"},"content":"                        command \u003d new Deadline(inputTime[0].substring(9), parseDate);"},{"lineNumber":158,"author":{"gitId":"kwmiw"},"content":"                        commands.add(command);"},{"lineNumber":159,"author":{"gitId":"kwmiw"},"content":"                        int len \u003d commands.size();"},{"lineNumber":160,"author":{"gitId":"kwmiw"},"content":"                        System.out.println(spacer"},{"lineNumber":161,"author":{"gitId":"kwmiw"},"content":"                                + \"Woofers! I\u0027ve added a new command with a Ded-line:\\n\""},{"lineNumber":162,"author":{"gitId":"kwmiw"},"content":"                                + commands.get(len - 1)"},{"lineNumber":163,"author":{"gitId":"kwmiw"},"content":"                                + \"\\n\""},{"lineNumber":164,"author":{"gitId":"kwmiw"},"content":"                                + \"Now I can do a total of \""},{"lineNumber":165,"author":{"gitId":"kwmiw"},"content":"                                + len"},{"lineNumber":166,"author":{"gitId":"kwmiw"},"content":"                                + \" commands!\""},{"lineNumber":167,"author":{"gitId":"kwmiw"},"content":"                                + spacer);"},{"lineNumber":168,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":169,"author":{"gitId":"kwmiw"},"content":"                        save(commands, filePath);"},{"lineNumber":170,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":171,"author":{"gitId":"kwmiw"},"content":"                    } else {}"},{"lineNumber":172,"author":{"gitId":"kwmiw"},"content":"                }"},{"lineNumber":173,"author":{"gitId":"kwmiw"},"content":"            } catch (DateTimeParseException e) {"},{"lineNumber":174,"author":{"gitId":"kwmiw"},"content":"                    System.out.println(\"This date doesnt exist! \""},{"lineNumber":175,"author":{"gitId":"kwmiw"},"content":"                            + \"The right format should be in yyyy-mm-dd.\");"},{"lineNumber":176,"author":{"gitId":"kwmiw"},"content":"            } catch (Exception e) {"},{"lineNumber":177,"author":{"gitId":"kwmiw"},"content":"                System.out.println(e);"},{"lineNumber":178,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":179,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":180,"author":{"gitId":"kwmiw"},"content":"        sc.close();"},{"lineNumber":181,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":183,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":184,"author":{"gitId":"kwmiw"},"content":"     * Displays Hashmap of all commands Duke is"},{"lineNumber":185,"author":{"gitId":"kwmiw"},"content":"     * trained to do"},{"lineNumber":186,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":187,"author":{"gitId":"kwmiw"},"content":"     * @param xs ArrayList that retains all commands"},{"lineNumber":188,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":189,"author":{"gitId":"kwmiw"},"content":"    static void printList(ArrayList\u003cCommand\u003e xs) {"},{"lineNumber":190,"author":{"gitId":"kwmiw"},"content":"        for (int i \u003d 0; i \u003c xs.size(); i++) {"},{"lineNumber":191,"author":{"gitId":"kwmiw"},"content":"            Command value \u003d xs.get(i);"},{"lineNumber":192,"author":{"gitId":"kwmiw"},"content":"            System.out.println((i + 1) + \". \" + value);"},{"lineNumber":193,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":194,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":195,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":196,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":197,"author":{"gitId":"kwmiw"},"content":"     * Identifies different error types"},{"lineNumber":198,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":199,"author":{"gitId":"kwmiw"},"content":"     * @param errorInput user inputs"},{"lineNumber":200,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":201,"author":{"gitId":"kwmiw"},"content":"    static void errorHandling(String errorInput) throws DukeException {"},{"lineNumber":202,"author":{"gitId":"kwmiw"},"content":"        String[] inputArr \u003d new String[100];"},{"lineNumber":203,"author":{"gitId":"kwmiw"},"content":"        if (errorInput.contains(\" \")) {"},{"lineNumber":204,"author":{"gitId":"kwmiw"},"content":"            inputArr \u003d errorInput.split(\" \");"},{"lineNumber":205,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":206,"author":{"gitId":"kwmiw"},"content":"            inputArr[0] \u003d errorInput;"},{"lineNumber":207,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":208,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":209,"author":{"gitId":"kwmiw"},"content":"        // Empty description"},{"lineNumber":210,"author":{"gitId":"kwmiw"},"content":"        if ((errorInput.contains(\"todo\")"},{"lineNumber":211,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"deadline\")"},{"lineNumber":212,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"event\"))"},{"lineNumber":213,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 inputArr[1] \u003d\u003d null) {"},{"lineNumber":214,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":215,"author":{"gitId":"kwmiw"},"content":"            throw new DukeException(\"Eh? Your command description cannot be empty. Try again!\");"},{"lineNumber":216,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":217,"author":{"gitId":"kwmiw"},"content":"        } else if (errorInput.contains(\"list\")"},{"lineNumber":218,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"bye\")) {"},{"lineNumber":219,"author":{"gitId":"kwmiw"},"content":"            //Do nothing"},{"lineNumber":220,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":221,"author":{"gitId":"kwmiw"},"content":"        } else if ((errorInput.contains(\"done\")"},{"lineNumber":222,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"delete\"))"},{"lineNumber":223,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 inputArr[1] \u003d\u003d null) {"},{"lineNumber":224,"author":{"gitId":"kwmiw"},"content":"            throw new DukeException(\"What are you referring to? Remember to key in the correct command id!\");"},{"lineNumber":225,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":226,"author":{"gitId":"kwmiw"},"content":"        } else if (inputArr[1] !\u003d null) {"},{"lineNumber":227,"author":{"gitId":"kwmiw"},"content":"            //Do nothing"},{"lineNumber":228,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":229,"author":{"gitId":"kwmiw"},"content":"        // Invalid description: unknown"},{"lineNumber":230,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":231,"author":{"gitId":"kwmiw"},"content":"            throw new DukeException(\"Whoops :( I\u0027m sorry, I\u0027m not sure what that means. \""},{"lineNumber":232,"author":{"gitId":"kwmiw"},"content":"                    + \"Did you forget to add a command type?\");"},{"lineNumber":233,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":234,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":235,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":236,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":237,"author":{"gitId":"kwmiw"},"content":"     * Method saves the current Command list"},{"lineNumber":238,"author":{"gitId":"kwmiw"},"content":"     * into a text file"},{"lineNumber":239,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":240,"author":{"gitId":"kwmiw"},"content":"     * @param xs ArrayList of commands"},{"lineNumber":241,"author":{"gitId":"kwmiw"},"content":"     * @param path Filepath of text file to save to"},{"lineNumber":242,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":243,"author":{"gitId":"kwmiw"},"content":"    static void save(ArrayList\u003cCommand\u003e xs, String path) {"},{"lineNumber":244,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":245,"author":{"gitId":"kwmiw"},"content":"            FileWriter fw \u003d new FileWriter(path);"},{"lineNumber":246,"author":{"gitId":"kwmiw"},"content":"            for (Command c : xs) {"},{"lineNumber":247,"author":{"gitId":"kwmiw"},"content":"                if (c instanceof ToDo) {"},{"lineNumber":248,"author":{"gitId":"kwmiw"},"content":"                    fw.write(\"T |\""},{"lineNumber":249,"author":{"gitId":"kwmiw"},"content":"                            + c.getDone()"},{"lineNumber":250,"author":{"gitId":"kwmiw"},"content":"                            + \"| \""},{"lineNumber":251,"author":{"gitId":"kwmiw"},"content":"                            + c.getDescription()"},{"lineNumber":252,"author":{"gitId":"kwmiw"},"content":"                            + \"\\n\");"},{"lineNumber":253,"author":{"gitId":"kwmiw"},"content":"                } else if (c instanceof Deadline) {"},{"lineNumber":254,"author":{"gitId":"kwmiw"},"content":"                    fw.write(\"D |\""},{"lineNumber":255,"author":{"gitId":"kwmiw"},"content":"                            + c.getDone()"},{"lineNumber":256,"author":{"gitId":"kwmiw"},"content":"                            + \"| \""},{"lineNumber":257,"author":{"gitId":"kwmiw"},"content":"                            + c.getDescription()"},{"lineNumber":258,"author":{"gitId":"kwmiw"},"content":"                            + \" | \""},{"lineNumber":259,"author":{"gitId":"kwmiw"},"content":"                            + ((Deadline) c).getTime()"},{"lineNumber":260,"author":{"gitId":"kwmiw"},"content":"                            + \"\\n\");"},{"lineNumber":261,"author":{"gitId":"kwmiw"},"content":"                } else if (c instanceof Event) {"},{"lineNumber":262,"author":{"gitId":"kwmiw"},"content":"                    fw.write(\"E |\""},{"lineNumber":263,"author":{"gitId":"kwmiw"},"content":"                            + c.getDone()"},{"lineNumber":264,"author":{"gitId":"kwmiw"},"content":"                            + \"| \""},{"lineNumber":265,"author":{"gitId":"kwmiw"},"content":"                            + c.getDescription()"},{"lineNumber":266,"author":{"gitId":"kwmiw"},"content":"                            + \" | \""},{"lineNumber":267,"author":{"gitId":"kwmiw"},"content":"                            + ((Event) c).getTime()"},{"lineNumber":268,"author":{"gitId":"kwmiw"},"content":"                            + \"\\n\");"},{"lineNumber":269,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":270,"author":{"gitId":"kwmiw"},"content":"                } else {"},{"lineNumber":271,"author":{"gitId":"kwmiw"},"content":"                    // Empty Description"},{"lineNumber":272,"author":{"gitId":"kwmiw"},"content":"                }"},{"lineNumber":273,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":274,"author":{"gitId":"kwmiw"},"content":"            fw.close();"},{"lineNumber":275,"author":{"gitId":"kwmiw"},"content":"        } catch(IOException e) {"},{"lineNumber":276,"author":{"gitId":"kwmiw"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":277,"author":{"gitId":"kwmiw"},"content":"            e.printStackTrace();"},{"lineNumber":278,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":279,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":280,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kwmiw":275,"-":5}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"public class DukeException extends Exception {"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"    public DukeException(String errorMsg) {"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"        super(errorMsg);"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":7}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDate;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"public class Event extends Command {"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"    public LocalDate eventDate;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"    private String formattedDate;"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"    public Event(String commandDescription, LocalDate eventDate) {"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"        super(commandDescription);"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"        this.formattedDate \u003d this.eventDate.format(format);"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    public String getTime() {"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"        return this.eventTime;"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"        return \"[E] \" + super.toString() + \" | at: \" + formattedDate;"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":25}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"public class ToDo extends Command {"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"    public ToDo(String commandDescription) {"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"        super(commandDescription);"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"        return \"[T] \" + super.toString();"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":12}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"T | 1 | rollover"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"D | 1 | finish doggo treats | friday 2359 hours"}],"authorContributionMap":{"kwmiw":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"paw"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"todo rollover"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"event dog festival /at 2021-02-10"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"deadline finish doggo treats /by 2021-03-11"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"shake"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"done 1"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"todo"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"done 3"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"delete"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"delete 2"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"list"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"bye"}],"authorContributionMap":{"kwmiw":12}}]
