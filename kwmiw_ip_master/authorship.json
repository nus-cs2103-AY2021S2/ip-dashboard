[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.8\u0027"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}"},{"lineNumber":12,"author":{"gitId":"-"},"content":""},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}"},{"lineNumber":17,"author":{"gitId":"-"},"content":""},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":23,"author":{"gitId":"-"},"content":""},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"}"},{"lineNumber":35,"author":{"gitId":"-"},"content":""},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"javafx {"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"    version \u003d \"11\""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027]"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}"},{"lineNumber":40,"author":{"gitId":"-"},"content":""},{"lineNumber":41,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":43,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    toolVersion \u003d \u00278.29\u0027"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"    configFile \u003d file(\"${rootDir}/config/checkstyle/checkstyle.xml\")"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}"},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"repositories {"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"    mavenCentral()"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"dependencies {"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-media\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"}"},{"lineNumber":72,"author":{"gitId":"-"},"content":""},{"lineNumber":73,"author":{"gitId":"-"},"content":"run {"},{"lineNumber":74,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kwmiw":26,"-":49}},{"path":"data/archive.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"T | 0 | 1"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"T | 0 | 2"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"T | 0 | 2"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"T | 0 | 2"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"T | 0 | 2"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"T | 0 | 2"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"T | 0 | 2"}],"authorContributionMap":{"kwmiw":7}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"T | 1 | smash"}],"authorContributionMap":{"kwmiw":1}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":4,"author":{"gitId":"-"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"+ Greet Doge Duke: `hi`"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"+ Add a **Todo** command: `todo`"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"+ Add an **Deadline** command: `deadline`"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"+ Add an **Event** command: `event`"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"+ List all commands : `list`"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"+ Complete a command: `done`"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"+ Delete a command : `delete`"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"+ Locate a command : `find`"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"+ Archive all commands: `archive`"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"+ Retrieve archived commands: `retrieve`"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"+ Exit Doge Duke : `bye`"},{"lineNumber":16,"author":{"gitId":"-"},"content":""},{"lineNumber":17,"author":{"gitId":"-"},"content":"## Usage"},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"### `hello` - Greet Doge Duke"},{"lineNumber":20,"author":{"gitId":"-"},"content":""},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"Starts the Doge Duke Programme."},{"lineNumber":22,"author":{"gitId":"-"},"content":""},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"Format: `hello`"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"hello"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":29,"author":{"gitId":"-"},"content":""},{"lineNumber":30,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"Woof! I\u0027m Doge Duke"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"What do you want me to do?"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"Type your request in below!"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"### `todo` - Add a Todo command"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"Adds a Todo Command to the current working Commands List."},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"Format: `todo {COMMAND_DESCRIPTION}`"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"+ `{COMMAND_DESCRIPTION}` is added to the Command List."},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"todo rollover"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"Mlem I\u0027ve added a new command for you to do:"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"[T] [ ] rollover"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"Now I can do a total of 1 commands!"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"### `deadline` - Add a Deadline command"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"Adds a Deadline Command to the current working Commands List."},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"Format: `deadline {COMMAND_DESCRIPTION} /by {DUE_DATE}`"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"+ `{COMMAND_DESCRIPTION}` is added to the Command List."},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"+ `{DUE_DATE}` isis added as a Due Date in YYYY-MM-DD format."},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"deadline finish doggo treats /by 2021-03-11"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"Woofers! I\u0027ve added a new command with a Ded-line:"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"[D] [ ] finish doggo treats | by: 11 Mar 2021"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"Now I can do a total of 3 commands!"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"### `event` - Add a Event command"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"Adds a Event Command to the current working Commands List."},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"Format: `event {COMMAND_DESCRIPTION} /by {EVENT_DATE}`"},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"+ `{COMMAND_DESCRIPTION}` is added to the Command List."},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"+ `{EVENT_DATE}` is added as a Event Date in YYYY-MM-DD format."},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":"event dog festival /at 2021-02-10"},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":"Much wow! I\u0027ve added a new command with an Event:"},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"[E] [ ] dog festival | at: 10 Feb 2021"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":"Now I can do a total of 2 commands!"},{"lineNumber":99,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":100,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":101,"author":{"gitId":"kwmiw"},"content":"### `list` - List all commands"},{"lineNumber":102,"author":{"gitId":"kwmiw"},"content":"Lists all Commands in the current working Command List in"},{"lineNumber":103,"author":{"gitId":"kwmiw"},"content":"an indexed format."},{"lineNumber":104,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":105,"author":{"gitId":"kwmiw"},"content":"Format: `list`"},{"lineNumber":106,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":107,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":108,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":109,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":110,"author":{"gitId":"kwmiw"},"content":"list"},{"lineNumber":111,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":112,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":113,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":114,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":115,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":116,"author":{"gitId":"kwmiw"},"content":"1. [T] [ ] rollover"},{"lineNumber":117,"author":{"gitId":"kwmiw"},"content":"2. [D] [ ] finish doggo treats | by: 11 Mar 2021"},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":119,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":120,"author":{"gitId":"kwmiw"},"content":"### `done` - Complete a command"},{"lineNumber":121,"author":{"gitId":"kwmiw"},"content":"Mark a Command for which the index/id is identified by the user"},{"lineNumber":122,"author":{"gitId":"kwmiw"},"content":"as Done from the current working Command List."},{"lineNumber":123,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":124,"author":{"gitId":"kwmiw"},"content":"Format: `done {COMMAND_ID}`"},{"lineNumber":125,"author":{"gitId":"kwmiw"},"content":"+ Marks the Command numbered {COMMAND_ID} in the Command List as Done."},{"lineNumber":126,"author":{"gitId":"-"},"content":""},{"lineNumber":127,"author":{"gitId":"-"},"content":"Example of usage:"},{"lineNumber":128,"author":{"gitId":"-"},"content":""},{"lineNumber":129,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":130,"author":{"gitId":"kwmiw"},"content":"done 2"},{"lineNumber":131,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":132,"author":{"gitId":"-"},"content":""},{"lineNumber":133,"author":{"gitId":"-"},"content":"Expected outcome:"},{"lineNumber":134,"author":{"gitId":"-"},"content":""},{"lineNumber":135,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":136,"author":{"gitId":"kwmiw"},"content":"1. [T] [ ] rollover"},{"lineNumber":137,"author":{"gitId":"kwmiw"},"content":"2. [D] [X] finish doggo treats | by: 11 Mar 2021"},{"lineNumber":138,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":139,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":140,"author":{"gitId":"kwmiw"},"content":"### `delete` - Delete a command"},{"lineNumber":141,"author":{"gitId":"kwmiw"},"content":"Deletes the Command for which the index/id is identified by the user"},{"lineNumber":142,"author":{"gitId":"kwmiw"},"content":"from the current working Command List."},{"lineNumber":143,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":144,"author":{"gitId":"kwmiw"},"content":"Format: `delete {COMMAND_ID}`"},{"lineNumber":145,"author":{"gitId":"kwmiw"},"content":"+ Delete the Command numbered {COMMAND_ID} in the Command List."},{"lineNumber":146,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":147,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":148,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":149,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":150,"author":{"gitId":"kwmiw"},"content":"delete 2"},{"lineNumber":151,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":152,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":153,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":154,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":155,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":156,"author":{"gitId":"kwmiw"},"content":"1. [T] [ ] rollover"},{"lineNumber":157,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":158,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":159,"author":{"gitId":"kwmiw"},"content":"### `find` - Locate a command"},{"lineNumber":160,"author":{"gitId":"kwmiw"},"content":"Deletes the Command for which the index/id is identified by the user"},{"lineNumber":161,"author":{"gitId":"kwmiw"},"content":"from the current working Command List."},{"lineNumber":162,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":163,"author":{"gitId":"kwmiw"},"content":"Format: `find {KEYWORD}`"},{"lineNumber":164,"author":{"gitId":"kwmiw"},"content":"+ Searches for `KEYWORD` in all the Command Descriptions of Commands in the current working"},{"lineNumber":165,"author":{"gitId":"kwmiw"},"content":"Command list."},{"lineNumber":166,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":167,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":168,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":169,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":170,"author":{"gitId":"kwmiw"},"content":"find roll"},{"lineNumber":171,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":172,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":173,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":174,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":175,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":176,"author":{"gitId":"kwmiw"},"content":"1. [T] [ ] rollover"},{"lineNumber":177,"author":{"gitId":"kwmiw"},"content":"2. [T] [ ] roll back"},{"lineNumber":178,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":179,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":180,"author":{"gitId":"kwmiw"},"content":"### `archive` - Archive all commands"},{"lineNumber":181,"author":{"gitId":"kwmiw"},"content":"Archive all Commands in the current working Command List to"},{"lineNumber":182,"author":{"gitId":"kwmiw"},"content":"a text file located in the data directory. User will start on a clean"},{"lineNumber":183,"author":{"gitId":"kwmiw"},"content":"slate, Command List will be empty."},{"lineNumber":184,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":185,"author":{"gitId":"kwmiw"},"content":"Format: `archive`"},{"lineNumber":186,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":187,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":188,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":189,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":190,"author":{"gitId":"kwmiw"},"content":"archive"},{"lineNumber":191,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":192,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":193,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":194,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":195,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":196,"author":{"gitId":"kwmiw"},"content":"Archived all commands in text file in your data folder!"},{"lineNumber":197,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":198,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":199,"author":{"gitId":"kwmiw"},"content":"### `retrieve` - Retrieved Archive commands"},{"lineNumber":200,"author":{"gitId":"kwmiw"},"content":"Retrieves all Commands previously archived and appends to"},{"lineNumber":201,"author":{"gitId":"kwmiw"},"content":"the back of current working Command List."},{"lineNumber":202,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":203,"author":{"gitId":"kwmiw"},"content":"Format: `retrieve`"},{"lineNumber":204,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":205,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":206,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":207,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":208,"author":{"gitId":"kwmiw"},"content":"retrieve"},{"lineNumber":209,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":210,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":211,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":212,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":213,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":214,"author":{"gitId":"kwmiw"},"content":"Your archived commands have been added back to your"},{"lineNumber":215,"author":{"gitId":"kwmiw"},"content":"current commands!"},{"lineNumber":216,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":217,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":218,"author":{"gitId":"kwmiw"},"content":"### `bye` - Exit Doge Duke"},{"lineNumber":219,"author":{"gitId":"kwmiw"},"content":"Terminates the Doge Duke Programme."},{"lineNumber":220,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":221,"author":{"gitId":"kwmiw"},"content":"Format: `bye`"},{"lineNumber":222,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":223,"author":{"gitId":"kwmiw"},"content":"Example of usage:"},{"lineNumber":224,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":225,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":226,"author":{"gitId":"kwmiw"},"content":"bye"},{"lineNumber":227,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":228,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":229,"author":{"gitId":"kwmiw"},"content":"Expected outcome:"},{"lineNumber":230,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":231,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":232,"author":{"gitId":"kwmiw"},"content":"Bye! Hope I was a good dog, see you again soon!"},{"lineNumber":233,"author":{"gitId":"kwmiw"},"content":"```"},{"lineNumber":234,"author":{"gitId":"kwmiw"},"content":""}],"authorContributionMap":{"kwmiw":215,"-":19}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import javafx.geometry.Pos;"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.Node;"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.control.Label;"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"public class DialogBox extends HBox {"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    private Label dialog;"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    private ImageView displayPicture;"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    private DialogBox(Image img, Label l) {"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"            fxmlLoader.load();"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"        dialog.setText(l.getText());"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"        dialog.setWrapText(true);"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"        displayPicture.setImage(img);"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"        setHeight(l);"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"    private void flip() {"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"        Collections.reverse(tmp);"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"     * ensures text bubble fits the length of long inputs"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"     * @param l Label generated from duke response"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"    //@@lll-jy kwmiw-reused"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"    //Reused from https://github.com/lll-jy/ip/blob/master/src/main/java/DialogBox.java"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"    // with minor modifications to add on text bubble length"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"    private void setHeight(Label l) {"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"        int count \u003d l.getText().endsWith(\"\\n\") ? 1 : 0;"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"        String[] ss \u003d l.getText().split(\"\\n\");"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"        count +\u003d ss.length + 1;"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"        for (String s : ss) {"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"            count +\u003d s.length() / 32;"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"        this.setMinHeight(count * 15 + 50);"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"    public static DialogBox getUserDialog(Label l, Image img) {"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"        return new DialogBox(img, l);"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"    public static DialogBox getDukeDialog(Label l, Image img) {"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"        var db \u003d new DialogBox(img, l);"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"        db.flip();"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"        return db;"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":74}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":" * A launcher class to workaround classpath issues."},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"public class Launcher {"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"    public static void main(String[] args) {"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import duke.Duke;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import javafx.application.Application;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.Scene;"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":" * A GUI for Duke using FXML."},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"public class Main extends Application {"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    public void start(Stage stage) {"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"            stage.setScene(scene);"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"            stage.setTitle(\"Doge Duke\");"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"            stage.show();"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"        } catch (IOException e) {"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"            e.printStackTrace();"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":31}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import duke.Duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"import javafx.fxml.FXML;"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.control.Button;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.image.Image;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"/**"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    private VBox dialogContainer;"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"    private TextField userInput;"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    private Button sendButton;"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    private Duke duke;"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.jpg\"));"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDukeDoge.jpg\"));"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"    public void initialize() {"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        duke \u003d d;"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"     * Creates two dialog boxes, one echoing user input"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"     * and the other containingDuke\u0027s reply and then"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"     * appends them to the dialog container."},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"     * Clears the user input after processing."},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"    @FXML"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"    private void handleUserInput() {"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"        Label response \u003d duke.getResponse(input);"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"                DialogBox.getUserDialog(new Label(input), userImage),"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"                DialogBox.getDukeDialog(response, dukeImage)"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"        );"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"        userInput.clear();"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":54}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"/** Represents Command that Doge can do, with a description"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":" * attached and primary behaviour to mark command as done"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-22"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"public class Command {"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"    private String commandDescription;"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"    private boolean isDone;"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"     * Constructor for Command"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"     * @param commandDescription every command has a description attached"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    public Command(String commandDescription) {"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"        this.commandDescription \u003d commandDescription;"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"     * Mark command as Done"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"     * @return Command that is marked as Done"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"    public Command markDone() {"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d true;"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"        return this;"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"    public String getDescription() {"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        return this.commandDescription;"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"     * Check if command is marked as done, Command is"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"     * done when indicated with 1 and vice versa 0"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"     * @return String to indicate Done attribute"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"    public String getDone() {"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"        if (isDone) {"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"            return \" 1 \";"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"            return \" 0 \";"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"        if (this.isDone) {"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"            return \"[X] \" + this.commandDescription;"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"            return \"[ ] \" + this.commandDescription;"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":61}},{"path":"src/main/java/duke/CommandList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.nio.file.Path;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"/** Represents Command list containing commands and carries"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * methods to print, add, delete and indicate command as done."},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-22"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"public class CommandList {"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"    private ArrayList\u003cCommand\u003e commands \u003d new ArrayList\u003cCommand\u003e();"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    private ArrayList\u003cCommand\u003e archivedCommands \u003d new ArrayList\u003cCommand\u003e();"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    private Storage storage;"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    private Storage archiveStorage;"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"     * Constructor for command list"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"     * @param storage to reference storage instance to save most updated command list"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    public CommandList(Storage storage) {"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"        this.storage \u003d storage;"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"     * Iterates through non-empty commands list"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"     * and prints each command in ascending order"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"     * @return Numbered Printed List"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"    String printList() {"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"        if (commands.size() \u003d\u003d 0) {"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"            result \u003d \"Your list of commands are currently empty!\\n\";"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"            for (int i \u003d 0; i \u003c commands.size(); i++) {"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"                Command value \u003d commands.get(i);"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"                result +\u003d ((i + 1) + \". \" + value + \"\\n\");"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"        return result;"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"     * Adds and saves a single command to the command list,"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"     * printing out appropriate Ui based on command"},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"     * type"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"     * @param command command of children classes ToDo, Deadline, Event"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"     * @param commandType identifier to sort command classes"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"     * @return Added notification to user"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"    String addCommand(Command command, String commandType) {"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"        commands.add(command);"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"        int size \u003d commands.size();"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"        storage.save(storage.getFilePath(), storage.getPath(), commands);"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"        if (commandType.equals(\"T\")) {"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"            return Ui.printToDo(command, size);"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"        } else if (commandType.equals(\"D\")) {"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"            return Ui.printDeadline(command, size);"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"            return Ui.printEvent(command, size);"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"     * Marks a single command as done based on its index"},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"     * with markDone(), saves the updated command list and"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"     * printing out appropriate Ui to notify user"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"     * @param id index of command to be marked done in commands list"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"     * @return Done notification to user"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"     * @see duke.Command#markDone() markDone"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":"    String doneCommand(int id) {"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"        Command command \u003d commands.get(id);"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"        command.markDone();"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"        storage.save(storage.getFilePath(), storage.getPath(), commands);"},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"        return Ui.printDone(command);"},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"     * Deletes a single command off command list based"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":"     * on its index, saving the new command list and"},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":"     * printing out appropriate Ui to notify user"},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"     * @param id index of command to be marked done in commands list"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":"     * @return Delete notification to user"},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"     * @see duke.Command#markDone() markDone"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"    String deleteCommand(int id) {"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":"        Command command \u003d commands.get(id);"},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"        commands.remove(id);"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":"        int size \u003d commands.size();"},{"lineNumber":99,"author":{"gitId":"kwmiw"},"content":"        storage.save(storage.getFilePath(), storage.getPath(), commands);"},{"lineNumber":100,"author":{"gitId":"kwmiw"},"content":"        return Ui.printDelete(command, size);"},{"lineNumber":101,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":102,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":103,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":104,"author":{"gitId":"kwmiw"},"content":"     * Searches all commands in commandList that match"},{"lineNumber":105,"author":{"gitId":"kwmiw"},"content":"     * given keyword given by owner"},{"lineNumber":106,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":107,"author":{"gitId":"kwmiw"},"content":"     * @param keyWord to match during search for user"},{"lineNumber":108,"author":{"gitId":"kwmiw"},"content":"     * @return results of search of keyWord to user"},{"lineNumber":109,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":110,"author":{"gitId":"kwmiw"},"content":"    public String findCommand(String keyWord) {"},{"lineNumber":111,"author":{"gitId":"kwmiw"},"content":"        ArrayList\u003cCommand\u003e targetList \u003d new ArrayList\u003cCommand\u003e();"},{"lineNumber":112,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":113,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":114,"author":{"gitId":"kwmiw"},"content":"        for (int i \u003d 0; i \u003c commands.size(); i++) {"},{"lineNumber":115,"author":{"gitId":"kwmiw"},"content":"            Command value \u003d commands.get(i);"},{"lineNumber":116,"author":{"gitId":"kwmiw"},"content":"            String description \u003d value.getDescription();"},{"lineNumber":117,"author":{"gitId":"kwmiw"},"content":"            if (description.contains(keyWord)) {"},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"                targetList.add(value);"},{"lineNumber":119,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":120,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":122,"author":{"gitId":"kwmiw"},"content":"        if (commands.isEmpty()) {"},{"lineNumber":123,"author":{"gitId":"kwmiw"},"content":"            result \u003d \"Your list of commands are currently empty!\\n\";"},{"lineNumber":124,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":125,"author":{"gitId":"kwmiw"},"content":"            if (targetList.isEmpty()) {"},{"lineNumber":126,"author":{"gitId":"kwmiw"},"content":"                result \u003d Ui.printFind(targetList, false);"},{"lineNumber":127,"author":{"gitId":"kwmiw"},"content":"            } else {"},{"lineNumber":128,"author":{"gitId":"kwmiw"},"content":"                result \u003d Ui.printFind(targetList, true);"},{"lineNumber":129,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":130,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"kwmiw"},"content":"        return result;"},{"lineNumber":132,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":134,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"kwmiw"},"content":"     * Archives all Commands in the current Command"},{"lineNumber":136,"author":{"gitId":"kwmiw"},"content":"     * List to a text file named archive.txt in the data file"},{"lineNumber":137,"author":{"gitId":"kwmiw"},"content":"     * (same format as storage.save)"},{"lineNumber":138,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":139,"author":{"gitId":"kwmiw"},"content":"     * @return Successful Archive notification to user"},{"lineNumber":140,"author":{"gitId":"kwmiw"},"content":"     * @see duke.Storage#save(String, Path, ArrayList) save"},{"lineNumber":141,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"kwmiw"},"content":"    public String archiveCommand() {"},{"lineNumber":143,"author":{"gitId":"kwmiw"},"content":"        archiveStorage \u003d new Storage(storage.getArchiveFilePath(),"},{"lineNumber":144,"author":{"gitId":"kwmiw"},"content":"                storage.getArchivePath());"},{"lineNumber":145,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":146,"author":{"gitId":"kwmiw"},"content":"        archivedCommands \u003d commands;"},{"lineNumber":147,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":148,"author":{"gitId":"kwmiw"},"content":"        archiveStorage.save(storage.getArchiveFilePath(),"},{"lineNumber":149,"author":{"gitId":"kwmiw"},"content":"                storage.getArchivePath(),"},{"lineNumber":150,"author":{"gitId":"kwmiw"},"content":"                archivedCommands);"},{"lineNumber":151,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":152,"author":{"gitId":"kwmiw"},"content":"        commands \u003d new ArrayList\u003cCommand\u003e();"},{"lineNumber":153,"author":{"gitId":"kwmiw"},"content":"        return Ui.printArchiveCompleted();"},{"lineNumber":154,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":156,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":157,"author":{"gitId":"kwmiw"},"content":"     * Retrieves the previously archived commands and"},{"lineNumber":158,"author":{"gitId":"kwmiw"},"content":"     * appends them to the current working Command List"},{"lineNumber":159,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":160,"author":{"gitId":"kwmiw"},"content":"     * @return Successful Archive notification to user"},{"lineNumber":161,"author":{"gitId":"kwmiw"},"content":"     * @see duke.Storage#save(String, Path, ArrayList) save"},{"lineNumber":162,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":163,"author":{"gitId":"kwmiw"},"content":"    public String retrieveCommand() {"},{"lineNumber":164,"author":{"gitId":"kwmiw"},"content":"        int size \u003d commands.size();"},{"lineNumber":165,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":166,"author":{"gitId":"kwmiw"},"content":"        if (size \u003d\u003d 0) {"},{"lineNumber":167,"author":{"gitId":"kwmiw"},"content":"            commands \u003d archivedCommands;"},{"lineNumber":168,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":169,"author":{"gitId":"kwmiw"},"content":"            commands.addAll(archivedCommands);"},{"lineNumber":170,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":171,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":172,"author":{"gitId":"kwmiw"},"content":"        storage.save(storage.getFilePath(),"},{"lineNumber":173,"author":{"gitId":"kwmiw"},"content":"                storage.getPath(),"},{"lineNumber":174,"author":{"gitId":"kwmiw"},"content":"                commands);"},{"lineNumber":175,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":176,"author":{"gitId":"kwmiw"},"content":"        return Ui.printRetrievalCompleted();"},{"lineNumber":177,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"kwmiw"},"content":"}"},{"lineNumber":179,"author":{"gitId":"kwmiw"},"content":""}],"authorContributionMap":{"kwmiw":179}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"/** Represents Deadline inherited from Command,"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * attached with command description and due date"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-22"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"public class Deadline extends duke.Command {"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    private final boolean isDone;"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    private String formattedDate;"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    private LocalDate dueDate;"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"     * Constructor for Command child class Deadline"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"     * @param commandDescription every command has a description attached"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"     * @param dueDate date when command is due"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"    public Deadline(String commandDescription, LocalDate dueDate) {"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"        super(commandDescription);"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"        this.dueDate \u003d dueDate;"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"        this.formattedDate \u003d this.dueDate.format(format);"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"    public LocalDate getTime() {"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        return this.dueDate;"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"        return \"[D] \" + super.toString() + \" | by: \" + formattedDate;"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":42}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"/*"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"  Doge Duke implements a virtual pet application that"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"  returns different commands passed by owner (user)."},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"  @author Chia Jia-Xi, Kymie"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":" * @since 2021-01-31"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"import javafx.scene.control.Label;"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"public class Duke {"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    final CommandList commandList;"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    private Storage storage;"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    private Ui ui;"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"    private Parser parser;"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"     * Constructor of Duke class"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"    public Duke() {"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"        this.storage \u003d new Storage();"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"        this.commandList \u003d new CommandList(storage);"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"        this.ui \u003d new Ui();"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"        this.parser \u003d new Parser(commandList);"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"     * Generate a response to user input for GUI"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"     * @param input raw user input from GUI"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"    public Label getResponse(String input) {"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"        Label response \u003d null;"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"            result \u003d parser.parseAll(input);"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"        } catch (Exception e) {"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"            result \u003d parser.errorHandling(input);"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"        response \u003d new Label(result);"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"        return response;"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"kwmiw":49,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"public class DukeException extends Exception {"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"    public DukeException(String errorMsg) {"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"        super(errorMsg);"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":9}},{"path":"src/main/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"public class DukeTest {"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":4}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"/** Represents Event inherited from Command,"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * attached with command description and due date"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-22"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"public class Event extends duke.Command {"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"    private final boolean isDone;"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    private LocalDate eventDate;"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    private String formattedDate;"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"     * Constructor for Command child class Event"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"     * @param commandDescription every command has a description attached"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"     * @param eventDate date when event is held"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    public Event(String commandDescription, LocalDate eventDate) {"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"        super(commandDescription);"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"        this.eventDate \u003d eventDate;"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"        DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"        this.formattedDate \u003d this.eventDate.format(format);"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"    public LocalDate getTime() {"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"        return this.eventDate;"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"        return \"[E] \" + super.toString() + \" | at: \" + formattedDate;"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":41}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"/** Processes user input and possible input-based errors"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * and sorts to relevant commandList methods or displays"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" * correct error messages to prompt user for correct inputs."},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-22"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"public class Parser {"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    private CommandList commandList;"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    private final String regexSpace \u003d \" \";"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    private final String regexToDo \u003d \" \";"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    private final String regexDeadline \u003d \" /by \";"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    private final String regexEvent \u003d \" /at \";"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"    private final String terminate \u003d \"bye\";"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    public Parser(CommandList commandList) {"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"        this.commandList \u003d commandList;"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"     * Handles and displays specified error"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"     * messages as per different cases of"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"     * incorrect user input"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"     * @param errorInput Raw user input"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"     * @return Error Message to prompt correct input from user"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"    static String errorHandling(String errorInput) {"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"        String[] inputArr \u003d new String[100];"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"        if (errorInput.contains(\" \")) {"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"            inputArr \u003d errorInput.split(\" \");"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"            inputArr[0] \u003d errorInput;"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"        if ((errorInput.contains(\"todo\")"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"deadline\")"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"event\"))"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 inputArr[1] \u003d\u003d null) {"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"            result \u003d (\"Eh? Your command description cannot be empty.\""},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"                    + \"Try again!\");"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"        } else if (errorInput.contains(\"list\")"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"bye\")) {"},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"            //Do nothing"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"        } else if ((errorInput.contains(\"done\")"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"                || errorInput.contains(\"delete\"))"},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"                \u0026\u0026 inputArr[1] \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"            result \u003d (\"What are you referring to?\""},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"                    + \" Remember to key in the correct command id!\");"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"        } else if (inputArr[1] !\u003d null) {"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"            //Do nothing"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"        // Invalid description: unknown"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"            result \u003d (\"Whoops :( I\u0027m sorry, I\u0027m not sure what that means. \""},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":"                    + \"Did you forget to add a command type?\");"},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"        return result;"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"     * Sorts user input accordingly and splits input by"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"     * command type to relay formatted input to addCommand"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":"     * @param input Raw user input to add commands"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"     * @return Added notification to user"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"     * @exception DateTimeParseException if the LocalDate user input is in wrong format"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"     * @see duke.CommandList#addCommand(Command, String) addCommand"},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"    String parseAdd(String input) {"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"        Command command;"},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":"            if (input.contains(\"todo\")) {"},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":"                String[] description \u003d input.split(regexToDo);"},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":"                command \u003d new ToDo(input.substring(5));"},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"                result \u003d commandList.addCommand(command, \"T\");"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"deadline\")) {"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":"                String[] inputTime \u003d input.split(regexDeadline);"},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"                LocalDate parseDate \u003d LocalDate.parse(inputTime[1].trim());"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":"                command \u003d new Deadline(inputTime[0].substring(9), parseDate);"},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"                result \u003d commandList.addCommand(command, \"D\");"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":99,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"event\")) {"},{"lineNumber":100,"author":{"gitId":"kwmiw"},"content":"                String[] inputTime \u003d input.split(regexDeadline);"},{"lineNumber":101,"author":{"gitId":"kwmiw"},"content":"                LocalDate parseDate \u003d LocalDate.parse(inputTime[1].trim());"},{"lineNumber":102,"author":{"gitId":"kwmiw"},"content":"                command \u003d new Event(inputTime[0].substring(6), parseDate);"},{"lineNumber":103,"author":{"gitId":"kwmiw"},"content":"                result \u003d commandList.addCommand(command, \"E\");"},{"lineNumber":104,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":105,"author":{"gitId":"kwmiw"},"content":"            } else {"},{"lineNumber":106,"author":{"gitId":"kwmiw"},"content":"                result \u003d \"An error occurred, did you add the correct command?\";"},{"lineNumber":107,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":108,"author":{"gitId":"kwmiw"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":109,"author":{"gitId":"kwmiw"},"content":"            result \u003d (\"This date doesnt exist! \""},{"lineNumber":110,"author":{"gitId":"kwmiw"},"content":"                    + \"The right format should be in yyyy-mm-dd.\");"},{"lineNumber":111,"author":{"gitId":"kwmiw"},"content":"            return result;"},{"lineNumber":112,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":113,"author":{"gitId":"kwmiw"},"content":"        return result;"},{"lineNumber":114,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":115,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":116,"author":{"gitId":"kwmiw"},"content":"    String parseList() {"},{"lineNumber":117,"author":{"gitId":"kwmiw"},"content":"        return commandList.printList();"},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":119,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":120,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":121,"author":{"gitId":"kwmiw"},"content":"     * Splits input to get id of desired done command"},{"lineNumber":122,"author":{"gitId":"kwmiw"},"content":"     * to relay formatted input to doneCommand"},{"lineNumber":123,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":124,"author":{"gitId":"kwmiw"},"content":"     * @param input Raw user input to mark command"},{"lineNumber":125,"author":{"gitId":"kwmiw"},"content":"     * @return Done notification to user"},{"lineNumber":126,"author":{"gitId":"kwmiw"},"content":"     * @see duke.CommandList#doneCommand(int) doneCommand"},{"lineNumber":127,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":128,"author":{"gitId":"kwmiw"},"content":"    String parseDone(String input) {"},{"lineNumber":129,"author":{"gitId":"kwmiw"},"content":"        String[] doneInput \u003d input.split(regexSpace);"},{"lineNumber":130,"author":{"gitId":"kwmiw"},"content":"        int id \u003d Integer.parseInt(doneInput[1]) - 1;"},{"lineNumber":131,"author":{"gitId":"kwmiw"},"content":"        return commandList.doneCommand(id);"},{"lineNumber":132,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":133,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":134,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":135,"author":{"gitId":"kwmiw"},"content":"     * Splits input to get id of desired deleted command"},{"lineNumber":136,"author":{"gitId":"kwmiw"},"content":"     * to relay formatted input to deleteCommand"},{"lineNumber":137,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":138,"author":{"gitId":"kwmiw"},"content":"     * @param input Raw user input to delete command"},{"lineNumber":139,"author":{"gitId":"kwmiw"},"content":"     * @return Delete notification to user"},{"lineNumber":140,"author":{"gitId":"kwmiw"},"content":"     * @see duke.CommandList#deleteCommand(int) deleteCommand"},{"lineNumber":141,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":142,"author":{"gitId":"kwmiw"},"content":"    String parseDelete(String input) {"},{"lineNumber":143,"author":{"gitId":"kwmiw"},"content":"        String[] deleteInput \u003d input.split(regexSpace);"},{"lineNumber":144,"author":{"gitId":"kwmiw"},"content":"        int id \u003d Integer.parseInt(deleteInput[1]) - 1;"},{"lineNumber":145,"author":{"gitId":"kwmiw"},"content":"        return commandList.deleteCommand(id);"},{"lineNumber":146,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":147,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":148,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":149,"author":{"gitId":"kwmiw"},"content":"     * Splits input to get keyWord from user"},{"lineNumber":150,"author":{"gitId":"kwmiw"},"content":"     * to relay formatted input to findCommand"},{"lineNumber":151,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":152,"author":{"gitId":"kwmiw"},"content":"     * @param input Raw user input to mark command"},{"lineNumber":153,"author":{"gitId":"kwmiw"},"content":"     * @return Found or Missing keyWord notification to user"},{"lineNumber":154,"author":{"gitId":"kwmiw"},"content":"     * @see duke.CommandList#findCommand(String) findCommand"},{"lineNumber":155,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":156,"author":{"gitId":"kwmiw"},"content":"    String parseFind(String input) {"},{"lineNumber":157,"author":{"gitId":"kwmiw"},"content":"        String[] findInput \u003d input.split(regexSpace);"},{"lineNumber":158,"author":{"gitId":"kwmiw"},"content":"        return commandList.findCommand(findInput[1]);"},{"lineNumber":159,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":160,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":161,"author":{"gitId":"kwmiw"},"content":"    String parseArchive(String input) {"},{"lineNumber":162,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":163,"author":{"gitId":"kwmiw"},"content":"        if (input.contains(\"retrieve\")) {"},{"lineNumber":164,"author":{"gitId":"kwmiw"},"content":"            result \u003d commandList.retrieveCommand();"},{"lineNumber":165,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":166,"author":{"gitId":"kwmiw"},"content":"            result \u003d commandList.archiveCommand();"},{"lineNumber":167,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":168,"author":{"gitId":"kwmiw"},"content":"        return result;"},{"lineNumber":169,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":171,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":172,"author":{"gitId":"kwmiw"},"content":"     * Introduces scanner class to read in input"},{"lineNumber":173,"author":{"gitId":"kwmiw"},"content":"     * and sorts input into appropriate parsing commands"},{"lineNumber":174,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":175,"author":{"gitId":"kwmiw"},"content":"     * @param input Raw user input from GUI"},{"lineNumber":176,"author":{"gitId":"kwmiw"},"content":"     * @return Relevant response to user"},{"lineNumber":177,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":178,"author":{"gitId":"kwmiw"},"content":"    public String parseAll(String input) {"},{"lineNumber":179,"author":{"gitId":"kwmiw"},"content":"        assert input.length() \u003e 0 : \"Command cannot be empty\";"},{"lineNumber":180,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":181,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":182,"author":{"gitId":"kwmiw"},"content":"            result \u003d errorHandling(input);"},{"lineNumber":183,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":184,"author":{"gitId":"kwmiw"},"content":"            if (input.equals(terminate)) {"},{"lineNumber":185,"author":{"gitId":"kwmiw"},"content":"                result \u003d Ui.printGoodbye();"},{"lineNumber":186,"author":{"gitId":"kwmiw"},"content":"                new SoundBark().playAudio();"},{"lineNumber":187,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":188,"author":{"gitId":"kwmiw"},"content":"            } else if (input.equals(\"list\")) {"},{"lineNumber":189,"author":{"gitId":"kwmiw"},"content":"                result \u003d parseList();"},{"lineNumber":190,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":191,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"hello\")"},{"lineNumber":192,"author":{"gitId":"kwmiw"},"content":"                    || input.equals(\"hello\")) {"},{"lineNumber":193,"author":{"gitId":"kwmiw"},"content":"                result \u003d Ui.printGreet();"},{"lineNumber":194,"author":{"gitId":"kwmiw"},"content":"                new SoundBark().playAudio();"},{"lineNumber":195,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":196,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"done\")) {"},{"lineNumber":197,"author":{"gitId":"kwmiw"},"content":"                result \u003d parseDone(input);"},{"lineNumber":198,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":199,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"delete\")) {"},{"lineNumber":200,"author":{"gitId":"kwmiw"},"content":"                result \u003d parseDelete(input);"},{"lineNumber":201,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":202,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"find\")) {"},{"lineNumber":203,"author":{"gitId":"kwmiw"},"content":"                result \u003d parseFind(input);"},{"lineNumber":204,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":205,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"todo\")"},{"lineNumber":206,"author":{"gitId":"kwmiw"},"content":"                    || input.contains(\"deadline\")"},{"lineNumber":207,"author":{"gitId":"kwmiw"},"content":"                    || input.contains(\"event\")) {"},{"lineNumber":208,"author":{"gitId":"kwmiw"},"content":"                result \u003d parseAdd(input);"},{"lineNumber":209,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":210,"author":{"gitId":"kwmiw"},"content":"            } else if (input.contains(\"archive\")"},{"lineNumber":211,"author":{"gitId":"kwmiw"},"content":"                    || input.equals(\"archive\")) {"},{"lineNumber":212,"author":{"gitId":"kwmiw"},"content":"                result \u003d parseArchive(input);"},{"lineNumber":213,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":214,"author":{"gitId":"kwmiw"},"content":"            } else {"},{"lineNumber":215,"author":{"gitId":"kwmiw"},"content":"                result \u003d Ui.printGeneralError();"},{"lineNumber":216,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":217,"author":{"gitId":"kwmiw"},"content":"        } catch (Exception e) {"},{"lineNumber":218,"author":{"gitId":"kwmiw"},"content":"            System.out.println(e);"},{"lineNumber":219,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":220,"author":{"gitId":"kwmiw"},"content":"        return result;"},{"lineNumber":221,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":222,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":223,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":223}},{"path":"src/main/java/duke/SoundBark.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import javax.sound.sampled.AudioInputStream;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import javax.sound.sampled.AudioSystem;"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import javax.sound.sampled.Clip;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import javax.sound.sampled.LineUnavailableException;"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import javax.sound.sampled.UnsupportedAudioFileException;"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"/** Barking Noise enabled during start"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" * and duke doge termination to greet and bid"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":" * farewell to the user"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":" * @version 0.2"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-24"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"public class SoundBark {"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    private String audioPath \u003d \"./src/main/java/sfx/464400__michael-grinnell__dog-bark.wav\";"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"     * Enables JavaFX to play bark audio clip"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"     * at greeting and farewell"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"     * @throws IOException"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"     * @throws LineUnavailableException if Audio Byte format is off (16-bit supported by Desktop)"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"     * @throws UnsupportedAudioFileException if Audio file is in incorrect format"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"    // Solution below adapted from https://www3.ntu.edu.sg/home/ehchua/programming/java/J8c_PlayingSound.html"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"    void playAudio() throws IOException, LineUnavailableException, UnsupportedAudioFileException {"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"        File soundFile \u003d new File(audioPath);"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"        AudioInputStream audioIn \u003d AudioSystem.getAudioInputStream(soundFile);"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"        Clip clip \u003d AudioSystem.getClip();"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"        clip.open(audioIn);"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"        clip.start();"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":41}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"import java.io.FileWriter;"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import java.nio.file.Path;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"import java.nio.file.Paths;"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"import java.util.ArrayList;"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"/** Storage class saves most updated command list"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":" * to desired directories and files"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-22"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"public class Storage {"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"    private String filePath \u003d \"./data/duke.txt\";"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"    private Path path \u003d Paths.get(\"./data/duke.txt\");"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"    private String archiveFilePath \u003d \"./data/archive.txt\";"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"    private Path archivePath \u003d Paths.get(\"./data/archive.txt\");"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"    public Storage() {"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"        new Storage(filePath, path);"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"     * Constructor for storage"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"     * @param filePath of desired directory and file name"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"     * @param path path of desired directory and file name"},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"    public Storage(String filePath, Path path) {"},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"        this.path \u003d path;"},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"    public String getFilePath() {"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"        return filePath;"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"    public Path getPath() {"},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"        return path;"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"    public String getArchiveFilePath() {"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"        return archiveFilePath;"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"    public Path getArchivePath() {"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"        return archivePath;"},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"     * Checks if existing data directory and duke.txt file"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"     * has been created, else create them with given file"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"     * paths from the root folder"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"     * @param filePath desired path to save duke.txt"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"     * @param path desired path to save duke.txt in Path"},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"    public void checkPath(String filePath, Path path) {"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"            File file \u003d new File(filePath);"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"            boolean isDir \u003d Files.isDirectory(path);"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"            if (isDir) {"},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"                //directory exists, proceed."},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"            } else {"},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"                Files.createDirectories(Path.of(file.getParent()));"},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"        } catch (IOException e) {"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"            e.printStackTrace();"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"     * Method saves the current Command list"},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":"     * into a text file"},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":"     * @param filePath Filepath of text file to save to"},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":"     * @param path path of text file to save to"},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":"     * @param xs most updated command list to be saved"},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":"    void save(String filePath, Path path, ArrayList\u003cCommand\u003e xs) {"},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"        try {"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":"            checkPath(filePath, path);"},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"            FileWriter fw \u003d new FileWriter(filePath);"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"            for (Command c : xs) {"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":"                if (c instanceof ToDo) {"},{"lineNumber":99,"author":{"gitId":"kwmiw"},"content":"                    fw.write(\"T |\""},{"lineNumber":100,"author":{"gitId":"kwmiw"},"content":"                            + c.getDone()"},{"lineNumber":101,"author":{"gitId":"kwmiw"},"content":"                            + \"| \""},{"lineNumber":102,"author":{"gitId":"kwmiw"},"content":"                            + c.getDescription()"},{"lineNumber":103,"author":{"gitId":"kwmiw"},"content":"                            + \"\\n\");"},{"lineNumber":104,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":105,"author":{"gitId":"kwmiw"},"content":"                } else if (c instanceof Deadline) {"},{"lineNumber":106,"author":{"gitId":"kwmiw"},"content":"                    fw.write(\"D |\""},{"lineNumber":107,"author":{"gitId":"kwmiw"},"content":"                            + c.getDone()"},{"lineNumber":108,"author":{"gitId":"kwmiw"},"content":"                            + \"| \""},{"lineNumber":109,"author":{"gitId":"kwmiw"},"content":"                            + c.getDescription()"},{"lineNumber":110,"author":{"gitId":"kwmiw"},"content":"                            + \" | \""},{"lineNumber":111,"author":{"gitId":"kwmiw"},"content":"                            + ((Deadline) c).getTime()"},{"lineNumber":112,"author":{"gitId":"kwmiw"},"content":"                            + \"\\n\");"},{"lineNumber":113,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":114,"author":{"gitId":"kwmiw"},"content":"                } else if (c instanceof Event) {"},{"lineNumber":115,"author":{"gitId":"kwmiw"},"content":"                    fw.write(\"E |\""},{"lineNumber":116,"author":{"gitId":"kwmiw"},"content":"                            + c.getDone()"},{"lineNumber":117,"author":{"gitId":"kwmiw"},"content":"                            + \"| \""},{"lineNumber":118,"author":{"gitId":"kwmiw"},"content":"                            + c.getDescription()"},{"lineNumber":119,"author":{"gitId":"kwmiw"},"content":"                            + \" | \""},{"lineNumber":120,"author":{"gitId":"kwmiw"},"content":"                            + ((Event) c).getTime()"},{"lineNumber":121,"author":{"gitId":"kwmiw"},"content":"                            + \"\\n\");"},{"lineNumber":122,"author":{"gitId":"kwmiw"},"content":"                } else {"},{"lineNumber":123,"author":{"gitId":"kwmiw"},"content":"                }"},{"lineNumber":124,"author":{"gitId":"kwmiw"},"content":"            }"},{"lineNumber":125,"author":{"gitId":"kwmiw"},"content":"            fw.close();"},{"lineNumber":126,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":127,"author":{"gitId":"kwmiw"},"content":"        } catch (IOException e) {"},{"lineNumber":128,"author":{"gitId":"kwmiw"},"content":"            System.out.println(\"An error occurred.\");"},{"lineNumber":129,"author":{"gitId":"kwmiw"},"content":"            e.printStackTrace();"},{"lineNumber":130,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":131,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":132,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":132}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"/** Represents ToDo inherited from Command,"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":" * attached with command description"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":" *"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":" * @author Chia Jia-Xi, Kymie"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":" * @version 0.1"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":" * @since 2021-02-22"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":" */"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"public class ToDo extends Command {"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"    private final boolean isDone;"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    /**"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"     * Constructor for Command child class ToDo"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"     *"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"     * @param commandDescription every command has a description attached"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"     */"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"    public ToDo(String commandDescription) {"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"        super(commandDescription);"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"        this.isDone \u003d false;"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"    @Override"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"    public String toString() {"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"        return \"[T] \" + super.toString();"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":29}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"package duke;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"public class Ui {"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"    private static String greet \u003d \"Woof! I\u0027m Doge Duke\\n\""},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"            + \"What do you want me to do?\\n\""},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"            + \"Type your request in below!\";"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"    private static String goodbye \u003d \"Bye! Hope I was a good dog, \""},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"            + \"see you again soon!\";"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"    static String printGreet() {"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"        return greet;"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    static String printGoodbye() {"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"        return goodbye;"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    static String printGeneralError() {"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"        return (\"Sorry, I can\u0027t recognise this.\""},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"                + \" Maybe try another command?\");"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"    static String indexList(ArrayList\u003cCommand\u003e xs) {"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"        String result \u003d \"\";"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"        for (int i \u003d 0; i \u003c xs.size(); i++) {"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"            Command value \u003d xs.get(i);"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"            result +\u003d (i + 1) + \". \" + value + \"\\n\";"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"        return result;"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":36,"author":{"gitId":"kwmiw"},"content":"    static String printToDo(Command command, int size) {"},{"lineNumber":37,"author":{"gitId":"kwmiw"},"content":"        return \"Mlem I\u0027ve added a new command for you to do:\\n\""},{"lineNumber":38,"author":{"gitId":"kwmiw"},"content":"                + command"},{"lineNumber":39,"author":{"gitId":"kwmiw"},"content":"                + \"\\n\""},{"lineNumber":40,"author":{"gitId":"kwmiw"},"content":"                + \"Now I can do a total of \""},{"lineNumber":41,"author":{"gitId":"kwmiw"},"content":"                + size"},{"lineNumber":42,"author":{"gitId":"kwmiw"},"content":"                + \" commands!\";"},{"lineNumber":43,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":45,"author":{"gitId":"kwmiw"},"content":"    static String printDeadline(Command command, int size) {"},{"lineNumber":46,"author":{"gitId":"kwmiw"},"content":"        return \"Woofers! I\u0027ve added a new command with a Ded-line:\\n\""},{"lineNumber":47,"author":{"gitId":"kwmiw"},"content":"                + command"},{"lineNumber":48,"author":{"gitId":"kwmiw"},"content":"                + \"\\n\""},{"lineNumber":49,"author":{"gitId":"kwmiw"},"content":"                + \"Now I can do a total of \""},{"lineNumber":50,"author":{"gitId":"kwmiw"},"content":"                + size"},{"lineNumber":51,"author":{"gitId":"kwmiw"},"content":"                + \" commands!\";"},{"lineNumber":52,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":53,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":54,"author":{"gitId":"kwmiw"},"content":"    static String printEvent(Command command, int size) {"},{"lineNumber":55,"author":{"gitId":"kwmiw"},"content":"        return \"Much wow! I\u0027ve added a new command with an Event:\\n\""},{"lineNumber":56,"author":{"gitId":"kwmiw"},"content":"                + command"},{"lineNumber":57,"author":{"gitId":"kwmiw"},"content":"                + \"\\n\""},{"lineNumber":58,"author":{"gitId":"kwmiw"},"content":"                + \"Now I can do a total of \""},{"lineNumber":59,"author":{"gitId":"kwmiw"},"content":"                + size"},{"lineNumber":60,"author":{"gitId":"kwmiw"},"content":"                + \" commands!\";"},{"lineNumber":61,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":62,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":63,"author":{"gitId":"kwmiw"},"content":"    static String printDone(Command command) {"},{"lineNumber":64,"author":{"gitId":"kwmiw"},"content":"        return \"Very Woof! \""},{"lineNumber":65,"author":{"gitId":"kwmiw"},"content":"                + \"I have completed this commands:\\n\""},{"lineNumber":66,"author":{"gitId":"kwmiw"},"content":"                + command"},{"lineNumber":67,"author":{"gitId":"kwmiw"},"content":"                + \"\\n\";"},{"lineNumber":68,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":69,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":70,"author":{"gitId":"kwmiw"},"content":"    static String printDelete(Command command, int size) {"},{"lineNumber":71,"author":{"gitId":"kwmiw"},"content":"        return \"Noted! \""},{"lineNumber":72,"author":{"gitId":"kwmiw"},"content":"                + \"This task has been removed:\\n\""},{"lineNumber":73,"author":{"gitId":"kwmiw"},"content":"                + command"},{"lineNumber":74,"author":{"gitId":"kwmiw"},"content":"                + \"\\n\""},{"lineNumber":75,"author":{"gitId":"kwmiw"},"content":"                + \"Now you have \""},{"lineNumber":76,"author":{"gitId":"kwmiw"},"content":"                + size"},{"lineNumber":77,"author":{"gitId":"kwmiw"},"content":"                + \" commands remaining.\";"},{"lineNumber":78,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":79,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":80,"author":{"gitId":"kwmiw"},"content":"    static String printFind(ArrayList\u003cCommand\u003e targetList, boolean isFound) {"},{"lineNumber":81,"author":{"gitId":"kwmiw"},"content":"        if (isFound) {"},{"lineNumber":82,"author":{"gitId":"kwmiw"},"content":"            return \"We found some matching commands:\\n\""},{"lineNumber":83,"author":{"gitId":"kwmiw"},"content":"                    + indexList(targetList);"},{"lineNumber":84,"author":{"gitId":"kwmiw"},"content":"        } else {"},{"lineNumber":85,"author":{"gitId":"kwmiw"},"content":"            return \"Omo :( \""},{"lineNumber":86,"author":{"gitId":"kwmiw"},"content":"                    + \"We could not find anything. \""},{"lineNumber":87,"author":{"gitId":"kwmiw"},"content":"                    + \"Try another keyword?\\n\";"},{"lineNumber":88,"author":{"gitId":"kwmiw"},"content":"        }"},{"lineNumber":89,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":91,"author":{"gitId":"kwmiw"},"content":"    static String printArchiveCompleted() {"},{"lineNumber":92,"author":{"gitId":"kwmiw"},"content":"        return \"Archived all commands in text file in your data folder!\";"},{"lineNumber":93,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":94,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":95,"author":{"gitId":"kwmiw"},"content":"    static String printRetrievalCompleted() {"},{"lineNumber":96,"author":{"gitId":"kwmiw"},"content":"        return \"Your archived commands have been added back to your current commands!\";"},{"lineNumber":97,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":98,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":98}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" styleClass\u003d\"layout\" stylesheets\u003d\"@../style/DialogBox.css\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"    \u003cchildren\u003e"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"        \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"message\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"         \u003cfont\u003e"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"62.0\" fitWidth\u003d\"62.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" styleClass\u003d\"img\" /\u003e"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"    \u003c/children\u003e"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    \u003cpadding\u003e"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"    \u003c/padding\u003e"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"kwmiw":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"\u003c?import java.lang.String?\u003e"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../style/MainWindow.css\" xmlns\u003d\"http://javafx.com/javafx\" xmlns:fx\u003d\"http://javafx.com/fxml\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"    \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Type your commands...\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"         \u003cfont\u003e"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"            \u003cFont name\u003d\"Comic Sans MS\" size\u003d\"12.0\" /\u003e"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"569.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"30.0\" prefWidth\u003d\"76.0\" styleClass\u003d\"sendButton\" stylesheets\u003d\"@../style/MainWindow.css\" text\u003d\"Send\"\u003e"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"         \u003cfont\u003e"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"            \u003cFont name\u003d\"Comic Sans MS Bold\" size\u003d\"12.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"568.0\" prefWidth\u003d\"400.0\" stylesheets\u003d\"@../style/MainWindow.css\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"            \u003ccontent\u003e"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"566.0\" prefWidth\u003d\"388.0\"\u003e"},{"lineNumber":24,"author":{"gitId":"kwmiw"},"content":"               \u003cstyleClass\u003e"},{"lineNumber":25,"author":{"gitId":"kwmiw"},"content":"                  \u003cString fx:value\u003d\"viewport\" /\u003e"},{"lineNumber":26,"author":{"gitId":"kwmiw"},"content":"                  \u003cString fx:value\u003d\"scroll-pane\" /\u003e"},{"lineNumber":27,"author":{"gitId":"kwmiw"},"content":"               \u003c/styleClass\u003e\u003c/VBox\u003e"},{"lineNumber":28,"author":{"gitId":"kwmiw"},"content":"            \u003c/content\u003e"},{"lineNumber":29,"author":{"gitId":"kwmiw"},"content":"         \u003cstyleClass\u003e"},{"lineNumber":30,"author":{"gitId":"kwmiw"},"content":"            \u003cString fx:value\u003d\"scroll-pane\" /\u003e"},{"lineNumber":31,"author":{"gitId":"kwmiw"},"content":"            \u003cString fx:value\u003d\"viewport\" /\u003e"},{"lineNumber":32,"author":{"gitId":"kwmiw"},"content":"         \u003c/styleClass\u003e"},{"lineNumber":33,"author":{"gitId":"kwmiw"},"content":"        \u003c/ScrollPane\u003e"},{"lineNumber":34,"author":{"gitId":"kwmiw"},"content":"    \u003c/children\u003e"},{"lineNumber":35,"author":{"gitId":"kwmiw"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"kwmiw":35}},{"path":"src/test/java/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import java.time.LocalDate;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"import duke.Deadline;"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"public class DeadlineTest {"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"    @Test"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"    public void toStringTest() {"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"        LocalDate parseDate \u003d LocalDate.parse(\"2021-01-11\");"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"        Deadline deadline \u003d new Deadline(\"test\", parseDate);"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"        assertEquals(deadline.toString(), \"[D] [ ] test | by: 11 Jan 2021\");"},{"lineNumber":15,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":17,"author":{"gitId":"kwmiw"},"content":"    @Test"},{"lineNumber":18,"author":{"gitId":"kwmiw"},"content":"    public void getTimeTest() {"},{"lineNumber":19,"author":{"gitId":"kwmiw"},"content":"        LocalDate parseDate \u003d LocalDate.parse(\"2021-01-11\");"},{"lineNumber":20,"author":{"gitId":"kwmiw"},"content":"        Deadline deadline \u003d new Deadline(\"test\", parseDate);"},{"lineNumber":21,"author":{"gitId":"kwmiw"},"content":"        assertEquals(deadline.getTime(), parseDate);"},{"lineNumber":22,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":23}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":""},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"public class DukeTest {"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"    public void dummyTest() {"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"        assertEquals(2, 2);"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"    }"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"}"}],"authorContributionMap":{"kwmiw":10}},{"path":"text-ui-test/data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"T | 1 | rollover"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"D | 1 | finish doggo treats | 2021-03-11"}],"authorContributionMap":{"kwmiw":2}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"kwmiw"},"content":"paw"},{"lineNumber":2,"author":{"gitId":"kwmiw"},"content":"todo rollover"},{"lineNumber":3,"author":{"gitId":"kwmiw"},"content":"event dog festival /at 2021-020-10"},{"lineNumber":4,"author":{"gitId":"kwmiw"},"content":"event dog festival /at 2021-02-10"},{"lineNumber":5,"author":{"gitId":"kwmiw"},"content":"deadline finish doggo treats /by 2021-03-11"},{"lineNumber":6,"author":{"gitId":"kwmiw"},"content":"shake"},{"lineNumber":7,"author":{"gitId":"kwmiw"},"content":"done 1"},{"lineNumber":8,"author":{"gitId":"kwmiw"},"content":"todo"},{"lineNumber":9,"author":{"gitId":"kwmiw"},"content":"done 3"},{"lineNumber":10,"author":{"gitId":"kwmiw"},"content":"find dog"},{"lineNumber":11,"author":{"gitId":"kwmiw"},"content":"delete"},{"lineNumber":12,"author":{"gitId":"kwmiw"},"content":"delete 2"},{"lineNumber":13,"author":{"gitId":"kwmiw"},"content":"list"},{"lineNumber":14,"author":{"gitId":"kwmiw"},"content":"bye"}],"authorContributionMap":{"kwmiw":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"kwmiw"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"kwmiw"},"content":"java -cp ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"kwmiw":2,"-":36}}]
