[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027checkstyle\u0027"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}"},{"lineNumber":7,"author":{"gitId":"-"},"content":""},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}"},{"lineNumber":11,"author":{"gitId":"-"},"content":""},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    String javaFxVersion \u003d \u002711\u0027"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}"},{"lineNumber":31,"author":{"gitId":"-"},"content":""},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()"},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\""},{"lineNumber":37,"author":{"gitId":"-"},"content":""},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\""},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}"},{"lineNumber":45,"author":{"gitId":"-"},"content":""},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"    mainClassName \u003d \"Launcher\""},{"lineNumber":48,"author":{"gitId":"-"},"content":"}"},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\""},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}"},{"lineNumber":54,"author":{"gitId":"-"},"content":""},{"lineNumber":55,"author":{"gitId":"-"},"content":"checkstyle {"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"    toolVersion \u003d \u00278.32\u0027"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}"},{"lineNumber":58,"author":{"gitId":"-"},"content":""},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"    enableAssertions \u003d true"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"VisnuRavi":18,"-":44}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"## Introduction"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"Duke is an easy to use GUI reminder application that can be used to store tasks to be done, events, and deadlines. "},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"Hopefully with "},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"Duke, you will never forget to do anything!"},{"lineNumber":6,"author":{"gitId":"-"},"content":""},{"lineNumber":7,"author":{"gitId":"-"},"content":"## Features "},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"### Adding a task"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"#### Commands"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"todo (insert task)"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"event (insert event) / (insert date and time)"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"deadline (insert event) / (insert date and time)"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"These commands allows the user to add a task to be done at any time, an event with a certain date and time, and a "},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"deadline with a certain date and time to Duke."},{"lineNumber":18,"author":{"gitId":"-"},"content":""},{"lineNumber":19,"author":{"gitId":"-"},"content":""},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"### Listing out your tasks"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"#### Command"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"```aidl"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"list"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"This command allows the user to list out all the tasks that he has input so far."},{"lineNumber":26,"author":{"gitId":"-"},"content":""},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"### Complete a task"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"#### Command"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"```aidl"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"done (insert index of the task)"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"This command allows users to mark a task as complete. To use this command, user must know the index of his task, "},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"which can be found by using the `list` command."},{"lineNumber":34,"author":{"gitId":"-"},"content":""},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"### Delete a task"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"#### Command"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"```aidl"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"delete (insert index of task)"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"This command allows users to delete a task. To use this command, user must know the index of his task,"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"which can be found by using the `list` command."},{"lineNumber":42,"author":{"gitId":"-"},"content":""},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"### See tasks that are due soon"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"#### Command"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"```aidl"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"reminders"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"This command allows users to view the events or deadlines that are due within the week. "},{"lineNumber":49,"author":{"gitId":"-"},"content":""},{"lineNumber":50,"author":{"gitId":"-"},"content":""},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"### Find a task"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"#### Command"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"```aidl"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"find (insert 1 keyword to search)"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"This command allows users to find all the tasks that matches the keyword that they have used to search."},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"### Exiting Duke"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"#### Command"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"```aidl"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"bye"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"```"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"This command allows the user to exit the Duke application."},{"lineNumber":65,"author":{"gitId":"-"},"content":""}],"authorContributionMap":{"VisnuRavi":53,"-":12}},{"path":"src/main/java/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"public class ByeCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"    public String action() {"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"        return Ui.exit();"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":5}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"public abstract class Command {"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    public abstract String action();"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"    public void writeToFile() {"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"            FileAccessor.writeToFile(TaskList.getList());"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        } catch (IOException e) {"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"            assert false : Ui.informUnableSave();"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":13}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":" * Represents a Task with a deadline date and time."},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"public class Deadline extends Task {"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    private LocalDateTime deadline;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"    public Deadline(String input) {"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"        super(input);"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"        String[] split \u003d input.split(\"/\");"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"        if (split.length \u003c 2) {"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        this.task \u003d split[0].trim();"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"        String trimmed \u003d split[1].trim();"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"        String[] split1 \u003d trimmed.split(\" \");"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"        if (split1.length !\u003d 2) {"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"            throw new ArrayIndexOutOfBoundsException(Ui.deadlineFormat());"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"        this.deadline \u003d LocalDateTime.parse(split1[0].trim() + \"T\" + split1[1]);"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    //use this constructor if calling from harddisc"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"    public Deadline(String[] input, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"        super(input[2], isDone);"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"        this.deadline \u003d LocalDateTime.parse(input[3]);"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    public LocalDateTime getDeadline() {"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"        return deadline;"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"        return \"[D]\" + super.toString() + \" \" + \"(by: \""},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"                + deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":40}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"public class DeleteCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"    private String secondPartOfCommand;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    public DeleteCommand(String secondPartOfCommand) {"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"        this.secondPartOfCommand \u003d secondPartOfCommand;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    public String action() {"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"            int num \u003d Parser.makeToInt(secondPartOfCommand);"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"            Task del \u003d TaskList.deleteTask(num - 1);"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"            super.writeToFile();"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"            return Ui.deleteTask(del, TaskList.getListSize());"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"            return e.getMessage();"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":18}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"import java.util.Collections;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"import javafx.geometry.Insets;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import javafx.geometry.Pos;"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.Label;"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.paint.ImagePattern;"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.text.Text;"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.shape.Circle;"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":" * An example of a custom control using FXML."},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":" * containing text from the speaker."},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"public class DialogBox extends HBox {"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"    private Label dialog;"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    private Circle displayPicture;"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"    private DialogBox(String text, Image img) {"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"            fxmlLoader.setController(this);"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"            fxmlLoader.setRoot(this);"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"            fxmlLoader.load();"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"        } catch (IOException e) {"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"            e.printStackTrace();"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"        //dont create new instance of dialog and picture"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"        dialog.setText(text);"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"        ImagePattern picture \u003d new ImagePattern(img);"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"        displayPicture.setFill(picture);"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"        //this.getChildren().addAll(dialog, displayPicture);"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"        //no need to add the children, could be cause the .fxml adds in inside ready?"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"        //dialog.setMaxHeight(Double.MAX_VALUE);"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right."},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"    private void flip() {"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"        Collections.reverse(tmp);"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"        getChildren().setAll(tmp);"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"        setAlignment(Pos.TOP_LEFT);"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"    /*public static DialogBox getUserDialog(String text, Image img) {"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"        return new DialogBox(text, img);"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {"},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"        DialogBox db \u003d new DialogBox(text, img);"},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"        db.flip();"},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"        return db;"},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"    }*/"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"    public static DialogBox getDialog(String text, Image iv, boolean isUser) {"},{"lineNumber":71,"author":{"gitId":"VisnuRavi"},"content":"        DialogBox db \u003d new DialogBox(text, iv);"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"        //padding btw dialog box and outer area"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"        db.setPadding(new Insets(5, 5, 5,5));"},{"lineNumber":74,"author":{"gitId":"VisnuRavi"},"content":"        //spacing btw the items in dialogbox"},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"        db.setSpacing(5);"},{"lineNumber":76,"author":{"gitId":"VisnuRavi"},"content":"        if (isUser) {"},{"lineNumber":77,"author":{"gitId":"VisnuRavi"},"content":"            db.setStyle(\"-fx-background-color: #F0F0F0;\");"},{"lineNumber":78,"author":{"gitId":"VisnuRavi"},"content":"            return db;"},{"lineNumber":79,"author":{"gitId":"VisnuRavi"},"content":"        } else {"},{"lineNumber":80,"author":{"gitId":"VisnuRavi"},"content":"            db.setStyle(\"-fx-background-color: #DCDCDC\");"},{"lineNumber":81,"author":{"gitId":"VisnuRavi"},"content":"            db.flip();"},{"lineNumber":82,"author":{"gitId":"VisnuRavi"},"content":"            return db;"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":85}},{"path":"src/main/java/DoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"public class DoneCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"    private String secondPartOfCommand;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    public DoneCommand(String secondPartOfCommand) {"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"        this.secondPartOfCommand \u003d secondPartOfCommand;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    public String action() {"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"            int num \u003d Parser.makeToInt(secondPartOfCommand);"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"            Task done \u003d TaskList.doneTask(num - 1);"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"            super.writeToFile();"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"            return Ui.doneTask(done);"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"            return e.getMessage();"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":18}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.Scene;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.text.Font;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.Button;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.image.ImageView;"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"import javafx.stage.Stage;"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"import java.io.File;"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"import java.io.IOException;"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"import java.nio.file.Files;"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"import java.nio.file.Paths;"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"import java.time.format.DateTimeParseException;"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"import java.util.ArrayList;"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"import java.util.Scanner;"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":" * Class that runs the entire Duke application"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":30,"author":{"gitId":"-"},"content":"public class Duke {"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"    public String getResponse(String input) {"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"            ArrayList\u003cTask\u003e prevTasks \u003d FileAccessor.readFromTasks(new ArrayList\u003cTask\u003e());"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"            TaskList.setList(prevTasks);"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"        } catch (FileNotFoundException | IllegalArgumentException e) {"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"            try {"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"                Files.createDirectory(Paths.get(FileAccessor.getFolderPath()));"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"                TaskList.setList(new ArrayList\u003cTask\u003e());"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"            } catch (IOException e1) {"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"                assert false : \"Ui.lineGetter() + \\\" Cannot create new directory\\\\n\\\" + Ui.lineGetter()\";"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"            }"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"            //shld just be ioexception, shldnt come to this catch block"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"            //File f \u003d new File(relPath); //no need to create file here will get auto created when writing"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"        String response \u003d \"\";"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"        //response +\u003d Ui.introduce(); dont want to respond each time!"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"        input \u003d Parser.trimWhiteSpaces(input);"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"        if (input.length() \u003d\u003d 0) {"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"            //if just enter spaces"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"            response +\u003d Ui.informOnlySpaces();"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"            Command command \u003d Parser.parse(input);"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"            response +\u003d command.action();"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"            response +\u003d Ui.informIllegalArgExc();"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"        } catch (DateTimeParseException e) {"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"            response +\u003d Ui.informDateTimeParseExc();"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"            response +\u003d e.getMessage();"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"        return response;"},{"lineNumber":66,"author":{"gitId":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"-"},"content":"}"}],"authorContributionMap":{"VisnuRavi":63,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"import java.time.format.DateTimeFormatter;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":" * Represents an Task which is a event at a date and time."},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"public class Event extends Task {"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    private LocalDateTime event;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"    public Event(String input) {"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"        super(input);"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"        String[] split \u003d input.split(\"/\");"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"        if (split.length \u003c 2) {"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        this.task \u003d split[0].trim();"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"        String trimmed \u003d split[1].trim();"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"        String[] split1 \u003d trimmed.split(\" \");"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"        if (split1.length !\u003d 2) {"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"            throw new ArrayIndexOutOfBoundsException(Ui.eventFormat());"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"        this.event \u003d LocalDateTime.parse(split1[0].trim() + \"T\" + split1[1]);"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    //use this constructor if calling from harddisc"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"    public Event(String[] str, boolean isDone) {"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"        super(str[2], isDone);"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"        this.event \u003d LocalDateTime.parse(str[3]);"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    public LocalDateTime getEvent() {"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"        return event;"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    public String toString() {"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"        return \"[E]\" + super.toString() + \" \" + \"(at: \""},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"                + event.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\")) + \")\";"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":40}},{"path":"src/main/java/FileAccessor.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.io.File;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import java.util.Scanner;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import java.io.FileWriter;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":" * Represents the accessing a file to write and read."},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"public class FileAccessor {"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    //File f \u003d new File(\"./\");"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"    //System.out.println(f.getAbsolutePath());"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    //to get the path to see which path java is looking"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"    private static final String FOLDER_PATH \u003d \"./data/\";"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    private static final String FILE_NAME \u003d \"All Tasks.txt\";"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"    public static String getFolderPath() {"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"        return FOLDER_PATH;"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"    public static String getFileName() {"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"        return FILE_NAME;"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a ArrayList which has the tasks in the hard drive file specified by path appended to it."},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"     * @param tasks ArrayList to save the tasks from hard drive to."},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"     * @return ArrayList of tasks saved in path."},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"     * @throws FileNotFoundException if file at path does not exist."},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"     * @throws IllegalArgumentException if data in file is not in the correct format."},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"    public static ArrayList\u003cTask\u003e readFromTasks(ArrayList\u003cTask\u003e tasks) throws FileNotFoundException {"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"        File file \u003d new File(FOLDER_PATH + FILE_NAME);"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"        Scanner scanner \u003d new Scanner(file);"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"        while (scanner.hasNext()) {"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"            String input \u003d scanner.nextLine();"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"            String[] split \u003d input.split(\"\\\\|\");"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"            //\u0027|\u0027 is a special character, has a diff meaning also so need to escape"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"            //with backslash. but backslash also special character, so need to escape that too so another backslash."},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"            //or can also escape with [|]"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"            boolean isDone \u003d false;"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"            if (split[1].equals(\"1\")) {"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"                isDone \u003d true;"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"            }"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"            //consider indexoutofbounds exception"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"            if (split[0].equals(\"T\")) {"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"                tasks.add(new Todo(split[2], isDone));"},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"            } else if (split[0].equals(\"E\")) {"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"                tasks.add(new Event(split, isDone));"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"            } else if (split[0].equals(\"D\")) {"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"                tasks.add(new Deadline(split, isDone));"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"            } else {"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"                System.out.println(split[0]);"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"                throw new IllegalArgumentException();"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"            }"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"        return tasks;"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"    //assume in correct format"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"     * Writes the data from tasks to the path."},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"     * @param tasks ArrayList of tasks to write to path."},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"     * @throws IOException if unable to write to path."},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"    public static void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException {"},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"        FileWriter fileWriter \u003d new FileWriter(FOLDER_PATH + FILE_NAME);"},{"lineNumber":71,"author":{"gitId":"VisnuRavi"},"content":"        String taskToWrite \u003d \"\";"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"        for (Task task : tasks) {"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"            String done \u003d \"0\";"},{"lineNumber":74,"author":{"gitId":"VisnuRavi"},"content":"            if (task.isDone) {"},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"                done \u003d \"1\";"},{"lineNumber":76,"author":{"gitId":"VisnuRavi"},"content":"            }"},{"lineNumber":77,"author":{"gitId":"VisnuRavi"},"content":"            if (task instanceof Todo) {"},{"lineNumber":78,"author":{"gitId":"VisnuRavi"},"content":"                Todo todo \u003d (Todo) task;"},{"lineNumber":79,"author":{"gitId":"VisnuRavi"},"content":"                taskToWrite \u003d taskToWrite + \"T|\" + done + \"|\" + todo.task + System.lineSeparator();"},{"lineNumber":80,"author":{"gitId":"VisnuRavi"},"content":"                //\u0027\\n\u0027 may not work in all OS, use the System.lineSeparator()"},{"lineNumber":81,"author":{"gitId":"VisnuRavi"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":82,"author":{"gitId":"VisnuRavi"},"content":"                Deadline deadline \u003d (Deadline) task;"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"                taskToWrite \u003d"},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"                        taskToWrite + \"D|\" + done + \"|\" + deadline.task + \"|\" + deadline.getDeadline()"},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"                                + System.lineSeparator();"},{"lineNumber":86,"author":{"gitId":"VisnuRavi"},"content":"            } else if (task instanceof Event){"},{"lineNumber":87,"author":{"gitId":"VisnuRavi"},"content":"                Event event \u003d (Event) task;"},{"lineNumber":88,"author":{"gitId":"VisnuRavi"},"content":"                taskToWrite \u003d"},{"lineNumber":89,"author":{"gitId":"VisnuRavi"},"content":"                        taskToWrite + \"E|\" + done + \"|\" + event.task + \"|\" + event.getEvent() + System.lineSeparator();"},{"lineNumber":90,"author":{"gitId":"VisnuRavi"},"content":"            } else {"},{"lineNumber":91,"author":{"gitId":"VisnuRavi"},"content":"                assert false : \"Wrong part of writeToFile code\";"},{"lineNumber":92,"author":{"gitId":"VisnuRavi"},"content":"            }"},{"lineNumber":93,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":94,"author":{"gitId":"VisnuRavi"},"content":"        fileWriter.write(taskToWrite);"},{"lineNumber":95,"author":{"gitId":"VisnuRavi"},"content":"        //write all as one string outside or else will keep writing for each task, but somehow give"},{"lineNumber":96,"author":{"gitId":"VisnuRavi"},"content":"        // ioexception when put inside for loop?"},{"lineNumber":97,"author":{"gitId":"VisnuRavi"},"content":"        fileWriter.close();"},{"lineNumber":98,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":99}},{"path":"src/main/java/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"public class FindCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"    private String secondPartOfCommand;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    public FindCommand(String secondPartOfCommand) {"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"        this.secondPartOfCommand \u003d secondPartOfCommand;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    public String action() {"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"            return TaskList.findTask(secondPartOfCommand);"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"            return e.getMessage();"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":16}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import javafx.application.Application;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"public class Launcher {"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    public static void main(String[] args) {"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"        Application.launch(Main.class, args);"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":7}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"public class ListCommand extends Command{"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"    public String action() {"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"            return TaskList.printList();"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"        } catch (IllegalArgumentException e) {"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"            return e.getMessage();"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":9}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import javafx.application.Application;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.Scene;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import javafx.stage.Stage;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":" * A GUI for Duke using FXML."},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"public class Main extends Application {"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    private Duke duke \u003d new Duke();"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    public void start(Stage stage) {"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"            AnchorPane ap \u003d fxmlLoader.load();"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"            Scene scene \u003d new Scene(ap);"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"            stage.setScene(scene);"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"            stage.setTitle(\"Duke\");"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setStage(stage);"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"            stage.show();"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"        } catch (IOException e) {"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"            e.printStackTrace();"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":33}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import javafx.fxml.FXML;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.Button;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.ScrollPane;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.control.TextField;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.image.Image;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.layout.AnchorPane;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"import javafx.scene.layout.VBox;"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":" * Controller for MainWindow. Provides the layout for the other controls."},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"public class MainWindow extends AnchorPane {"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"    private ScrollPane scrollPane;"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    private VBox dialogContainer;"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"    private TextField userInput;"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"    private Button sendButton;"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    private Duke duke;"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    private Stage stage;"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"    private DialogBox introduce \u003d DialogBox.getDialog(Ui.introduce(), dukeImage, false);"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    //dialogContainer.getChildren().add(introduce);"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"    public void initialize() {"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"        dialogContainer.getChildren().add(introduce);"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"    public void setDuke(Duke d) {"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"        duke \u003d d;"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"    public void setStage(Stage s) {"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"        stage \u003d s;"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"     * the dialog container. Clears the user input after processing."},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"    @FXML"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"    private void handleUserInput() {"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"        String input \u003d userInput.getText();"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"        String response \u003d duke.getResponse(input);"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"        dialogContainer.getChildren().addAll("},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"                DialogBox.getDialog(input, userImage, true),"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"                DialogBox.getDialog(response, dukeImage, false)"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"        );"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"        userInput.clear();"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"            //how to make it show exit message"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"            exitWindow();"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"    private void exitWindow() {"},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"        int secondsToSleep \u003d 1;"},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"            Thread.sleep(secondsToSleep * 1000);"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"        } catch (InterruptedException e) {"},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"            Thread.currentThread().interrupt();"},{"lineNumber":71,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"        stage.close();"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":74,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":74}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":" * Parses the input from user to a format used by rest of the files."},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"public class Parser {"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"    public static String trimWhiteSpaces(String input) {"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"        return input.trim();"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a String array with the zero index being the first group of characters which are not separated by"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"     * whitespace, and the first index being the rest of the characters in str."},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"     * @param input input by the user."},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"     * @return String[] zero index being the first group of characters which are not separated by"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"     * whitespace, and the first index being the rest of the characters in str."},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    public static String[] splitFirstAndRest(String input) {"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"        String[] result \u003d new String[2];"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"        String[] split \u003d input.split(\" \");"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"        result[0] \u003d split[0];"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"        String rest \u003d \"\";"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"        for (int i \u003d 1; i \u003c split.length; i++) {"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"            rest +\u003d \" \" + split[i];"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"        result[1] \u003d rest;"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"        return result;"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"     * Returns the parsed str as an integer."},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"     * @param input input to be parsed to become an int."},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"     * @return int parsed str to an integer."},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"     * @throws NumberFormatException if str is not a number."},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    public static int makeToInt(String input) {"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"            return Integer.parseInt(Parser.trimWhiteSpaces(input));"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"            throw new NumberFormatException(Ui.lineGetter()"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"                     + \" Enter a number after command, \u0027done (number)\u0027\\n or \u0027delete (number)\u0027\\n\""},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"                     + Ui.lineGetter());"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"    public static Command parse(String input) {"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"        if (input.equals(\"bye\")) {"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"            return new ByeCommand();"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"        } else if (input.equals(\"list\")) {"},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"            return new ListCommand();"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"        } else if (input.equals(\"reminders\")) {"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"            return new RemindersCommand();"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"        String[] split \u003d Parser.splitFirstAndRest(input);"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"        String firstPartOfCommand \u003d split[0];"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"        String secondPartOfCommand \u003d split[1];"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"        boolean isWritingToFile \u003d firstPartOfCommand.equals(\"todo\") || firstPartOfCommand.equals(\"deadline\")"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"                || firstPartOfCommand.equals(\"event\");"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"        if (firstPartOfCommand.equals(\"done\")) {"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"            return new DoneCommand(secondPartOfCommand);"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"        } else if (firstPartOfCommand.equals(\"delete\")) {"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"            return new DeleteCommand(secondPartOfCommand);"},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"        } else if (firstPartOfCommand.equals(\"find\")) {"},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"            return new FindCommand(secondPartOfCommand);"},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"        } else if (isWritingToFile) {"},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"            return new WriteCommand(firstPartOfCommand, secondPartOfCommand);"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"        } else {"},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":71,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":73}},{"path":"src/main/java/RemindersCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"public class RemindersCommand extends Command {"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"    public String action() {"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"        return Ui.getReminders();"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":5}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":" * Represents a task that user has not yet done, or has completed."},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"public class Task {"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"    protected String task;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"    protected boolean isDone;"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    public Task(String task) {"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        task \u003d task.strip();"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"        this.task \u003d task;"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"        this.isDone \u003d false;"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    public Task(String task, boolean isDone) {"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"        task \u003d task.strip();"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        this.task \u003d task;"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"        this.isDone \u003d isDone;"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a tick if task is done, and cross otherwise."},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"     * @return String a tick or cross."},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    public String getStatusIcon() {"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"        if (isDone) {"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"            return \"\\u2713\";"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"        } else {"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"            return \"\\u2718\";"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"    public String toString() {"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"        return \"[\" + getStatusIcon() + \"] \" + task;"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"     * Sets the isDone variable to true."},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"    public void setDone() {"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"        isDone \u003d true;"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":44}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"import java.time.LocalDateTime;"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":" * Represents all the tasks the user has input."},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"public class TaskList {"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"     * Sets tasks ArrayList to the list of tasks that user has already input previous time Duke was used."},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"     * @param prevTasks list of tasks that user has already input previous time Duke was used."},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"    public static void setList(ArrayList\u003cTask\u003e prevTasks) {"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        tasks \u003d prevTasks;"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"     * Returns an ArrayList of the tasks so far."},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"     * @return ArrayList of tasks so far."},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"    public static ArrayList\u003cTask\u003e getList() {"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"        //prob with this is can change value as pass by ref"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"        return tasks;"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"     * Returns size of list of tasks."},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"     * @return int size of list of tasks."},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"    public static int getListSize() {"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"        return tasks.size();"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"     * Adds a task to the list of tasks."},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"     * @param task task to be added to list of tasks."},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"    public static void addTask(Task task) {"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"        tasks.add(task);"},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a String representation of all the tasks in the list of tasks."},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"     * @return String of all the tasks in the list of tasks."},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"    public static String printList() {"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"        return Ui.printList(tasks);"},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"     * Sets the task at index number to be complete and returns that task."},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"     * @param number task number in the list that is completed."},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"     * @return Task task that has been completed."},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"     * @throws IndexOutOfBoundsException if num is not in the range of 0 to tasks list size or tasks list size is zero."},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"    public static Task doneTask(int number) {"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"            throw new IndexOutOfBoundsException(Ui.noTasksToBeDone());"},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"        } else if (number \u003c 0 || number \u003e\u003d tasks.size()) {"},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":"            throw new IndexOutOfBoundsException(Ui.doneTaskOutOfRange());"},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"        tasks.get(number).setDone();"},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"        return tasks.get(number);"},{"lineNumber":71,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":74,"author":{"gitId":"VisnuRavi"},"content":"     * Deletes a task at index number and returns that task."},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":76,"author":{"gitId":"VisnuRavi"},"content":"     * @param number task number in the list that is deleted."},{"lineNumber":77,"author":{"gitId":"VisnuRavi"},"content":"     * @return Task task that has been deleted."},{"lineNumber":78,"author":{"gitId":"VisnuRavi"},"content":"     * @throws IndexOutOfBoundsException if num is not in the range of 0 to tasks list size or tasks list size is zero."},{"lineNumber":79,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":80,"author":{"gitId":"VisnuRavi"},"content":"    public static Task deleteTask(int number) {"},{"lineNumber":81,"author":{"gitId":"VisnuRavi"},"content":"        if (tasks.size() \u003d\u003d 0) {"},{"lineNumber":82,"author":{"gitId":"VisnuRavi"},"content":"            throw new IndexOutOfBoundsException(Ui.noTasksToBeDelete());"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"        } else if (number \u003c 0 || number \u003e\u003d tasks.size()) {"},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"            throw new IndexOutOfBoundsException(Ui.deleteTaskOutOfRange());"},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":86,"author":{"gitId":"VisnuRavi"},"content":"        return tasks.remove(number);"},{"lineNumber":87,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":88,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":89,"author":{"gitId":"VisnuRavi"},"content":"    //try use hmap? so like each time we add a  task, we are mapping each word of the task to the idx of occurence in"},{"lineNumber":90,"author":{"gitId":"VisnuRavi"},"content":"    //the list,then in the harddrive can have a section for hmap and like each word and the idxes separated by a comma."},{"lineNumber":91,"author":{"gitId":"VisnuRavi"},"content":"    //can be done, may be good in long term, but is painful to code, may take time, which i dont got too much of"},{"lineNumber":92,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":93,"author":{"gitId":"VisnuRavi"},"content":"     * Returns the String of all the tasks that contain the keyword"},{"lineNumber":94,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":95,"author":{"gitId":"VisnuRavi"},"content":"     * @param keyword word to be used to search the task list"},{"lineNumber":96,"author":{"gitId":"VisnuRavi"},"content":"     * @return String of all the tasks that contain the keyword"},{"lineNumber":97,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":98,"author":{"gitId":"VisnuRavi"},"content":"    public static String findTask(String keyword) {"},{"lineNumber":99,"author":{"gitId":"VisnuRavi"},"content":"        keyword \u003d keyword.trim();"},{"lineNumber":100,"author":{"gitId":"VisnuRavi"},"content":"        String[] split \u003d keyword.split(\" \");"},{"lineNumber":101,"author":{"gitId":"VisnuRavi"},"content":"        if (split.length \u003e 1 || keyword.equals(\"\")) {"},{"lineNumber":102,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalArgumentException(Ui.findFormat());"},{"lineNumber":103,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":104,"author":{"gitId":"VisnuRavi"},"content":"        String result \u003d \"\";"},{"lineNumber":105,"author":{"gitId":"VisnuRavi"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {"},{"lineNumber":106,"author":{"gitId":"VisnuRavi"},"content":"            String task \u003d tasks.get(i).toString();"},{"lineNumber":107,"author":{"gitId":"VisnuRavi"},"content":"            String[] split1 \u003d task.split(\" \");"},{"lineNumber":108,"author":{"gitId":"VisnuRavi"},"content":"            for (int j \u003d 0; j \u003c split1.length; j++) {"},{"lineNumber":109,"author":{"gitId":"VisnuRavi"},"content":"                if (keyword.equals(split1[j])) {"},{"lineNumber":110,"author":{"gitId":"VisnuRavi"},"content":"                    int count \u003d i + 1;"},{"lineNumber":111,"author":{"gitId":"VisnuRavi"},"content":"                    result \u003d result + \" \" + count + \". \" + task + \"\\n\";"},{"lineNumber":112,"author":{"gitId":"VisnuRavi"},"content":"                }"},{"lineNumber":113,"author":{"gitId":"VisnuRavi"},"content":"            }"},{"lineNumber":114,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":115,"author":{"gitId":"VisnuRavi"},"content":"        if (result.equals(\"\")) {"},{"lineNumber":116,"author":{"gitId":"VisnuRavi"},"content":"            return Ui.foundNoMatchingTasks();"},{"lineNumber":117,"author":{"gitId":"VisnuRavi"},"content":"        } else {"},{"lineNumber":118,"author":{"gitId":"VisnuRavi"},"content":"            return Ui.foundMatchingTasks() + result + Ui.lineGetter();"},{"lineNumber":119,"author":{"gitId":"VisnuRavi"},"content":"            //can try make this better"},{"lineNumber":120,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":121,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":122,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":123,"author":{"gitId":"VisnuRavi"},"content":"    public static String getReminders() {"},{"lineNumber":124,"author":{"gitId":"VisnuRavi"},"content":"        String reminders \u003d \"\";"},{"lineNumber":125,"author":{"gitId":"VisnuRavi"},"content":"        LocalDateTime dateTimeNow \u003d LocalDateTime.now();"},{"lineNumber":126,"author":{"gitId":"VisnuRavi"},"content":"        LocalDateTime dateTimeOneWeekAfter \u003d dateTimeNow.plusWeeks(1);"},{"lineNumber":127,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":128,"author":{"gitId":"VisnuRavi"},"content":"        for (int i \u003d 1; i \u003c\u003d tasks.size(); i++) {"},{"lineNumber":129,"author":{"gitId":"VisnuRavi"},"content":"            Task task \u003d tasks.get(i - 1);"},{"lineNumber":130,"author":{"gitId":"VisnuRavi"},"content":"            if (task instanceof Event) {"},{"lineNumber":131,"author":{"gitId":"VisnuRavi"},"content":"                Event event \u003d (Event)task;"},{"lineNumber":132,"author":{"gitId":"VisnuRavi"},"content":"                LocalDateTime eventTime \u003d event.getEvent();"},{"lineNumber":133,"author":{"gitId":"VisnuRavi"},"content":"                boolean withinRange \u003d eventTime.isAfter(dateTimeNow) \u0026\u0026"},{"lineNumber":134,"author":{"gitId":"VisnuRavi"},"content":"                        eventTime.isBefore(dateTimeOneWeekAfter);"},{"lineNumber":135,"author":{"gitId":"VisnuRavi"},"content":"                if (withinRange) {"},{"lineNumber":136,"author":{"gitId":"VisnuRavi"},"content":"                    reminders \u003d reminders + \" \" + i + \".\" + event + \"\\n\";"},{"lineNumber":137,"author":{"gitId":"VisnuRavi"},"content":"                }"},{"lineNumber":138,"author":{"gitId":"VisnuRavi"},"content":"            } else if (task instanceof Deadline) {"},{"lineNumber":139,"author":{"gitId":"VisnuRavi"},"content":"                Deadline deadline \u003d (Deadline) task;"},{"lineNumber":140,"author":{"gitId":"VisnuRavi"},"content":"                LocalDateTime deadlineTime \u003d deadline.getDeadline();"},{"lineNumber":141,"author":{"gitId":"VisnuRavi"},"content":"                boolean withinRange \u003d deadlineTime.isAfter(dateTimeNow) \u0026\u0026"},{"lineNumber":142,"author":{"gitId":"VisnuRavi"},"content":"                        deadlineTime.isBefore(dateTimeOneWeekAfter);"},{"lineNumber":143,"author":{"gitId":"VisnuRavi"},"content":"                if (withinRange) {"},{"lineNumber":144,"author":{"gitId":"VisnuRavi"},"content":"                    reminders \u003d reminders + \" \" + i + \".\" + deadline + \"\\n\";"},{"lineNumber":145,"author":{"gitId":"VisnuRavi"},"content":"                }"},{"lineNumber":146,"author":{"gitId":"VisnuRavi"},"content":"            }"},{"lineNumber":147,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":148,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":149,"author":{"gitId":"VisnuRavi"},"content":"        if (reminders.length() \u003d\u003d 0) {"},{"lineNumber":150,"author":{"gitId":"VisnuRavi"},"content":"            reminders +\u003d \" No tasks due in a week!\\n\";"},{"lineNumber":151,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":152,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":153,"author":{"gitId":"VisnuRavi"},"content":"        return reminders;"},{"lineNumber":154,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":155,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":155}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":" * Represents a Task that is yet to do."},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"public class Todo extends Task {"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"    public Todo(String input) {"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"        super(input);"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"        if (input.length() \u003d\u003d 0) {"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalArgumentException();"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    public Todo(String input, boolean isDone) {"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"        super(input, isDone);"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    @Override"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    public String toString() {"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"        return \"[T]\" + super.toString();"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":20}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.util.ArrayList;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"/**"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":" * Represents all the interactions Duke will have with the user."},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":" */"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"public class Ui {"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"    private static final String LOGO \u003d \" ____        _        \\n\""},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"            + \"|  _ \\\\ _   _| | _____ \\n\""},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"            + \"| | | | | | | |/ / _ \\\\\\n\""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"            + \"| |_| | |_| |   \u003c  __/\\n\""},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    private static final String LINE \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\";"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"     * Returns the line variable."},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"     * @return line variable."},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"    public static String lineGetter() {"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"        return LINE;"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"     * Returns the introductory message the user will see when opening Duke."},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"     * @return String introductory message."},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    public static String introduce() {"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Hey there! I\u0027m Duke\\n How can I help you?\\n\" + LINE;"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a goodbye message user will see when exiting Duke."},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"     * @return String goodbye message."},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"    public static String exit() {"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Bye, see you again!\\n\" + LINE;"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":40,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":41,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":42,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a message informing the user to enter a task when only whitespaces are input."},{"lineNumber":43,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":44,"author":{"gitId":"VisnuRavi"},"content":"     * @return String message informing user to enter a task."},{"lineNumber":45,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":46,"author":{"gitId":"VisnuRavi"},"content":"    public static String informOnlySpaces() {"},{"lineNumber":47,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Please enter a task\\n\" + LINE;"},{"lineNumber":48,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":49,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":50,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":51,"author":{"gitId":"VisnuRavi"},"content":"     * Returns all the tasks in the order of input."},{"lineNumber":52,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":53,"author":{"gitId":"VisnuRavi"},"content":"     * @param tasks list of all tasks."},{"lineNumber":54,"author":{"gitId":"VisnuRavi"},"content":"     * @return String of the tasks in the order of input."},{"lineNumber":55,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":56,"author":{"gitId":"VisnuRavi"},"content":"    public static String printList(ArrayList\u003cTask\u003e tasks) {"},{"lineNumber":57,"author":{"gitId":"VisnuRavi"},"content":"        String list \u003d \"\";"},{"lineNumber":58,"author":{"gitId":"VisnuRavi"},"content":"        if (tasks.size() \u003c 1) {"},{"lineNumber":59,"author":{"gitId":"VisnuRavi"},"content":"            throw new IllegalArgumentException(LINE + \" No tasks so far!\\n\" + LINE);"},{"lineNumber":60,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":61,"author":{"gitId":"VisnuRavi"},"content":"        list \u003d list + LINE + \" Here are the tasks in your list:\\n\";"},{"lineNumber":62,"author":{"gitId":"VisnuRavi"},"content":"        for (int j \u003d 1; j \u003c\u003d tasks.size(); j++) {"},{"lineNumber":63,"author":{"gitId":"VisnuRavi"},"content":"            list \u003d list + \" \" + j + \". \" + tasks.get(j - 1) + \"\\n\";"},{"lineNumber":64,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":65,"author":{"gitId":"VisnuRavi"},"content":"        return list + LINE;"},{"lineNumber":66,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":67,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":68,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":69,"author":{"gitId":"VisnuRavi"},"content":"     * Returns an error message when an illegal input is given by user."},{"lineNumber":70,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":71,"author":{"gitId":"VisnuRavi"},"content":"     * @return String error message when an illegal input is given by user."},{"lineNumber":72,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":73,"author":{"gitId":"VisnuRavi"},"content":"    public static String informIllegalArgExc() {"},{"lineNumber":74,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Please enter \u0027todo (your task)\u0027,\\n \""},{"lineNumber":75,"author":{"gitId":"VisnuRavi"},"content":"                + \"or \u0027deadline (your task) / (deadline date time)\u0027,\\n or \""},{"lineNumber":76,"author":{"gitId":"VisnuRavi"},"content":"                + \"\u0027event (event name) / (event date time)\u0027 to add tasks.\\n \""},{"lineNumber":77,"author":{"gitId":"VisnuRavi"},"content":"                + \"To see your tasks enter \u0027list\u0027.\\n To complete a task enter \""},{"lineNumber":78,"author":{"gitId":"VisnuRavi"},"content":"                + \"\u0027done (number of the task in the list)\u0027.\\n And to close Duke \""},{"lineNumber":79,"author":{"gitId":"VisnuRavi"},"content":"                + \"enter \u0027bye\u0027.\\n\" + LINE;"},{"lineNumber":80,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":81,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":82,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":83,"author":{"gitId":"VisnuRavi"},"content":"     * Returns an error message to give a valid date and time."},{"lineNumber":84,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":85,"author":{"gitId":"VisnuRavi"},"content":"     * @return String error message to give a valid date and time."},{"lineNumber":86,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":87,"author":{"gitId":"VisnuRavi"},"content":"    public static String informDateTimeParseExc() {"},{"lineNumber":88,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Enter date and time in this format yyyy-mm-dd hh:mm\\n\" + LINE;"},{"lineNumber":89,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":90,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":91,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":92,"author":{"gitId":"VisnuRavi"},"content":"     * Returns an error message when unable to save tasks to hard drive."},{"lineNumber":93,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":94,"author":{"gitId":"VisnuRavi"},"content":"     * @return String error message when unable to save tasks to hard drive."},{"lineNumber":95,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":96,"author":{"gitId":"VisnuRavi"},"content":"    public static String informUnableSave() {"},{"lineNumber":97,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Unable to save to hard drive\\n\" + LINE;"},{"lineNumber":98,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":99,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":100,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":101,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a message to signal to the user that his task has been added."},{"lineNumber":102,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":103,"author":{"gitId":"VisnuRavi"},"content":"     * @param task task that the user has input."},{"lineNumber":104,"author":{"gitId":"VisnuRavi"},"content":"     * @param size size of the entire list of tasks."},{"lineNumber":105,"author":{"gitId":"VisnuRavi"},"content":"     * @return String message to signal to the user that his task has been added."},{"lineNumber":106,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":107,"author":{"gitId":"VisnuRavi"},"content":"    public static String addTask(Task task, int size) {"},{"lineNumber":108,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Got it. I\u0027ve added this task:\\n\" + \" \" + task + \"\\n\""},{"lineNumber":109,"author":{"gitId":"VisnuRavi"},"content":"                + \" Now you have \" + size + \" tasks in the list\\n\" + LINE;"},{"lineNumber":110,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":111,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":112,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":113,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a message to signal to the user that his task has been deleted."},{"lineNumber":114,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":115,"author":{"gitId":"VisnuRavi"},"content":"     * @param task task that the user has input."},{"lineNumber":116,"author":{"gitId":"VisnuRavi"},"content":"     * @param size size of the entire list of tasks."},{"lineNumber":117,"author":{"gitId":"VisnuRavi"},"content":"     * @return String message to signal to the user that his task has been deleted."},{"lineNumber":118,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":119,"author":{"gitId":"VisnuRavi"},"content":"    public static String deleteTask(Task task, int size) {"},{"lineNumber":120,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" I\u0027ve removed the following task:\\n\" + \" \" + task"},{"lineNumber":121,"author":{"gitId":"VisnuRavi"},"content":"                + \"\\n\" + \" You now have \" + size + \" tasks in the list\\n\" + LINE;"},{"lineNumber":122,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":123,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":124,"author":{"gitId":"VisnuRavi"},"content":"    /**"},{"lineNumber":125,"author":{"gitId":"VisnuRavi"},"content":"     * Returns a message to signal to the user that his task has completed."},{"lineNumber":126,"author":{"gitId":"VisnuRavi"},"content":"     *"},{"lineNumber":127,"author":{"gitId":"VisnuRavi"},"content":"     * @param task task that the user has input."},{"lineNumber":128,"author":{"gitId":"VisnuRavi"},"content":"     * @return String message to signal to the user that his task has completed."},{"lineNumber":129,"author":{"gitId":"VisnuRavi"},"content":"     */"},{"lineNumber":130,"author":{"gitId":"VisnuRavi"},"content":"    public static String doneTask(Task task) {"},{"lineNumber":131,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Good job on completing this task!\\n\" + \" \""},{"lineNumber":132,"author":{"gitId":"VisnuRavi"},"content":"                + task + \"\\n\" + LINE;"},{"lineNumber":133,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":134,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":135,"author":{"gitId":"VisnuRavi"},"content":"    public static String eventFormat() {"},{"lineNumber":136,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Enter \u0027event (your event)/(date and time)\u0027 with date and time in this format yyyy-mm-dd \" +"},{"lineNumber":137,"author":{"gitId":"VisnuRavi"},"content":"                \"hh:mm\\n\" + LINE;"},{"lineNumber":138,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":139,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":140,"author":{"gitId":"VisnuRavi"},"content":"    public static String deadlineFormat() {"},{"lineNumber":141,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Enter \u0027deadline (your deadline)/(date and time)\u0027 with date and time in this format yyyy-mm-dd\" +"},{"lineNumber":142,"author":{"gitId":"VisnuRavi"},"content":"                \" hh:mm\\n\" + LINE;"},{"lineNumber":143,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":144,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":145,"author":{"gitId":"VisnuRavi"},"content":"    public static String noTasksToBeDone() {"},{"lineNumber":146,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \"  No tasks to complete!\\n\" + LINE;"},{"lineNumber":147,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":148,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":149,"author":{"gitId":"VisnuRavi"},"content":"    public static String noTasksToBeDelete() {"},{"lineNumber":150,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \"  No tasks to delete!\\n\" + LINE;"},{"lineNumber":151,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":152,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":153,"author":{"gitId":"VisnuRavi"},"content":"    public static String doneTaskOutOfRange() {"},{"lineNumber":154,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Enter \u0027done\u0027 followed by a number between \""},{"lineNumber":155,"author":{"gitId":"VisnuRavi"},"content":"                + \"1 and \" + TaskList.getListSize() + \"\\n\" + LINE;"},{"lineNumber":156,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":157,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":158,"author":{"gitId":"VisnuRavi"},"content":"    public static String deleteTaskOutOfRange() {"},{"lineNumber":159,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Enter \u0027delete\u0027 followed by a number between \""},{"lineNumber":160,"author":{"gitId":"VisnuRavi"},"content":"                + \"1 and \" + TaskList.getListSize() + \"\\n\" + LINE;"},{"lineNumber":161,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":162,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":163,"author":{"gitId":"VisnuRavi"},"content":"    public static String findFormat() {"},{"lineNumber":164,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Please enter \u0027find\u0027 followed by only 1 word to search\\n\" + LINE;"},{"lineNumber":165,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":166,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":167,"author":{"gitId":"VisnuRavi"},"content":"    public static String foundNoMatchingTasks() {"},{"lineNumber":168,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Sorry, there are no matching tasks :(\\n\" + LINE;"},{"lineNumber":169,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":170,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":171,"author":{"gitId":"VisnuRavi"},"content":"    public static String foundMatchingTasks() {"},{"lineNumber":172,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + \" Your matching tasks are as follows:\\n\";"},{"lineNumber":173,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":174,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":175,"author":{"gitId":"VisnuRavi"},"content":"    public static String getReminders() {"},{"lineNumber":176,"author":{"gitId":"VisnuRavi"},"content":"        return LINE + TaskList.getReminders() + LINE;"},{"lineNumber":177,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":178,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":178}},{"path":"src/main/java/WriteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import java.io.IOException;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"public class WriteCommand extends Command {"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"    private String secondPartOfCommand;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"    private String firstPartOfCommand;"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"    public WriteCommand(String firstPartOfCommand,String secondPartOfCommand) {"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"        this.firstPartOfCommand \u003d firstPartOfCommand;"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        this.secondPartOfCommand \u003d secondPartOfCommand;"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    //this method return string, adds to task list and write to file"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"    //too many things in 1 method, will need to split up"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    public String action() {"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"        Task task \u003d null;"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        if (firstPartOfCommand.equals(\"todo\")) {"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"            task \u003d new Todo(secondPartOfCommand);"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"        } else if (firstPartOfCommand.equals(\"deadline\")) {"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"            task \u003d new Deadline(secondPartOfCommand);"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"        } else if (firstPartOfCommand.equals(\"event\")) {"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"            task \u003d new Event(secondPartOfCommand);"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"        } else {"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"            assert false : \"In wrong part of WriteCommand action\";"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"        TaskList.addTask(task);"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"        super.writeToFile();"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"        return Ui.addTask(task, TaskList.getListSize());"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":29}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.geometry.Insets?\u003e"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.text.Text?\u003e"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.control.Label?\u003e"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"Infinity\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" spacing\u003d\"5.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"  \u003cchildren\u003e"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Text\" wrapText\u003d\"true\"\u003e"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"         \u003cfont\u003e"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"            \u003cFont name\u003d\"Lohit Tamil Classical\" size\u003d\"17.0\" /\u003e"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"         \u003c/font\u003e\u003c/Label\u003e"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"    \u003cCircle fx:id\u003d\"displayPicture\" pickOnBounds\u003d\"true\" radius\u003d\"50.0\"/\u003e"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"  \u003c/children\u003e"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"  \u003cpadding\u003e"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"    \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"  \u003c/padding\u003e"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"   \u003copaqueInsets\u003e"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"      \u003cInsets /\u003e"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"   \u003c/opaqueInsets\u003e"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"\u003c/fx:root\u003e"}],"authorContributionMap":{"VisnuRavi":24}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.control.Button?\u003e"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.control.TextField?\u003e"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"\u003c?import javafx.scene.text.Font?\u003e"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"\u003cAnchorPane maxHeight\u003d\"Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefWidth\u003d\"500.0\""},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"            xmlns\u003d\"http://javafx.com/javafx/15.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"MainWindow\"\u003e"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"  \u003cchildren\u003e"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"424.0\""},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"               promptText\u003d\"Enter Message\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"         \u003cfont\u003e"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"            \u003cFont name\u003d\"Lohit Tamil Classical\" size\u003d\"17.0\" /\u003e"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"         \u003c/font\u003e\u003c/TextField\u003e"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"    \u003cButton fx:id\u003d\"sendButton\" alignment\u003d\"CENTER\" layoutX\u003d\"424.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\""},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"            onAction\u003d\"#handleUserInput\" opacity\u003d\"0.75\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"         \u003cfont\u003e"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"            \u003cFont size\u003d\"17.0\" /\u003e"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"         \u003c/font\u003e\u003c/Button\u003e"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"500.0\" vvalue\u003d\"1.0\"\u003e"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"      \u003ccontent\u003e"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"488.0\" /\u003e"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"      \u003c/content\u003e"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"    \u003c/ScrollPane\u003e"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"  \u003c/children\u003e"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"\u003c/AnchorPane\u003e"}],"authorContributionMap":{"VisnuRavi":29}},{"path":"test/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"import static org.junit.jupiter.api.Assertions.fail;"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"class ParserTest {"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"    void trimWhiteSpaces_stringWithLeadingAndTrailingWhiteSpace_trimmedString() {"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(\"df\", Parser.trimWhiteSpaces(\"   df   \"));"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"    void splitFirstAndRest_stringWithSpaces_firstInZeroIdxRestInFirstIdx() {"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"        String[] check \u003d {\"first\", \" have a good day\"};"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        String[] result \u003d Parser.splitFirstAndRest(\"first have a good day\");"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"        for (int i \u003d 0; i \u003c result.length; i++) {"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"            System.out.println(result[i]);"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(check[0], result[0]);"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(check[1], result[1]);"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"    void makeToInt_notNumber_throwNumberFormatExc() {"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"        try {"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"            assertEquals(0, Parser.makeToInt(\"dsf\"));"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"            fail();"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"        } catch (NumberFormatException e) {"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"            assertEquals(Ui.lineGetter()"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"                    + \" Enter a number after command, \u0027done (number)\u0027 or \u0027delete (number)\u0027\\n\""},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"                    + Ui.lineGetter(), e.getMessage());"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"        }"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":35}},{"path":"test/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"import org.junit.jupiter.api.Test;"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"import static org.junit.jupiter.api.Assertions.*;"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"class TaskTest {"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"    void getStatusIcon_taskIsDone_iconIsTick() {"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"        Task task \u003d new Task(\" sdf \", true);"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(\"\\u2713\", task.getStatusIcon());"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":""},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"    @Test"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"    void doneTask_taskNotDone_isDoneTrue() {"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"        Task task \u003d new Task(\"fs\");"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"        task.setDone();"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"        assertEquals(true, task.isDone);"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"    }"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"}"}],"authorContributionMap":{"VisnuRavi":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"VisnuRavi"},"content":"todo     eat later"},{"lineNumber":2,"author":{"gitId":"VisnuRavi"},"content":"deadline     eat     mee siam   /  2021-01-23 20:21"},{"lineNumber":3,"author":{"gitId":"VisnuRavi"},"content":"event    go to buffet   /    2020-12-23 23:23"},{"lineNumber":4,"author":{"gitId":"VisnuRavi"},"content":"list"},{"lineNumber":5,"author":{"gitId":"VisnuRavi"},"content":"done 1"},{"lineNumber":6,"author":{"gitId":"VisnuRavi"},"content":"done 2"},{"lineNumber":7,"author":{"gitId":"VisnuRavi"},"content":"find eat"},{"lineNumber":8,"author":{"gitId":"VisnuRavi"},"content":"find nothign"},{"lineNumber":9,"author":{"gitId":"VisnuRavi"},"content":"find"},{"lineNumber":10,"author":{"gitId":"VisnuRavi"},"content":"find"},{"lineNumber":11,"author":{"gitId":"VisnuRavi"},"content":"done"},{"lineNumber":12,"author":{"gitId":"VisnuRavi"},"content":"delete"},{"lineNumber":13,"author":{"gitId":"VisnuRavi"},"content":"done"},{"lineNumber":14,"author":{"gitId":"VisnuRavi"},"content":"list"},{"lineNumber":15,"author":{"gitId":"VisnuRavi"},"content":"done 4"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"done sdfs"},{"lineNumber":17,"author":{"gitId":"VisnuRavi"},"content":"todo"},{"lineNumber":18,"author":{"gitId":"VisnuRavi"},"content":"deadline"},{"lineNumber":19,"author":{"gitId":"VisnuRavi"},"content":"deadline sdf"},{"lineNumber":20,"author":{"gitId":"VisnuRavi"},"content":"deadline sdf /"},{"lineNumber":21,"author":{"gitId":"VisnuRavi"},"content":"deadline sdf / 2020-43-43"},{"lineNumber":22,"author":{"gitId":"VisnuRavi"},"content":"deadline sdf / 2020-43-43 24:24"},{"lineNumber":23,"author":{"gitId":"VisnuRavi"},"content":"deadline sdf / 2020-43-43  24:24"},{"lineNumber":24,"author":{"gitId":"VisnuRavi"},"content":"event"},{"lineNumber":25,"author":{"gitId":"VisnuRavi"},"content":"event sdf"},{"lineNumber":26,"author":{"gitId":"VisnuRavi"},"content":"event sdf /"},{"lineNumber":27,"author":{"gitId":"VisnuRavi"},"content":"event sdf / 2020-43-43"},{"lineNumber":28,"author":{"gitId":"VisnuRavi"},"content":"event sdf / 2020-43-43 24:24"},{"lineNumber":29,"author":{"gitId":"VisnuRavi"},"content":"event sdf / 2020-43-43  24:24"},{"lineNumber":30,"author":{"gitId":"VisnuRavi"},"content":"delete 1"},{"lineNumber":31,"author":{"gitId":"VisnuRavi"},"content":"delete 1"},{"lineNumber":32,"author":{"gitId":"VisnuRavi"},"content":"delete 1"},{"lineNumber":33,"author":{"gitId":"VisnuRavi"},"content":"delete"},{"lineNumber":34,"author":{"gitId":"VisnuRavi"},"content":"delete 0"},{"lineNumber":35,"author":{"gitId":"VisnuRavi"},"content":"done 0"},{"lineNumber":36,"author":{"gitId":"VisnuRavi"},"content":"todo chill"},{"lineNumber":37,"author":{"gitId":"VisnuRavi"},"content":"deadline dsfgf/fg"},{"lineNumber":38,"author":{"gitId":"VisnuRavi"},"content":"event dsf/hwef"},{"lineNumber":39,"author":{"gitId":"VisnuRavi"},"content":"bye"}],"authorContributionMap":{"VisnuRavi":39}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash"},{"lineNumber":2,"author":{"gitId":"-"},"content":""},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":8,"author":{"gitId":"-"},"content":""},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":14,"author":{"gitId":"-"},"content":""},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred"},{"lineNumber":16,"author":{"gitId":"VisnuRavi"},"content":"if ! javac -cp /home/visnu/Documents/2103/ip/src/main/java -Xlint:none -d ../bin /home/visnu/Documents/2103/ip/src/main/java/*.java"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\""},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi"},{"lineNumber":21,"author":{"gitId":"-"},"content":""},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT"},{"lineNumber":24,"author":{"gitId":"-"},"content":""},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":28,"author":{"gitId":"-"},"content":""},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\""},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\""},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi"}],"authorContributionMap":{"VisnuRavi":1,"-":37}}]
